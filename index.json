{
  "api/OpenCV.Net.AdaptiveThresholdMethod.html": {
    "href": "api/OpenCV.Net.AdaptiveThresholdMethod.html",
    "title": "Enum AdaptiveThresholdMethod",
    "keywords": "Enum AdaptiveThresholdMethod Specifies the available adaptive threshold methods. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum AdaptiveThresholdMethod : int Fields Name Description GaussianC Specifies that the threshold value is the weighted sum (i.e. cross-correlation with a Gaussian window) of the pixel neighborhood minus a constant. MeanC Specifies that the threshold value is the mean of the pixel neighborhood minus a constant."
  },
  "api/OpenCV.Net.Arr.html": {
    "href": "api/OpenCV.Net.Arr.html",
    "title": "Class Arr",
    "keywords": "Class Arr Represents an arbitrary array-like data structure. Inheritance Object CVHandle Arr IplImage Mat MatND SparseMat Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public abstract class Arr : CVHandle Properties | Improve this Doc View Source ElementType Gets the type of array elements. Declaration public int ElementType { get; } Property Value Type Description Int32 | Improve this Doc View Source Item[Int32] Gets or sets a specific array element. Declaration public Scalar this[int index] { get; set; } Parameters Type Name Description Int32 index The zero-based element index. Property Value Type Description Scalar The array element specified by index . Remarks This method can be used for sequential access to 1D, 2D or nD dense arrays. The method can be used for sparse arrays as well; if the requested node does not exist, it is created and set to zero. | Improve this Doc View Source Item[Int32, Int32] Gets or sets a specific array element. Declaration public Scalar this[int index0, int index1] { get; set; } Parameters Type Name Description Int32 index0 The zero-based element index on the first array dimension. Int32 index1 The zero-based element index on the second array dimension. Property Value Type Description Scalar The array element specified by index0 and index1 . Remarks The array must have two dimensions. The method can be used for sparse arrays as well; if the requested node does not exist, it is created and set to zero. | Improve this Doc View Source Item[Int32, Int32, Int32] Gets or sets a specific array element. Declaration public Scalar this[int index0, int index1, int index2] { get; set; } Parameters Type Name Description Int32 index0 The zero-based element index on the first array dimension. Int32 index1 The zero-based element index on the second array dimension. Int32 index2 The zero-based element index on the third array dimension. Property Value Type Description Scalar The array element specified by index0 , index1 and index2 . Remarks The array must have three dimensions. The method can be used for sparse arrays as well; if the requested node does not exist, it is created and set to zero. | Improve this Doc View Source Item[Int32[]] Gets or sets a specific array element. Declaration public Scalar this[params int[] index] { get; set; } Parameters Type Name Description Int32 [] index An array specifying the zero-based multi-dimensional element index. The length of index must be the same as the number of dimensions of this instance. Property Value Type Description Scalar The array element specified by the multi-dimensional index . Remarks The method can be used for sparse arrays as well; if the requested node does not exist, it is created and set to zero. | Improve this Doc View Source Size Gets the pixel-accurate size of the array. Declaration public Size Size { get; } Property Value Type Description Size Methods | Improve this Doc View Source CheckRange(CheckArrayFlags, Double, Double) Checks that every array element is neither NaN nor Infinity. It can also check whether the elements are within a specified range. Declaration public bool CheckRange(CheckArrayFlags flags, double minVal, double maxVal) Parameters Type Name Description CheckArrayFlags flags The operation flags. A combination of CheckNanInfinity and CheckRange . If the latter is set, the function checks whether every value of the array is greater than or equal to minVal and less than maxVal . If CheckQuiet is set, the function does not raise an error if an element is invalid or out of range. Double minVal The inclusive lower boundary of valid values range. Double maxVal The exclusive upper boundary of valid values range. Returns Type Description Boolean true if all array elements are valid and within range; false otherwise. | Improve this Doc View Source ClearND(Int32[]) Clears a specific element of a multi-dimensional array. If the array is dense, the element is set to zero; in case of sparse arrays, it deletes the specified node. Declaration public void ClearND(params int[] index) Parameters Type Name Description Int32 [] index An array specifying the zero-based multi-dimensional index of the element to be cleared. | Improve this Doc View Source GetCol(Int32) Returns a single column of the current matrix as a new Mat . No data is copied. Declaration public Mat GetCol(int col) Parameters Type Name Description Int32 col Zero-based index of the selected column. Returns Type Description Mat A new Mat that corresponds to the selected column of the current matrix. | Improve this Doc View Source GetCols(Int32, Int32) Returns a column span of the current matrix as a new Mat . No data is copied. Declaration public Mat GetCols(int startCol, int endCol) Parameters Type Name Description Int32 startCol Zero-based index of the starting column (inclusive) of the span. Int32 endCol Zero-based index of the ending column (exclusive) of the span Returns Type Description Mat The multi-column matrix containing the column span. | Improve this Doc View Source GetDiag(Int32) Returns a specified diagonal of the current matrix. Declaration public Mat GetDiag(int diag = 0) Parameters Type Name Description Int32 diag The selected array diagonal. Zero corresponds to the main diagonal, negative one corresponds to the diagonal above the main, positive one corresponds to the diagonal below the main, and so forth. Returns Type Description Mat A new Mat that corresponds to the specified diagonal of the current matrix. | Improve this Doc View Source GetDims(Int32[]) Returns the number of array dimensions and their sizes. Declaration public int GetDims(int[] sizes = null) Parameters Type Name Description Int32 [] sizes The optional output array of the dimension sizes. For 2D arrays the number of rows (height) goes first and the number of columns (width) goes next. Returns Type Description Int32 The number of array dimensions. | Improve this Doc View Source GetDimSize(Int32) Returns the size of a particular array dimension. Declaration public int GetDimSize(int index) Parameters Type Name Description Int32 index The zero-based dimension index. For matrices, zero means number of rows and one means number of columns; for images zero means height and one means width. Returns Type Description Int32 The number of elements in a particular array dimension. | Improve this Doc View Source GetImage() Returns image header for arbitrary array. Declaration public IplImage GetImage() Returns Type Description IplImage An image header for the array which can be an image or matrix. | Improve this Doc View Source GetMat(Boolean) Returns matrix header for arbitrary array. Declaration public Mat GetMat(bool allowND = false) Parameters Type Name Description Boolean allowND If true , the function accepts multi-dimensional dense arrays of type MatND and returns a 2D matrix if the MatND has two dimensions or 1D matrix otherwise. The array must be continuous. Returns Type Description Mat A matrix header for the array which can be an image, matrix or multi-dimensional dense array. | Improve this Doc View Source GetRawData(out IntPtr) Retrieves low-level information about the array. Declaration public void GetRawData(out IntPtr data) Parameters Type Name Description IntPtr data Output pointer to the whole image origin or ROI origin if ROI is set. | Improve this Doc View Source GetRawData(out IntPtr, out Int32) Retrieves low-level information about the array. Declaration public void GetRawData(out IntPtr data, out int step) Parameters Type Name Description IntPtr data Output pointer to the whole image origin or ROI origin if ROI is set. Int32 step Output full row length in bytes. | Improve this Doc View Source GetRawData(out IntPtr, out Int32, out Size) Retrieves low-level information about the array. Declaration public void GetRawData(out IntPtr data, out int step, out Size roiSize) Parameters Type Name Description IntPtr data Output pointer to the whole image origin or ROI origin if ROI is set. Int32 step Output full row length in bytes. Size roiSize Output pixel-accurate ROI size. | Improve this Doc View Source GetReal(Int32) Returns a specific element of single-channel array. Declaration public double GetReal(int index) Parameters Type Name Description Int32 index The zero-based element index. Returns Type Description Double The array element specified by index . Remarks This method can be used for sequential access to 1D, 2D or nD dense arrays. The method can be used for sparse arrays as well; if the requested node does not exist, it is created and set to zero. | Improve this Doc View Source GetReal(Int32, Int32) Returns a specific element of single-channel array. Declaration public double GetReal(int index0, int index1) Parameters Type Name Description Int32 index0 The zero-based element index on the first array dimension. Int32 index1 The zero-based element index on the second array dimension. Returns Type Description Double The array element specified by index0 and index1 . Remarks The array must have two dimensions. The method can be used for sparse arrays as well; if the requested node does not exist, it is created and set to zero. | Improve this Doc View Source GetReal(Int32, Int32, Int32) Returns a specific element of single-channel array. Declaration public double GetReal(int index0, int index1, int index2) Parameters Type Name Description Int32 index0 The zero-based element index on the first array dimension. Int32 index1 The zero-based element index on the second array dimension. Int32 index2 The zero-based element index on the third array dimension. Returns Type Description Double The array element specified by index0 , index1 and index2 . Remarks The array must have three dimensions. The method can be used for sparse arrays as well; if the requested node does not exist, it is created and set to zero. | Improve this Doc View Source GetReal(Int32[]) Returns a specific element of single-channel array. Declaration public double GetReal(params int[] index) Parameters Type Name Description Int32 [] index An array specifying the zero-based multi-dimensional element index. The length of index must be the same as the number of dimensions of this instance. Returns Type Description Double The array element specified by the multi-dimensional index . Remarks The method can be used for sparse arrays as well; if the requested node does not exist, it is created and set to zero. | Improve this Doc View Source GetRow(Int32) Returns a single row of the current matrix as a new Mat . No data is copied. Declaration public Mat GetRow(int row) Parameters Type Name Description Int32 row Zero-based index of the selected row. Returns Type Description Mat A new Mat that corresponds to the selected row of the current matrix. | Improve this Doc View Source GetRows(Int32, Int32, Int32) Returns a row span of the current matrix as a new Mat . No data is copied. Declaration public Mat GetRows(int startRow, int endRow, int deltaRow = 1) Parameters Type Name Description Int32 startRow Zero-based index of the starting row (inclusive) of the span. Int32 endRow Zero-based index of the ending row (exclusive) of the span Int32 deltaRow Index step in the row span. Returns Type Description Mat The multi-row matrix containing the row span. | Improve this Doc View Source GetSubRect(Rect) Creates a new Mat from a subrectangle of the current instance. No data is copied. Declaration public Mat GetSubRect(Rect rect) Parameters Type Name Description Rect rect Zero-based coordinates of the rectangle of interest. Returns Type Description Mat A new Mat that corresponds to the specified rectangle of the current matrix. | Improve this Doc View Source Ptr(Int32) Returns a pointer to a specific array element. Declaration public IntPtr Ptr(int index) Parameters Type Name Description Int32 index The zero-based element index. Returns Type Description IntPtr The pointer to the array element specified by index . Remarks This method can be used for sequential access to 1D, 2D or nD dense arrays. The method can be used for sparse arrays as well; if the requested node does not exist, it is created and set to zero. | Improve this Doc View Source Ptr(Int32, Int32) Returns a pointer to a specific array element. Declaration public IntPtr Ptr(int index0, int index1) Parameters Type Name Description Int32 index0 The zero-based element index on the first array dimension. Int32 index1 The zero-based element index on the second array dimension. Returns Type Description IntPtr The pointer to the array element specified by index0 and index1 . Remarks The array must have two dimensions. The method can be used for sparse arrays as well; if the requested node does not exist, it is created and set to zero. | Improve this Doc View Source Ptr(Int32, Int32, Int32) Returns a pointer to a specific array element. Declaration public IntPtr Ptr(int index0, int index1, int index2) Parameters Type Name Description Int32 index0 The zero-based element index on the first array dimension. Int32 index1 The zero-based element index on the second array dimension. Int32 index2 The zero-based element index on the third array dimension. Returns Type Description IntPtr The pointer to the array element specified by index0 , index1 and index2 . Remarks The array must have three dimensions. The method can be used for sparse arrays as well; if the requested node does not exist, it is created and set to zero. | Improve this Doc View Source Ptr(Int32, Int32, Int32, out Int32) Returns a pointer to a specific array element. Declaration public IntPtr Ptr(int index0, int index1, int index2, out int elementType) Parameters Type Name Description Int32 index0 The zero-based element index on the first array dimension. Int32 index1 The zero-based element index on the second array dimension. Int32 index2 The zero-based element index on the third array dimension. Int32 elementType When this method returns, contains the type of matrix elements. This parameter is passed uninitialized. Returns Type Description IntPtr The pointer to the array element specified by index0 , index1 and index2 . Remarks The array must have three dimensions. The method can be used for sparse arrays as well; if the requested node does not exist, it is created and set to zero. | Improve this Doc View Source Ptr(Int32, Int32, out Int32) Returns a pointer to a specific array element. Declaration public IntPtr Ptr(int index0, int index1, out int elementType) Parameters Type Name Description Int32 index0 The zero-based element index on the first array dimension. Int32 index1 The zero-based element index on the second array dimension. Int32 elementType When this method returns, contains the type of matrix elements. This parameter is passed uninitialized. Returns Type Description IntPtr The pointer to the array element specified by index0 and index1 . Remarks The array must have two dimensions. The method can be used for sparse arrays as well; if the requested node does not exist, it is created and set to zero. | Improve this Doc View Source Ptr(Int32, out Int32) Returns a pointer to a specific array element. Declaration public IntPtr Ptr(int index, out int elementType) Parameters Type Name Description Int32 index The zero-based element index. Int32 elementType When this method returns, contains the type of matrix elements. This parameter is passed uninitialized. Returns Type Description IntPtr The pointer to the array element specified by index . Remarks This method can be used for sequential access to 1D, 2D or nD dense arrays. The method can be used for sparse arrays as well; if the requested node does not exist, it is created and set to zero. | Improve this Doc View Source Ptr(Int32[]) Returns a pointer to a specific array element. Declaration public IntPtr Ptr(int[] index) Parameters Type Name Description Int32 [] index An array specifying the zero-based multi-dimensional element index. The length of index must be the same as the number of dimensions of this instance. Returns Type Description IntPtr The pointer to the array element specified by the multi-dimensional index . Remarks The method can be used for sparse arrays as well; if the requested node does not exist, it is created and set to zero. | Improve this Doc View Source Ptr(Int32[], out Int32, Boolean) Returns a pointer to a specific array element. Declaration public IntPtr Ptr(int[] index, out int elementType, bool createNode = true) Parameters Type Name Description Int32 [] index An array specifying the zero-based multi-dimensional element index. The length of index must be the same as the number of dimensions of this instance. Int32 elementType When this method returns, contains the type of matrix elements. This parameter is passed uninitialized. Boolean createNode Optional parameter for sparse arrays only. true means that the requested element is created if it does not exist already; otherwise, the array will not be changed. Returns Type Description IntPtr The pointer to the array element specified by the multi-dimensional index . | Improve this Doc View Source Reshape(Int32, Int32) Changes shape of matrix/image without copying data. Declaration public Mat Reshape(int channels, int rows = 0) Parameters Type Name Description Int32 channels The new number of channels. Zero means that the number of channels remains unchanged. Int32 rows The new number of rows. Zero means that the number of rows remains unchanged unless it needs to be changed according to channels . Returns Type Description Mat A new matrix header for the array with the newly specified shape. | Improve this Doc View Source Set(Scalar, Arr) Sets every element of the array to a given value. Declaration public void Set(Scalar value, Arr mask = null) Parameters Type Name Description Scalar value The fill value. Arr mask Optional operation mask, 8-bit single-channel array specifying the elements that should be changed. | Improve this Doc View Source SetData(IntPtr, Int32) Assigns the specified user data pointer to the array header. Declaration public void SetData(IntPtr data, int step) Parameters Type Name Description IntPtr data The user data pointer to the raw element data. Int32 step The full row length in bytes. | Improve this Doc View Source SetReal(Int32, Double) Sets a specific element of single-channel array. Declaration public void SetReal(int index, double value) Parameters Type Name Description Int32 index The zero-based element index. Double value The assigned value. Remarks The method can be used for sparse arrays as well; if the node does not exist, it is created and set to the specified value . | Improve this Doc View Source SetReal(Int32, Int32, Double) Sets a specific element of single-channel array. Declaration public void SetReal(int index0, int index1, double value) Parameters Type Name Description Int32 index0 The zero-based element index on the first array dimension. Int32 index1 The zero-based element index on the second array dimension. Double value The assigned value. Remarks The method can be used for sparse arrays as well; if the node does not exist, it is created and set to the specified value . | Improve this Doc View Source SetReal(Int32, Int32, Int32, Double) Sets a specific element of single-channel array. Declaration public void SetReal(int index0, int index1, int index2, double value) Parameters Type Name Description Int32 index0 The zero-based element index on the first array dimension. Int32 index1 The zero-based element index on the second array dimension. Int32 index2 The zero-based element index on the third array dimension. Double value The assigned value. Remarks The method can be used for sparse arrays as well; if the node does not exist, it is created and set to the specified value . | Improve this Doc View Source SetReal(Int32[], Double) Sets a specific element of single-channel array. Declaration public void SetReal(int[] index, double value) Parameters Type Name Description Int32 [] index An array specifying the zero-based multi-dimensional element index. The length of index must be the same as the number of dimensions of this instance. Double value The assigned value. Remarks The method can be used for sparse arrays as well; if the node does not exist, it is created and set to the specified value . | Improve this Doc View Source SetZero() Clears the array. In the case of dense arrays, all elements are set to zero; for sparse arrays all the elements are removed. Declaration public void SetZero()"
  },
  "api/OpenCV.Net.AttrList.html": {
    "href": "api/OpenCV.Net.AttrList.html",
    "title": "Struct AttrList",
    "keywords": "Struct AttrList Represents a list of attributes. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public struct AttrList Properties | Improve this Doc View Source Item[String] Gets the attribute value with the specified name . Declaration public string this[string name] { get; } Parameters Type Name Description String name The name of the attribute. Property Value Type Description String The value associated with the specified name . | Improve this Doc View Source Next Gets the next chunk of attributes in the list. Declaration public AttrList? Next { get; } Property Value Type Description Nullable < AttrList >"
  },
  "api/OpenCV.Net.AvgComp.html": {
    "href": "api/OpenCV.Net.AvgComp.html",
    "title": "Struct AvgComp",
    "keywords": "Struct AvgComp Represents a structure that contains the bounding box and number of neighbors of objects detected by DetectObjects(Arr, MemStorage, Double, Int32, HaarDetectObjectFlags, Size, Size) . Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public struct AvgComp Fields | Improve this Doc View Source Neighbors The number of neighbor rectangles in the group. Declaration public int Neighbors Field Value Type Description Int32 | Improve this Doc View Source Rect The bounding rectangle for the object (average rectangle of a group). Declaration public Rect Rect Field Value Type Description Rect"
  },
  "api/OpenCV.Net.ButtonCallback.html": {
    "href": "api/OpenCV.Net.ButtonCallback.html",
    "title": "Delegate ButtonCallback",
    "keywords": "Delegate ButtonCallback Represents the method that will be called when the button changes state. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public delegate void ButtonCallback(bool state); Parameters Type Name Description Boolean state The new state of the button."
  },
  "api/OpenCV.Net.ButtonType.html": {
    "href": "api/OpenCV.Net.ButtonType.html",
    "title": "Enum ButtonType",
    "keywords": "Enum ButtonType Specifies the available GUI button types. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum ButtonType : int Fields Name Description CheckBox Specifies that the button will be a checkbox button. PushButton Specifies that the button will be a push button. RadioBox Specifies that the button will be a radiobox button. The radiobox on the same button bar (same line) are exclusive; only one can be selected at a time."
  },
  "api/OpenCV.Net.CameraCalibrationFlags.html": {
    "href": "api/OpenCV.Net.CameraCalibrationFlags.html",
    "title": "Enum CameraCalibrationFlags",
    "keywords": "Enum CameraCalibrationFlags Specifies available operation flags for camera calibration. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum CameraCalibrationFlags : int Fields Name Description FixAspectRatio Specifies that the function considers only fy as a free parameter. The ratio fx/fy stays the same as in the input camera matrix . When UseIntrinsicGuess is not set, the actual input values of fx and fy are ignored; only their ratio is computed and used further. FixFocalLength Specifies that the focal length (fx, fy) is not changed during the optimization. FixK1 Specifies that the k1 radial distortion coefficient is not changed during the optimization. If UseIntrinsicGuess is set, the coefficient from the supplied coefficients matrix is used. Otherwise, it is set to 0. FixK2 Specifies that the k2 radial distortion coefficient is not changed during the optimization. If UseIntrinsicGuess is set, the coefficient from the supplied coefficients matrix is used. Otherwise, it is set to 0. FixK3 Specifies that the k3 radial distortion coefficient is not changed during the optimization. If UseIntrinsicGuess is set, the coefficient from the supplied coefficients matrix is used. Otherwise, it is set to 0. FixK4 Specifies that the k4 radial distortion coefficient is not changed during the optimization. If UseIntrinsicGuess is set, the coefficient from the supplied coefficients matrix is used. Otherwise, it is set to 0. FixK5 Specifies that the k5 radial distortion coefficient is not changed during the optimization. If UseIntrinsicGuess is set, the coefficient from the supplied coefficients matrix is used. Otherwise, it is set to 0. FixK6 Specifies that the k6 radial distortion coefficient is not changed during the optimization. If UseIntrinsicGuess is set, the coefficient from the supplied coefficients matrix is used. Otherwise, it is set to 0. FixPrincipalPoint Specifies that the principal point is not changed during the global optimization. It stays at the center or at a different location specified when UseIntrinsicGuess is set too. None Specifies that no operation flags are active. RationalModel Coefficients k4, k5, and k6 are enabled. To provide the backward compatibility, this extra flag should be explicitly specified to make the calibration function use the rational model and return 8 coefficients. If the flag is not set, the function computes and returns only 5 distortion coefficients. UseIntrinsicGuess Specifies that some or all of the intrinsic parameters should be optimized according to the specified flags. Initial values are provided by the user. ZeroTangentialDistortion Specifies that tangential distortion coefficients (p1, p2) are set to zeros and stay zero."
  },
  "api/OpenCV.Net.Capture.html": {
    "href": "api/OpenCV.Net.Capture.html",
    "title": "Class Capture",
    "keywords": "Class Capture Represents a video capture stream. Inheritance Object Capture Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public sealed class Capture : SafeHandleZeroOrMinusOneIsInvalid Properties | Improve this Doc View Source CaptureDomain Gets the capture back end used for image acquisition. Declaration public CaptureDomain CaptureDomain { get; } Property Value Type Description CaptureDomain Methods | Improve this Doc View Source CreateCameraCapture(Int32) Initializes capturing a video from a camera. Declaration public static Capture CreateCameraCapture(int index) Parameters Type Name Description Int32 index Index of the camera to be used. If there is only one camera or it does not matter what camera is used -1 may be passed. Returns Type Description Capture A newly created Capture instance representing image acquisition from a camera. | Improve this Doc View Source CreateCameraCapture(Int32, CaptureDomain) Initializes capturing a video from a camera using the specified domain . Declaration public static Capture CreateCameraCapture(int index, CaptureDomain domain) Parameters Type Name Description Int32 index Index of the camera to be used. If there is only one camera or it does not matter what camera is used -1 may be passed. CaptureDomain domain The capture domain used to indicate what kind of camera source should be acquired. Returns Type Description Capture A newly created Capture instance representing image acquisition from a camera. | Improve this Doc View Source CreateFileCapture(String) Initializes capturing a video from the specified file. Which codecs and file formats are supported depends on the back end library. Declaration public static Capture CreateFileCapture(string fileName) Parameters Type Name Description String fileName The path to the video file. Returns Type Description Capture A newly created Capture instance representing image acquisition from a video file. | Improve this Doc View Source GetProperty(CaptureProperty) Gets video capture properties. Declaration public double GetProperty(CaptureProperty propertyId) Parameters Type Name Description CaptureProperty propertyId The property identifier as specified by CaptureProperty . Returns Type Description Double The value of the specified property. | Improve this Doc View Source GrabFrame() Grabs a frame from a camera or file. The grabbed frame is stored internally and can be retrieved by calling RetrieveFrame(Int32) . Declaration public bool GrabFrame() Returns Type Description Boolean A value indicating whether a new frame was grabbed. | Improve this Doc View Source QueryFrame() Grabs and returns a frame from a camera or file. Declaration public IplImage QueryFrame() Returns Type Description IplImage The reference to the newly captured frame. The returned image should not be released or modified by the user. In the event of an error, the return value may be null . | Improve this Doc View Source ReleaseHandle() Executes the code required to free the native Capture handle. Declaration protected override bool ReleaseHandle() Returns Type Description Boolean true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false . | Improve this Doc View Source RetrieveFrame(Int32) Gets the image grabbed with GrabFrame() . Declaration public IplImage RetrieveFrame(int streamIdx = 0) Parameters Type Name Description Int32 streamIdx The index of the stream from which to retrieve the frame. Returns Type Description IplImage The reference to the newly captured frame. The returned image should not be released or modified by the user. In the event of an error, the return value may be null . | Improve this Doc View Source SetProperty(CaptureProperty, Double) Sets video capture properties. Declaration public void SetProperty(CaptureProperty propertyId, double value) Parameters Type Name Description CaptureProperty propertyId The property identifier as specified by CaptureProperty . Double value The new value of the specified property."
  },
  "api/OpenCV.Net.CaptureDomain.html": {
    "href": "api/OpenCV.Net.CaptureDomain.html",
    "title": "Enum CaptureDomain",
    "keywords": "Enum CaptureDomain Specifies the available camera or video capture domains. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum CaptureDomain : int Fields Name Description Android Specifies the Android capture domain. AndroidBack Specifies the Android back camera capture domain. AndroidFront Specifies the Android front camera capture domain. Any Specifies that the domain will be automatically detected. AVFoundation Specifies the AVFoundation framework for iOS capture domain (OS X Lion will have the same API). Cmu1394 Specifies the IEEE 1394 capture driver domain. DC1394 Specifies the IEEE 1394 capture driver domain. DirectShow Specifies the DirectShow (via videoInput) capture domain. Fireware Specifies the IEEE 1394 capture driver domain. Firewire Specifies the IEEE 1394 capture driver domain. Giganetix Specifies the Smartek Giganetix GigEVision SDK capture domain. Ieee1394 Specifies the IEEE 1394 capture driver domain. IntelPerc Specifies the Intel Perceptual Computing SDK capture domain. Mil Specifies the MIL proprietary driver domain. Msmf Specifies the Microsoft Media Foundation (via videoInput) capture domain. OpenNI Specifies the OpenNI (for Kinect) capture domain. OpenNIAsus Specifies the OpenNI (for Asus Xtion) capture domain. PvAPI Specifies the PvAPI, Prosilica GigE SDK capture domain. QuickTime Specifies the Quicktime capture domain. Stereo Specifies the TYZX proprietary driver domain. Tyzx Specifies the TYZX proprietary driver domain. TyzxColor Specifies the TYZX proprietary driver's color source. TyzxLeft Specifies the TYZX proprietary driver's left source. TyzxRight Specifies the TYZX proprietary driver's right source. TyzxZ Specifies the TYZX proprietary driver's depth source. Unicap Specifies the Unicap driver domain. V4L Specifies the native platform specific video capture domain. V4L2 Specifies the native platform specific video capture domain. Vfw Specifies the native platform specific video capture domain. XIApi Specifies the XIMEA Camera API domain."
  },
  "api/OpenCV.Net.CaptureProperty.html": {
    "href": "api/OpenCV.Net.CaptureProperty.html",
    "title": "Enum CaptureProperty",
    "keywords": "Enum CaptureProperty Specifies the available properties of a camera or video file. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum CaptureProperty : int Fields Name Description AndroidAntibanding Specifies the camera antibanding mode (Android cameras only). AndroidFlashMode Specifies the camera flash mode (Android cameras only). AndroidFocalLength Specifies the camera focal length (Android cameras only). AndroidFocusDistanceFar Specifies the camera far focus distance (Android cameras only). AndroidFocusDistanceNear Specifies the camera near focus distance (Android cameras only). AndroidFocusDistanceOptimal Specifies the camera optimal focus distance (Android cameras only). AndroidFocusMode Specifies the camera focus mode (Android cameras only). AndroidWhiteBalance Specifies the camera white balance mode (Android cameras only). AutoExposure Specifies a value indicating whether auto exposure is enabled. Autograb Specifies a value indicating whether auto-grab is enabled (Android cameras only). Backlight Specifies the camera's backlight compensation setting. Brightness Specifies the brightness of the image (only for cameras). Contrast Specifies the contrast of the image (only for cameras). ConvertRgb Specifies a value indicating whether images should be converted to RGB. DC1394ModeAuto Specifies the auto mode for the controlling register. DC1394ModeManual Specifies the manual mode for the controlling register. Set automatically when a value of the feature is set by the user. DC1394ModeOnePushAuto Specifies the auto single push mode for the controlling register. DC1394Off Turn the feature off (not controlled manually nor automatically). Exposure Specifies the exposure (only for cameras). Focus Specifies the camera's focus setting. Format Specifies the format of the IplImage objects returned by RetrieveFrame(Int32) . FourCC Specifies the 4-character code of codec. Fps Specifies the frame rate. FrameCount Specifies the number of frames in the video file. FrameHeight Specifies the height of the frames in the video stream. FrameWidth Specifies the width of the frames in the video stream. Gain Specifies the gain of the image (only for cameras). Gamma Specifies the gamma correction of the image (only for cameras). GigaFrameHeightMax Specifies the maximum frame height (Smartek Giganetix Ethernet vision interface only). GigaFrameOffsetX Specifies the horizontal offset of the image frame (Smartek Giganetix Ethernet vision interface only). GigaFrameOffsetY Specifies the vertical offset of the image frame (Smartek Giganetix Ethernet vision interface only). GigaFrameSensorHeight Specifies the sensor height (Smartek Giganetix Ethernet vision interface only). GigaFrameSensorWidth Specifies the sensor width (Smartek Giganetix Ethernet vision interface only). GigaFrameWidthMax Specifies the maximum frame width (Smartek Giganetix Ethernet vision interface only). GStreamerQueueLength Specifies the queue length of cameras acquired through the GStreamer interface. Guid Specifies the camera's device GUID. Hue Specifies the hue of the image (only for cameras). IntelPercDepthConfidenceThreshold Specifies the confidence threshold of the depth sensor (Intel Perceptual Computing interface only). IntelPercDepthFocalLengthHorizontal Specifies the horizontal focal length of the depth sensor (Intel Perceptual Computing interface only). IntelPercDepthFocalLengthVertical Specifies the vertical focal length of the depth sensor (Intel Perceptual Computing interface only). IntelPercDepthGenerator Specifies a flag for getting/setting properties of the Intel Perceptual SDK sensor depth generator. IntelPercDepthLowConfidenceValue Specifies the low confidence value of the depth sensor (Intel Perceptual Computing interface only). IntelPercDepthSaturationValue Specifies the saturation value of the depth sensor (Intel Perceptual Computing interface only). IntelPercGeneratorsMask Specifies a combination of IntelPercDepthGenerator and IntelPercImageGenerator . IntelPercImageGenerator Specifies a flag for getting/setting properties of the Intel Perceptual SDK sensor image generator. IntelPercProfileCount Specifies the number of profiles (Intel Perceptual Computing interface only). IntelPercProfileIndex Specifies the profile index (Intel Perceptual Computing interface only). IosDeviceExposure Specifies the device exposure (AV Foundation cameras only). IosDeviceFlash Specifies the device flash state (AV Foundation cameras only). IosDeviceFocus Specifies the device focus (AV Foundation cameras only). IosDeviceTorch Specifies whether the device has a torch (AV Foundation cameras only). IosDeviceWhitebalance Specifies the device white balance (AV Foundation cameras only). Iris Specifies the camera's iris setting. IsoSpeed Specifies the ISO speed of the camera. MaxDC1394 Specifies a value that indicates the end of DC1394 backend properties (internal use only). Mode Specifies a backend-specific value indicating the current capture mode. Monocrome Specifies a value indicating whether images are captured in grayscale. OpenNIApproxFrameSync Specifies whether the depth generator should be approximately synchronized with the image generator. OpenNIBaseline Specifies the baseline sensor value, in mm. OpenNICircleBuffer Specifies whether the synchronization buffer is circular. OpenNIDepthGenerator Specifies a flag for getting/setting properties of the OpenNI sensor depth generator. OpenNIDepthGeneratorBaseline Specifies the depth sensor baseline value, in mm. OpenNIDepthGeneratorFocalLength Specifies the depth sensor focal length in pixels. OpenNIDepthGeneratorRegistration Specifies a flag that registers the remapping depth map to image map by changing the depth generator’s view point. OpenNIDepthGeneratorRegistrationOn Specifies that the OpenNIDepthGeneratorRegistration flag is \"on\". OpenNIFocalLength Specifies the sensor focal length in pixels. OpenNIFrameMaxDepth Specifies the maximum supported depth of the OpenNI sensor, in mm. OpenNIGeneratorPresent Specifies a flag that is used to check whether a given OpenNI generator is present. OpenNIGeneratorsMask Specifies a combination of OpenNIDepthGenerator and OpenNIImageGenerator . OpenNIImageGenerator Specifies a flag for getting/setting properties of the OpenNI sensor image generator. OpenNIImageGeneratorOutputMode Specifies the output mode of the OpenNI image generator. OpenNIImageGeneratorPresent Specifies whether an image generator is present. OpenNIMaxBufferSize Specifies the maximum buffer size for generator synchronization. OpenNIMaxTimeDuration Specifies the maximum time difference to consider depth and image frame to be in sync. OpenNIOutputMode Specifies the output mode of the OpenNI generator. OpenNIRegistration Specifies a flag that registers the remapping depth map to image map by changing the generator’s view point. OpenNIRegistrationOn Specifies that the OpenNIRegistration flag is \"on\". Pan Specifies the camera's pan setting, in degrees. PosAviRatio Specifies the relative position of the video file (0 - start of the film, 1 - end of the film). PosFrames Specifies the 0-based index of the frame to be decoded/captured next. PosMsec Specifies the movie current position in milliseconds or video capture timestamp. PreviewFormat Specifies the supported preview format. Returns a pointer to a native string (Android cameras only). PVApiMulticastIP Specifies the IP address to enable multicast master mode. A zero address disables multicast (GStreamer interface cameras only). Rectification Specifies a rectification flag for stereo cameras. Roll Specifies the camera's roll setting, in degrees. Saturation Specifies the saturation of the image (only for cameras). Settings Specifies a value indicating whether the camera's driver configuration dialog is displayed. Sharpness Specifies the sharpness of the image (only for cameras). SupportedPreviewSizesString Specifies the supported preview sizes. Returns a pointer to a native string (Android cameras only). Temperature Specifies the current temperature in the camera sensor. Tilt Specifies the camera's tilt setting, in degrees. Trigger Specifies the current trigger mode (only for cameras). TriggerDelay Specifies the trigger delay (only for cameras). WhiteBalanceBlueU Specifies the white balance blue to green ratio (only for cameras). WhiteBalanceRedV Specifies the white balance red to green ratio (only for cameras). XIAeag Specifies automatic exposure and gain (XIMEA SDK only). XIAeagLevel Specifies the average intensity of the output signal that AEAG should achieve, in percentage (XIMEA SDK only). XIAeMaxLimit Specifies the maximum limit of exposure in AEAG procedure (XIMEA SDK only). XIAgMaxLimit Specifies the maximum limit of gain in AEAG procedure (XIMEA SDK only). XIAutoWb Specifies automatic white balance calculation (XIMEA SDK only). XIDataFormat Specifies the output data format (XIMEA SDK only). XIDownsampling Specifies whether to change image resolution by binning or skipping (XIMEA SDK only). XIExpPriority Specifies exposure priority relative to gain (XIMEA SDK only). XIGpiLevel Specifies the general purpose input level (XIMEA SDK only). XIGpiMode Specifies the general purpose input mode (XIMEA SDK only). XIGpiSelector Specifies the general purpose input (XIMEA SDK only). XIGpoMode Specifies the general purpose output mode (XIMEA SDK only). XIGpoSelector Specifies the general purpose output (XIMEA SDK only). XILedMode Specifies the functionality of the camera signalling LED (XIMEA SDK only). XILedSelector Specifies the camera signalling LED (XIMEA SDK only). XIManualWb Specifies whether to calculate white balance. Must be called during acquisition (XIMEA SDK only). XIOffsetX Specifies the horizontal offset from the origin to the area of interest, in pixels (XIMEA SDK only). XIOffsetY Specifies the vertical offset from the origin to the area of interest, in pixels (XIMEA SDK only). XITimeout Specifies the image capture timeout in milliseconds (XIMEA SDK only). XITrgSoftware Specifies whether to generate an internal trigger (XIMEA SDK only). XITrgSource Specifies the trigger source (XIMEA SDK only). Zoom Specifies the camera's zoom setting."
  },
  "api/OpenCV.Net.Chain.html": {
    "href": "api/OpenCV.Net.Chain.html",
    "title": "Class Chain",
    "keywords": "Class Chain Represents a Freeman chain where a polygon is specified as a sequence of steps in one of eight directions from a point origin. Inheritance Object CVHandle Seq Chain Inherited Members Seq.Storage Seq.Kind Seq.ElementSize Seq.Count Seq.HPrev Seq.HNext Seq.VPrev Seq.VNext Seq.SetBlockSize(Int32) Seq.Push() Seq.Push<TElement>(TElement[]) Seq.PushFront() Seq.PushFront<TElement>(TElement[]) Seq.Pop() Seq.Pop<TElement>(TElement) Seq.Pop<TElement>(TElement[]) Seq.PopFront() Seq.PopFront<TElement>(TElement) Seq.PopFront<TElement>(TElement[]) Seq.Insert<TElement>(Int32, TElement) Seq.Insert(Int32, Seq) Seq.Insert(Int32, Arr) Seq.Remove(Int32) Seq.Remove(SeqSlice) Seq.Clear() Seq.GetElement(Int32) Seq.GetElementIndex(IntPtr) Seq.CopyTo<TElement>(TElement[]) Seq.CopyTo<TElement>(TElement[], SeqSlice) Seq.ToArray<TElement>() Seq.Slice(SeqSlice, MemStorage, Boolean) Seq.Clone(MemStorage) Seq.Sort<TElement>(Comparison<TElement>) Seq.Search<TElement>(TElement, Comparison<TElement>, Boolean) Seq.Invert() Seq.Partition<TElement>(MemStorage, Seq, Func<TElement, TElement, Boolean>) Seq.ReleaseHandle() Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public class Chain : Seq Properties | Improve this Doc View Source HeaderSize Gets the size of the Chain header, in bytes. Declaration public static int HeaderSize { get; } Property Value Type Description Int32 | Improve this Doc View Source Origin Gets the origin of the Freeman chain. Declaration public Point Origin { get; } Property Value Type Description Point Methods | Improve this Doc View Source FromSeq(Seq) Initializes a new Chain instance from a compatible Seq . Declaration public static Chain FromSeq(Seq seq) Parameters Type Name Description Seq seq A Seq instance representing a Freeman chain. Returns Type Description Chain A new Chain header for the specified seq . | Improve this Doc View Source ReadChainPoints() Translates in sequence all of the points in the Freeman chain code. Declaration public IEnumerable<Point> ReadChainPoints() Returns Type Description IEnumerable < Point > An whose elements are the result of translating the Freeman chain code into points."
  },
  "api/OpenCV.Net.CheckArrayFlags.html": {
    "href": "api/OpenCV.Net.CheckArrayFlags.html",
    "title": "Enum CheckArrayFlags",
    "keywords": "Enum CheckArrayFlags Specifies operation flags for CheckRange(CheckArrayFlags, Double, Double) . Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum CheckArrayFlags : int Fields Name Description CheckNanInfinity Specifies that the method should check that every element is neither NaN nor Infinity. CheckQuiet Specifies whether the method should raise an error if an element is invalid or out of range. CheckRange Specifies that the method should check that every element is within a specified range."
  },
  "api/OpenCV.Net.ChessboardCalibrationFlags.html": {
    "href": "api/OpenCV.Net.ChessboardCalibrationFlags.html",
    "title": "Enum ChessboardCalibrationFlags",
    "keywords": "Enum ChessboardCalibrationFlags Specifies available operation flags for finding chessboard corners. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum ChessboardCalibrationFlags : int Fields Name Description AdaptiveThreshold Specifies that adaptive thresholding should be used to convert the image to black and white, rather than a fixed threshold level (computed from the average image brightness). FastCheck Specifies that a fast check should be run on the image that looks for chessboard corners, and shortcuts the call if none is found. This can drastically speed up the call in the degenerate condition when no chessboard is observed. FilterQuads Specifies that additional criteria (like contour area, perimeter, square-like shape) should be used to filter out false quads extracted at the contour retrieval stage. None Specifies that no operation flags are active. NormalizeImage Specifies the image gamma should be normalized with EqualizeHist(Arr, Arr) before applying fixed or adaptive thresholding."
  },
  "api/OpenCV.Net.ColorConversion.html": {
    "href": "api/OpenCV.Net.ColorConversion.html",
    "title": "Enum ColorConversion",
    "keywords": "Enum ColorConversion Specifies the color space conversion used by CvtColor(Arr, Arr, ColorConversion) . Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum ColorConversion : int Fields Name Description BayerBG2Bgr Specifies a conversion from the Bayer \"BG\" color space to BGR. BayerBG2BgrVng Specifies a conversion from the Bayer \"BG\" color space to BGR using the VNG demosaicing algorithm. BayerBG2Gray Specifies a conversion from the Bayer \"BG\" color space to grayscale. BayerBG2Rgb Specifies a conversion from the Bayer \"BG\" color space to RGB. BayerBG2RgbVng Specifies a conversion from the Bayer \"BG\" color space to RGB using the VNG demosaicing algorithm. BayerGB2Bgr Specifies a conversion from the Bayer \"GB\" color space to BGR. BayerGB2BgrVng Specifies a conversion from the Bayer \"GB\" color space to BGR using the VNG demosaicing algorithm. BayerGB2Gray Specifies a conversion from the Bayer \"GB\" color space to grayscale. BayerGB2Rgb Specifies a conversion from the Bayer \"GB\" color space to RGB. BayerGB2RgbVng Specifies a conversion from the Bayer \"GB\" color space to RGB using the VNG demosaicing algorithm. BayerGR2Bgr Specifies a conversion from the Bayer \"GR\" color space to BGR. BayerGR2BgrVng Specifies a conversion from the Bayer \"GR\" color space to BGR using the VNG demosaicing algorithm. BayerGR2Gray Specifies a conversion from the Bayer \"GR\" color space to grayscale. BayerGR2Rgb Specifies a conversion from the Bayer \"GR\" color space to RGB. BayerGR2RgbVng Specifies a conversion from the Bayer \"GR\" color space to RGB using the VNG demosaicing algorithm. BayerRG2Bgr Specifies a conversion from the Bayer \"RG\" color space to BGR. BayerRG2BgrVng Specifies a conversion from the Bayer \"RG\" color space to BGR using the VNG demosaicing algorithm. BayerRG2Gray Specifies a conversion from the Bayer \"RG\" color space to grayscale. BayerRG2Rgb Specifies a conversion from the Bayer \"RG\" color space to RGB. BayerRG2RgbVng Specifies a conversion from the Bayer \"RG\" color space to RGB using the VNG demosaicing algorithm. Bgr2Bgr555 Specifies a conversion from the BGR color space to 16-bit BGR555. Bgr2Bgr565 Specifies a conversion from the BGR color space to 16-bit BGR565. Bgr2Bgra Specifies a conversion from the BGR color space to BGRA. Bgr2Gray Specifies a conversion from the BGR color space to grayscale. Bgr2Hls Specifies a conversion from the BGR color space to HLS. Bgr2HlsFull Specifies a conversion from the BGR color space to HLS using the full 8-bit range for H ([0,255]). Bgr2Hsv Specifies a conversion from the BGR color space to HSV. Bgr2HsvFull Specifies a conversion from the BGR color space to HSV using the full 8-bit range for H ([0,255]). Bgr2Lab Specifies a conversion from the BGR color space to CIE L a b*. Bgr2Luv Specifies a conversion from the BGR color space to CIE L u v*. Bgr2Rgb Specifies a conversion from the BGR color space to RGB. Bgr2Rgba Specifies a conversion from the BGR color space to RGBA. Bgr2Xyz Specifies a conversion from the BGR color space to CIE XYZ Rec. 709. Bgr2YCrCb Specifies a conversion from the BGR color space to YCrCb. Bgr2Yuv Specifies a conversion from the BGR color space to YUV. Bgr5552Bgr Specifies a conversion from the 16-bit BGR555 color space to BGR. Bgr5552Bgra Specifies a conversion from the 16-bit BGR555 color space to BGRA. Bgr5552Gray Specifies a conversion from the 16-bit BGR555 color space to grayscale. Bgr5552Rgb Specifies a conversion from the 16-bit BGR555 color space to RGB. Bgr5552Rgba Specifies a conversion from the 16-bit BGR555 color space to RGBA. Bgr5652Bgr Specifies a conversion from the 16-bit BGR565 color space to BGR. Bgr5652Bgra Specifies a conversion from the 16-bit BGR565 color space to BGRA. Bgr5652Gray Specifies a conversion from the 16-bit BGR565 color space to grayscale. Bgr5652Rgb Specifies a conversion from the 16-bit BGR565 color space to RGB. Bgr5652Rgba Specifies a conversion from the 16-bit BGR565 color space to RGBA. Bgra2Bgr Specifies a conversion from the BGRA color space to BGR. Bgra2Bgr555 Specifies a conversion from the BGRA color space to 16-bit BGR555. Bgra2Bgr565 Specifies a conversion from the BGRA color space to 16-bit BGR565. Bgra2Gray Specifies a conversion from the BGRA color space to grayscale. Bgra2Rgb Specifies a conversion from the BGRA color space to RGB. Bgra2Rgba Specifies a conversion from the BGRA color space to RGBA. Gray2Bgr Specifies a conversion from grayscale to the BGR color space. Gray2Bgr555 Specifies a conversion from grayscale to the 16-bit BGR555 color space. Gray2Bgr565 Specifies a conversion from grayscale to the 16-bit BGR565 color space. Gray2Bgra Specifies a conversion from grayscale to the BGRA color space. Gray2Rgb Specifies a conversion from grayscale to the RGB color space. Gray2Rgba Specifies a conversion from grayscale to the RGBA color space. Hls2Bgr Specifies a conversion from the HLS color space to BGR. Hls2BgrFull Specifies a conversion from the HLS color space to BGR using the full 8-bit range for H ([0,255]). Hls2Rgb Specifies a conversion from the HLS color space to RGB. Hls2RgbFull Specifies a conversion from the HLS color space to RGB using the full 8-bit range for H ([0,255]). Hsv2Bgr Specifies a conversion from the HSV color space to BGR. Hsv2BgrFull Specifies a conversion from the HSV color space to BGR using the full 8-bit range for H ([0,255]). Hsv2Rgb Specifies a conversion from the HSV color space to RGB. Hsv2RgbFull Specifies a conversion from the HSV color space to RGB using the full 8-bit range for H ([0,255]). Lab2Bgr Specifies a conversion from the CIE L a b* color space to BGR. Lab2LBgr Specifies a conversion from the CIE L a b* color space to Luminance BGR. Lab2LRgb Specifies a conversion from the CIE L a b* color space to Luminance RGB. Lab2Rgb Specifies a conversion from the CIE L a b* color space to RGB. LBgr2Lab Specifies a conversion from the Luminance BGR color space to CIE L a b*. LBgr2Luv Specifies a conversion from the Luminance BGR color space to CIE L u v*. LRgb2Lab Specifies a conversion from the Luminance RGB color space to CIE L a b*. LRgb2Luv Specifies a conversion from the Luminance RGB color space to CIE L u v*. Luv2Bgr Specifies a conversion from the CIE L u v* color space to BGR. Luv2LBgr Specifies a conversion from the CIE L u v* color space to Luminance BGR. Luv2LRgb Specifies a conversion from the CIE L u v* color space to Luminance RGB. Luv2Rgb Specifies a conversion from the CIE L u v* color space to RGB. mRgba2Rgba Specifies a conversion from premultiplied alpha RGB color space to non-premultiplied RGBA. Rgb2Bgr Specifies a conversion from the RGB color space to BGR. Rgb2Bgr555 Specifies a conversion from the RGB color space to 16-bit BGR555. Rgb2Bgr565 Specifies a conversion from the RGB color space to 16-bit BGR565. Rgb2Bgra Specifies a conversion from the RGB color space to BGRA. Rgb2Gray Specifies a conversion from the RGB color space to grayscale. Rgb2Hls Specifies a conversion from the RGB color space to HLS. Rgb2HlsFull Specifies a conversion from the RGB color space to HLS using the full 8-bit range for H ([0,255]). Rgb2Hsv Specifies a conversion from the RGB color space to HSV. Rgb2HsvFull Specifies a conversion from the RGB color space to HSV using the full 8-bit range for H ([0,255]). Rgb2Lab Specifies a conversion from the RGB color space to CIE L a b*. Rgb2Luv Specifies a conversion from the RGB color space to CIE L u v*. Rgb2Rgba Specifies a conversion from the RGB color space to RGBA. Rgb2Xyz Specifies a conversion from the RGB color space to CIE XYZ Rec. 709. Rgb2YCrCb Specifies a conversion from the RGB color space to YCrCb. Rgb2Yuv Specifies a conversion from the RGB color space to YUV. Rgba2Bgr Specifies a conversion from the RGBA color space to BGR. Rgba2Bgr555 Specifies a conversion from the RGBA color space to 16-bit BGR555. Rgba2Bgr565 Specifies a conversion from the RGBA color space to 16-bit BGR565. Rgba2Bgra Specifies a conversion from the RGBA color space to BGRA. Rgba2Gray Specifies a conversion from the RGBA color space to grayscale. Rgba2mRgba Specifies a conversion from non-premultiplied RGBA color space to premultiplied alpha RGB. Rgba2Rgb Specifies a conversion from the RGBA color space to RGB. Xyz2Bgr Specifies a conversion from the CIE XYZ Rec. 709 color space to BGR. Xyz2Rgb Specifies a conversion from the CIE XYZ Rec. 709 color space to RGB. YCrCb2Bgr Specifies a conversion from the YCrCb color space to BGR. YCrCb2Rgb Specifies a conversion from the YCrCb color space to RGB. Yuv2Bgr Specifies a conversion from the YUV color space to BGR. Yuv2BgraI420 Specifies a conversion from the YUV color space to BGRA where the 8-bit Y plane is followed by two 8-bit 2x2 subsampled U and V planes. Yuv2BgraIYuv Specifies a conversion from the YUV color space to BGRA where the 8-bit Y plane is followed by two 8-bit 2x2 subsampled U and V planes. Yuv2BgraNV12 Specifies a conversion from the YUV color space to BGRA with interleaved U/V plane with 2x2 subsampling. Yuv2BgraNV21 Specifies a conversion from the YUV color space to BGRA with U/V reversed in the interleaved plane with 2x2 subsampling. Yuv2BgraUynv Specifies a conversion from the YUV color space to BGRA with two luminance samples for each chroma period in the pattern UYVY. Yuv2BgraUyvy Specifies a conversion from the YUV color space to BGRA with two luminance samples for each chroma period in the pattern UYVY. Yuv2BgraY422 Specifies a conversion from the YUV 422 color space to BGRA. Yuv2BgraYunv Specifies a conversion from the YUV color space to BGRA with two luminance samples for each chroma period in the pattern YUYV. Yuv2BgraYuy2 Specifies a conversion from the YUV color space to BGRA with two luminance samples for each chroma period in the pattern YUYV. Yuv2BgraYuyv Specifies a conversion from the YUV color space to BGRA with two luminance samples for each chroma period in the pattern YUYV. Yuv2BgraYV12 Specifies a conversion from the YUV color space to BGRA where the 8-bit Y plane is followed by two 8-bit 2x2 subsampled V and U planes. Yuv2BgraYvyu Specifies a conversion from the YUV color space to BGRA with two luminance samples for each chroma period in the pattern YVYU. Yuv2BgrI420 Specifies a conversion from the YUV color space to BGR where the 8-bit Y plane is followed by two 8-bit 2x2 subsampled U and V planes. Yuv2BgrIYuv Specifies a conversion from the YUV color space to BGR where the 8-bit Y plane is followed by two 8-bit 2x2 subsampled U and V planes. Yuv2BgrNV12 Specifies a conversion from the YUV color space to BGR with interleaved U/V plane with 2x2 subsampling. Yuv2BgrNV21 Specifies a conversion from the YUV color space to BGR with U/V reversed in the interleaved plane with 2x2 subsampling. Yuv2BgrUynv Specifies a conversion from the YUV color space to BGR with two luminance samples for each chroma period in the pattern UYVY. Yuv2BgrUyvy Specifies a conversion from the YUV color space to BGR with two luminance samples for each chroma period in the pattern UYVY. Yuv2BgrY422 Specifies a conversion from the YUV 422 color space to BGR. Yuv2BgrYunv Specifies a conversion from the YUV color space to BGR with two luminance samples for each chroma period in the pattern YUYV. Yuv2BgrYuy2 Specifies a conversion from the YUV color space to BGR with two luminance samples for each chroma period in the pattern YUYV. Yuv2BgrYuyv Specifies a conversion from the YUV color space to BGR with two luminance samples for each chroma period in the pattern YUYV. Yuv2BgrYV12 Specifies a conversion from the YUV color space to BGR where the 8-bit Y plane is followed by two 8-bit 2x2 subsampled V and U planes. Yuv2BgrYvyu Specifies a conversion from the YUV color space to BGR with two luminance samples for each chroma period in the pattern YVYU. Yuv2Gray420 Specifies a conversion from the YUV 420 color space to grayscale. Yuv2GrayI420 Specifies a conversion from the YUV 420 color space to grayscale. Yuv2GrayIYuv Specifies a conversion from the YUV 420 color space to grayscale. Yuv2GrayNV12 Specifies a conversion from the YUV 420 color space to grayscale. Yuv2GrayNV21 Specifies a conversion from the YUV 420 color space to grayscale. Yuv2GrayUynv Specifies a conversion from the YUV color space to grayscale with two luminance samples for each chroma period in the pattern UYVY. Yuv2GrayUyvy Specifies a conversion from the YUV color space to grayscale with two luminance samples for each chroma period in the pattern UYVY. Yuv2GrayY422 Specifies a conversion from the YUV 422 color space to grayscale. Yuv2GrayYunv Specifies a conversion from the YUV color space to grayscale with two luminance samples for each chroma period in the pattern YUYV. Yuv2GrayYuy2 Specifies a conversion from the YUV color space to grayscale with two luminance samples for each chroma period in the pattern YUYV. Yuv2GrayYuyv Specifies a conversion from the YUV color space to grayscale with two luminance samples for each chroma period in the pattern YUYV. Yuv2GrayYV12 Specifies a conversion from the YUV 420 color space to grayscale. Yuv2GrayYvyu Specifies a conversion from the YUV color space to grayscale with two luminance samples for each chroma period in the pattern YVYU. Yuv2Rgb Specifies a conversion from the YUV color space to RGB. Yuv2RgbaI420 Specifies a conversion from the YUV color space to RGBA where the 8-bit Y plane is followed by two 8-bit 2x2 subsampled U and V planes. Yuv2RgbaIYuv Specifies a conversion from the YUV color space to RGBA where the 8-bit Y plane is followed by two 8-bit 2x2 subsampled U and V planes. Yuv2RgbaNV12 Specifies a conversion from the YUV color space to RGBA with interleaved U/V plane with 2x2 subsampling. Yuv2RgbaNV21 Specifies a conversion from the YUV color space to RGBA with U/V reversed in the interleaved plane with 2x2 subsampling. Yuv2RgbaUynv Specifies a conversion from the YUV color space to RGBA with two luminance samples for each chroma period in the pattern UYVY. Yuv2RgbaUyvy Specifies a conversion from the YUV color space to RGBA with two luminance samples for each chroma period in the pattern UYVY. Yuv2RgbaY422 Specifies a conversion from the YUV 422 color space to RGBA. Yuv2RgbaYunv Specifies a conversion from the YUV color space to RGBA with two luminance samples for each chroma period in the pattern YUYV. Yuv2RgbaYuy2 Specifies a conversion from the YUV color space to RGBA with two luminance samples for each chroma period in the pattern YUYV. Yuv2RgbaYuyv Specifies a conversion from the YUV color space to RGBA with two luminance samples for each chroma period in the pattern YUYV. Yuv2RgbaYV12 Specifies a conversion from the YUV color space to RGBA where the 8-bit Y plane is followed by two 8-bit 2x2 subsampled V and U planes. Yuv2RgbaYvyu Specifies a conversion from the YUV color space to RGBA with two luminance samples for each chroma period in the pattern YVYU. Yuv2RgbI420 Specifies a conversion from the YUV color space to RGB where the 8-bit Y plane is followed by two 8-bit 2x2 subsampled U and V planes. Yuv2RgbIYuv Specifies a conversion from the YUV color space to RGB where the 8-bit Y plane is followed by two 8-bit 2x2 subsampled U and V planes. Yuv2RgbNV12 Specifies a conversion from the YUV color space to RGB with interleaved U/V plane with 2x2 subsampling. Yuv2RgbNV21 Specifies a conversion from the YUV color space to RGB with U/V reversed in the interleaved plane with 2x2 subsampling. Yuv2RgbUynv Specifies a conversion from the YUV color space to RGB with two luminance samples for each chroma period in the pattern UYVY. Yuv2RgbUyvy Specifies a conversion from the YUV color space to RGB with two luminance samples for each chroma period in the pattern UYVY. Yuv2RgbY422 Specifies a conversion from the YUV 422 color space to RGB. Yuv2RgbYunv Specifies a conversion from the YUV color space to RGB with two luminance samples for each chroma period in the pattern YUYV. Yuv2RgbYuy2 Specifies a conversion from the YUV color space to RGB with two luminance samples for each chroma period in the pattern YUYV. Yuv2RgbYuyv Specifies a conversion from the YUV color space to RGB with two luminance samples for each chroma period in the pattern YUYV. Yuv2RgbYV12 Specifies a conversion from the YUV color space to RGB where the 8-bit Y plane is followed by two 8-bit 2x2 subsampled V and U planes. Yuv2RgbYvyu Specifies a conversion from the YUV color space to RGB with two luminance samples for each chroma period in the pattern YVYU. Yuv420p2Bgr Specifies a conversion from the YUV 420 planar color space to BGR. Same as Yuv2BgrYV12 . Yuv420p2Bgra Specifies a conversion from the YUV 420 planar color space to BGRA. Same as Yuv2BgraYV12 . Yuv420p2Gray Specifies a conversion from the YUV 420 color space to grayscale. Yuv420p2Rgb Specifies a conversion from the YUV 420 planar color space to RGB. Same as Yuv2RgbYV12 . Yuv420p2Rgba Specifies a conversion from the YUV 420 planar color space to RGBA. Same as Yuv2RgbaYV12 . Yuv420sp2Bgr Specifies a conversion from the YUV 420 semi-planar color space to BGR. Same as Yuv2BgrNV21 . Yuv420sp2Bgra Specifies a conversion from the YUV 420 semi-planar color space to BGRA. Same as Yuv2BgraNV21 . Yuv420sp2Gray Specifies a conversion from the YUV 420 color space to grayscale. Yuv420sp2Rgb Specifies a conversion from the YUV 420 semi-planar color space to RGB. Same as Yuv2RgbNV21 . Yuv420sp2Rgba Specifies a conversion from the YUV 420 semi-planar color space to RGBA. Same as Yuv2RgbaNV21 ."
  },
  "api/OpenCV.Net.ComparisonOperation.html": {
    "href": "api/OpenCV.Net.ComparisonOperation.html",
    "title": "Enum ComparisonOperation",
    "keywords": "Enum ComparisonOperation Specifies the comparison operation used to test the relation between individual array elements in Cmp(Arr, Arr, Arr, ComparisonOperation) and CmpS(Arr, Double, Arr, ComparisonOperation) . Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum ComparisonOperation : int Fields Name Description Equal Specifies that the comparison should check whether the two elements are equal. GreaterOrEqual Specifies that the comparison should check whether the first element is greater than or equal to the second element. GreaterThan Specifies that the comparison should check whether the first element is greater than the second element. LessOrEqual Specifies that the comparison should check whether the first element is less than or equal to the second element. LessThan Specifies that the comparison should check whether the first element is less than the second element. NotEqual Specifies that the comparison should check whether the two elements are not equal."
  },
  "api/OpenCV.Net.CompressionParameters.html": {
    "href": "api/OpenCV.Net.CompressionParameters.html",
    "title": "Class CompressionParameters",
    "keywords": "Class CompressionParameters Specifies the available image compression parameters. Inheritance Object CompressionParameters Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public static class CompressionParameters : object Fields | Improve this Doc View Source JpegQuality Specifies the quality of image JPEG compression from 0 to 100 (the higher the better). Default value is 95. Declaration public const int JpegQuality = null Field Value Type Description Int32 | Improve this Doc View Source PngBiLevel Specifies whether PNG compression should use bi-level (binary) images. Declaration public const int PngBiLevel = null Field Value Type Description Int32 | Improve this Doc View Source PngCompression Specifies the PNG compression level from 0 to 9. A higher value means a smaller size and longer compression time. Default value is 3. Declaration public const int PngCompression = null Field Value Type Description Int32 | Improve this Doc View Source PngStrategy Specifies the PNG compression strategy. Declaration public const int PngStrategy = null Field Value Type Description Int32 | Improve this Doc View Source PngStrategyDefault Specifies a default PNG compression strategy. Declaration public const int PngStrategyDefault = null Field Value Type Description Int32 | Improve this Doc View Source PngStrategyFiltered Specifies a filtered PNG compression strategy. Declaration public const int PngStrategyFiltered = null Field Value Type Description Int32 | Improve this Doc View Source PngStrategyFixed Specifies a fixed PNG compression strategy. Declaration public const int PngStrategyFixed = null Field Value Type Description Int32 | Improve this Doc View Source PngStrategyHuffmanOnly Specifies a huffman code based PNG compression strategy. Declaration public const int PngStrategyHuffmanOnly = null Field Value Type Description Int32 | Improve this Doc View Source PngStrategyRle Specifies a run-length encoding PNG compression strategy. Declaration public const int PngStrategyRle = null Field Value Type Description Int32 | Improve this Doc View Source PxmBinary Specifies a binary format flag for PPM, PGM or PBM. Default value is 1. Declaration public const int PxmBinary = null Field Value Type Description Int32"
  },
  "api/OpenCV.Net.ConnectedComp.html": {
    "href": "api/OpenCV.Net.ConnectedComp.html",
    "title": "Struct ConnectedComp",
    "keywords": "Struct ConnectedComp Represents a connected component. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public struct ConnectedComp Fields | Improve this Doc View Source Area The area of the segmented component. Declaration public double Area Field Value Type Description Double | Improve this Doc View Source Contour The optional component boundary. Declaration public IntPtr Contour Field Value Type Description IntPtr | Improve this Doc View Source Rect The ROI of the segmented component. Declaration public Rect Rect Field Value Type Description Rect | Improve this Doc View Source Value The average color of the connected component. Declaration public Scalar Value Field Value Type Description Scalar"
  },
  "api/OpenCV.Net.Contour.html": {
    "href": "api/OpenCV.Net.Contour.html",
    "title": "Class Contour",
    "keywords": "Class Contour Represents a polygonal contour. Inheritance Object CVHandle Seq Contour Inherited Members Seq.Storage Seq.Kind Seq.ElementSize Seq.Count Seq.HPrev Seq.HNext Seq.VPrev Seq.VNext Seq.SetBlockSize(Int32) Seq.Push() Seq.Push<TElement>(TElement[]) Seq.PushFront() Seq.PushFront<TElement>(TElement[]) Seq.Pop() Seq.Pop<TElement>(TElement) Seq.Pop<TElement>(TElement[]) Seq.PopFront() Seq.PopFront<TElement>(TElement) Seq.PopFront<TElement>(TElement[]) Seq.Insert<TElement>(Int32, TElement) Seq.Insert(Int32, Seq) Seq.Insert(Int32, Arr) Seq.Remove(Int32) Seq.Remove(SeqSlice) Seq.Clear() Seq.GetElement(Int32) Seq.GetElementIndex(IntPtr) Seq.CopyTo<TElement>(TElement[]) Seq.CopyTo<TElement>(TElement[], SeqSlice) Seq.ToArray<TElement>() Seq.Slice(SeqSlice, MemStorage, Boolean) Seq.Clone(MemStorage) Seq.Sort<TElement>(Comparison<TElement>) Seq.Search<TElement>(TElement, Comparison<TElement>, Boolean) Seq.Invert() Seq.Partition<TElement>(MemStorage, Seq, Func<TElement, TElement, Boolean>) Seq.ReleaseHandle() Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public class Contour : Seq Properties | Improve this Doc View Source HeaderSize Gets the size of the Contour header, in bytes. Declaration public static int HeaderSize { get; } Property Value Type Description Int32 | Improve this Doc View Source Rect Gets the bounding rectangle of the contour. Declaration public Rect Rect { get; } Property Value Type Description Rect Methods | Improve this Doc View Source FromSeq(Seq) Initializes a new Contour instance from a compatible Seq . Declaration public static Contour FromSeq(Seq seq) Parameters Type Name Description Seq seq A Seq instance representing a polygonal contour. Returns Type Description Contour A new Contour header for the specified seq ."
  },
  "api/OpenCV.Net.ContourApproximation.html": {
    "href": "api/OpenCV.Net.ContourApproximation.html",
    "title": "Enum ContourApproximation",
    "keywords": "Enum ContourApproximation Specifies the available contour approximation methods. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum ContourApproximation : int Fields Name Description ChainApproxNone Specifies that all the elements of the chain code should be translated into points. ChainApproxSimple Specifies that all horizontal, vertical, and diagonal segments should be compressed, leaving only their end points. ChainApproxTC89KCos Specifies that Teh-Chin's K cosines chain approximation algorithm should be used. ChainApproxTC89L1 Specifies that Teh-Chin's L1 chain approximation algorithm should be used. ChainCode Specifies that contours should be output in the Freeman chain code. LinkRuns Specifies a completely different contour retrieval algorithm by linking horizontal segments of ones. Only the List retrieval mode can be used with this method."
  },
  "api/OpenCV.Net.ContourRetrieval.html": {
    "href": "api/OpenCV.Net.ContourRetrieval.html",
    "title": "Enum ContourRetrieval",
    "keywords": "Enum ContourRetrieval Specifies the available contour retrieval modes. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum ContourRetrieval : int Fields Name Description ConnectedComponent Specifies that all the contours should be retrieved and organized into a two-level hierarchy: on the top level are the external boundaries of the components, on the second level are the boundaries of the holes. External Specifies that only the extreme outer contours should be retrieved. FloodFill Specifies that all the contours should be retrieved using the flood fill algorithm. List Specifies that all the contours should be retrieved and stored in a list. Tree Specifies that all the contours should be retrieved with the full hierarchy of nested contours."
  },
  "api/OpenCV.Net.ContourScanner.html": {
    "href": "api/OpenCV.Net.ContourScanner.html",
    "title": "Class ContourScanner",
    "keywords": "Class ContourScanner Represents a contour scanning process. Inheritance Object ContourScanner Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public sealed class ContourScanner : SafeHandleZeroOrMinusOneIsInvalid Methods | Improve this Doc View Source EndFindContours() Finishes the scanning process. Declaration public Seq EndFindContours() Returns Type Description Seq The first contour on the highest level. | Improve this Doc View Source FindNextContour() Finds the next contour in the image. Declaration public Seq FindNextContour() Returns Type Description Seq The next contour in the image or null if there are no more contours. | Improve this Doc View Source ReleaseHandle() Executes the code required to free the native ContourScanner handle. Declaration protected override bool ReleaseHandle() Returns Type Description Boolean true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false . | Improve this Doc View Source SubstituteContour(Seq) Replaces the currently retrieved contour. Declaration public void SubstituteContour(Seq newContour) Parameters Type Name Description Seq newContour The substituting contour."
  },
  "api/OpenCV.Net.ConvertImageFlags.html": {
    "href": "api/OpenCV.Net.ConvertImageFlags.html",
    "title": "Enum ConvertImageFlags",
    "keywords": "Enum ConvertImageFlags Specifies operation flags for ConvertImage(Arr, Arr, ConvertImageFlags) . Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum ConvertImageFlags : int Fields Name Description Flip Specifies that the image should be flipped vertically. None Specifies that no flags should be used for this call. SwapRB Specifies that the red and blue channels should be swapped."
  },
  "api/OpenCV.Net.ConvexityDefect.html": {
    "href": "api/OpenCV.Net.ConvexityDefect.html",
    "title": "Struct ConvexityDefect",
    "keywords": "Struct ConvexityDefect Represents a contour convexity defect. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public struct ConvexityDefect Properties | Improve this Doc View Source Depth Gets the distance between the farthest point and the convex hull. Declaration public float Depth { get; } Property Value Type Description Single | Improve this Doc View Source DepthPoint Gets the farthest point from the convex hull within the defect. Declaration public Point DepthPoint { get; } Property Value Type Description Point | Improve this Doc View Source End Gets the point of the contour where the defect ends. Declaration public Point End { get; } Property Value Type Description Point | Improve this Doc View Source Start Gets the point of the contour where the defect begins. Declaration public Point Start { get; } Property Value Type Description Point"
  },
  "api/OpenCV.Net.CovarianceFlags.html": {
    "href": "api/OpenCV.Net.CovarianceFlags.html",
    "title": "Enum CovarianceFlags",
    "keywords": "Enum CovarianceFlags Specifies operation flags for CalcCovarMatrix(Arr[], Arr, Arr, CovarianceFlags) . Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum CovarianceFlags : int Fields Name Description Cols Specifies that all the input vectors are stored as columns of a single matrix. Normal Specifies that a normal covariance matrix with the same linear size as the total number of elements in each input vector should be computed. Rows Specifies that all the input vectors are stored as rows of a single matrix. Scale Specifies that the covariance matrix will be scaled. Scaling will depend on whether Scrambled or Normal flags are set. Scrambled Specifies that the scrambled covariance matrix for fast PCA of a set of very large vectors should be computed. UseAvg Specifies that the method should use the provided average of the input vectors."
  },
  "api/OpenCV.Net.CV.html": {
    "href": "api/OpenCV.Net.CV.html",
    "title": "Class CV",
    "keywords": "Class CV This class provides wrapper methods for the OpenCV C interface native functions. Inheritance Object CV Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public static class CV : object Methods | Improve this Doc View Source Abs(Arr, Arr) Calculates the per-element absolute value of an array. Declaration public static void Abs(Arr src, Arr dst) Parameters Type Name Description Arr src The input array. Arr dst The destination array. | Improve this Doc View Source AbsDiff(Arr, Arr, Arr) Calculates the absolute difference between two arrays. Declaration public static void AbsDiff(Arr src1, Arr src2, Arr dst) Parameters Type Name Description Arr src1 The first input array. Arr src2 The second input array. Arr dst The destination array. | Improve this Doc View Source AbsDiffS(Arr, Arr, Scalar) Calculates the absolute difference between an array and a scalar. Declaration public static void AbsDiffS(Arr src, Arr dst, Scalar value) Parameters Type Name Description Arr src The input array. Arr dst The destination array. Scalar value The scalar input value. | Improve this Doc View Source Acc(Arr, Arr, Arr) Adds a frame to an accumulator. Declaration public static void Acc(Arr image, Arr sum, Arr mask = null) Parameters Type Name Description Arr image Input image, 1- or 3-channel, 8-bit or 32-bit floating point. Each channel of multi-channel image is processed independently. Arr sum Accumulator with the same number of channels as input image, 32-bit or 64-bit floating-point. Arr mask Optional operation mask. | Improve this Doc View Source AdaptiveThreshold(Arr, Arr, Double, AdaptiveThresholdMethod, ThresholdTypes, Int32, Double) Applies an adaptive threshold to an array. Declaration public static void AdaptiveThreshold(Arr src, Arr dst, double maxValue, AdaptiveThresholdMethod adaptiveMethod = default(AdaptiveThresholdMethod), ThresholdTypes thresholdType = default(ThresholdTypes), int blockSize = 3, double C = null) Parameters Type Name Description Arr src Source 8-bit single-channel image. Arr dst Destination image; will have the same size and the same type as src . Double maxValue The non-zero value assigned to the pixels for which the condition is satisfied. AdaptiveThresholdMethod adaptiveMethod The adaptive thresholding algorithm to use. ThresholdTypes thresholdType The type of threshold to apply. Int32 blockSize The size of a pixel neighborhood that is used to calculate a threshold value for the pixel, must be an odd number greater or equal to 3. Double C The constant subtracted from the mean or weighted mean. | Improve this Doc View Source Add(Arr, Arr, Arr, Arr) Calculates the per-element sum of two arrays. Declaration public static void Add(Arr src1, Arr src2, Arr dst, Arr mask = null) Parameters Type Name Description Arr src1 The first input array. Arr src2 The second input array. Arr dst The destination array. Arr mask Optional operation mask, 8-bit single-channel array specifying the elements that should be changed on dst . | Improve this Doc View Source AddS(Arr, Scalar, Arr, Arr) Calculates the per-element sum of an array and a scalar. Declaration public static void AddS(Arr src, Scalar value, Arr dst, Arr mask = null) Parameters Type Name Description Arr src The input array. Scalar value The scalar input value. Arr dst The destination array. Arr mask Optional operation mask, 8-bit single-channel array specifying the elements that should be changed on dst . | Improve this Doc View Source AddText(Arr, String, Point, Font) Draws text on the specified image img using the specific font . Declaration public static void AddText(Arr img, string text, Point location, Font font) Parameters Type Name Description Arr img Image where the text should be drawn. String text Text to write on the image. Point location The point where the text should start on the image. Font font Font used to draw the text. | Improve this Doc View Source AddWeighted(Arr, Double, Arr, Double, Double, Arr) Computes the weighted sum of two arrays. Declaration public static void AddWeighted(Arr src1, double alpha, Arr src2, double beta, double gamma, Arr dst) Parameters Type Name Description Arr src1 The first input array. Double alpha The weight for the first array elements. Arr src2 The second input array. Double beta The weight for the second array elements. Double gamma A scalar that is added to each sum. Arr dst The destination array. | Improve this Doc View Source Alloc(UIntPtr) Allocates a block of size bytes in memory, returning a pointer to the beginning of the block. Declaration public static IntPtr Alloc(UIntPtr size) Parameters Type Name Description UIntPtr size Size of the memory block, in bytes. Returns Type Description IntPtr On success, a pointer to the memory block allocated by the function. If there is not enough memory, the function raises an error. | Improve this Doc View Source And(Arr, Arr, Arr, Arr) Performs per-element bit-wise conjunction of two arrays. Declaration public static void And(Arr src1, Arr src2, Arr dst, Arr mask = null) Parameters Type Name Description Arr src1 The first input array. Arr src2 The second input array. Arr dst The destination array. Arr mask Optional operation mask, 8-bit single-channel array specifying the elements that should be changed on dst . | Improve this Doc View Source AndS(Arr, Scalar, Arr, Arr) Performs per-element bit-wise conjunction of an array and a scalar. Declaration public static void AndS(Arr src, Scalar value, Arr dst, Arr mask = null) Parameters Type Name Description Arr src The input array. Scalar value The scalar input value. Arr dst The destination array. Arr mask Optional operation mask, 8-bit single-channel array specifying the elements that should be changed on dst . | Improve this Doc View Source ApproxChains(Seq, MemStorage, ContourApproximation, Double, Int32, Boolean) Approximates Freeman chain(s) with a polygonal curve. Declaration public static Seq ApproxChains(Seq srcSeq, MemStorage storage, ContourApproximation method, double parameter, int minimalPerimeter, bool recursive) Parameters Type Name Description Seq srcSeq The Freeman chain that can refer to other chains. MemStorage storage Storage location for the resulting polylines. ContourApproximation method Specifies the contour approximation method. Double parameter Not used. Int32 minimalPerimeter Approximates only those contours whose perimeters are greater or equal than minimalPerimeter . Other chains are removed from the resulting structure. Boolean recursive If true , the function approximates all chains that can be accessed from srcSeq by using either HNext or VPrev links; otherwise, the single chain is approximated. Returns Type Description Seq The function returns the reference to the first resultant contour. | Improve this Doc View Source ApproxPoly(Seq, Int32, MemStorage, PolygonApproximation, Double, Boolean) Approximates polygonal curve(s) with the specified precision. Declaration public static Seq ApproxPoly(Seq srcSeq, int headerSize, MemStorage storage, PolygonApproximation method, double parameter, bool parameter2 = false) Parameters Type Name Description Seq srcSeq The input sequence. Int32 headerSize Header size of the approximated curve(s). MemStorage storage Container for the approximated contours. If null , the input sequence storage is used. PolygonApproximation method The polygon approximation method. Double parameter Method-specific parameter. In case of DouglasPeucker it is a desired approximation accuracy. Boolean parameter2 Indicates whether the single sequence should be approximated, or all the sequences on the same level and below srcSeq . Returns Type Description Seq A reference to the first approximated curve. | Improve this Doc View Source ArcLength(CVHandle) Calculates the contour perimeter or the curve length. Declaration public static double ArcLength(CVHandle curve) Parameters Type Name Description CVHandle curve Sequence or array of the curve points. Returns Type Description Double The length of the curve as the sum of the lengths of segments between subsequent points. | Improve this Doc View Source ArcLength(CVHandle, SeqSlice, Nullable<Boolean>) Calculates the contour perimeter or the curve length. Declaration public static double ArcLength(CVHandle curve, SeqSlice slice, bool? isClosed = null) Parameters Type Name Description CVHandle curve Sequence or array of the curve points. SeqSlice slice Starting and ending points of the curve. By default, the whole curve length is calculated. Nullable < Boolean > isClosed Indicates whether or not the curve is closed. If null and the input is a sequence, the sequence flags are examined to determine whether the curve is closed. Otherwise, it is assumed unclosed. Returns Type Description Double The length of the curve as the sum of the lengths of segments between subsequent points. | Improve this Doc View Source Avg(Arr, Arr) Calculates average (mean) of array elements. Declaration public static Scalar Avg(Arr arr, Arr mask = null) Parameters Type Name Description Arr arr The source array. Arr mask The optional operation mask. Returns Type Description Scalar The average value of array elements, independently for each channel. | Improve this Doc View Source AvgSdv(Arr, out Scalar, out Scalar, Arr) Calculates average (mean) and standard deviation of array elements. Declaration public static void AvgSdv(Arr arr, out Scalar mean, out Scalar stdDev, Arr mask = null) Parameters Type Name Description Arr arr The source array. Scalar mean The output average of array elements, independently for each channel. Scalar stdDev The output standard deviation, independently for each channel. Arr mask The optional operation mask. | Improve this Doc View Source AXPY(Arr, Double, Arr, Arr) Calculates the sum of a multiple of an array with another array. Declaration public static void AXPY(Arr A, double realScalar, Arr B, Arr C) Parameters Type Name Description Arr A The first input array. Double realScalar The scale factor for the first array. Arr B The second input array. Arr C The destination array. | Improve this Doc View Source BackProjectPCA(Arr, Arr, Arr, Arr) Back projects vectors from the specified subspace. Declaration public static void BackProjectPCA(Arr proj, Arr mean, Arr eigenvects, Arr result) Parameters Type Name Description Arr proj The input data array; each vector is either a single row or a single column. Arr mean The mean (average) vector. If it is a single-row vector, then inputs are stored as rows; otherwise, it should be a single-column vector and inputs will be stored as columns. Arr eigenvects The eigenvectors (principal components). One vector per row. Arr result The output matrix containing the back projected vectors. | Improve this Doc View Source BoundingRect(CVHandle, Boolean) Calculates the up-right bounding rectangle of a point set. Declaration public static Rect BoundingRect(CVHandle points, bool update = false) Parameters Type Name Description CVHandle points Sequence or array of points. Boolean update Indicates whether or not to update the Rect field. Returns Type Description Rect The up-right bounding rectangle for a 2d point set. | Improve this Doc View Source BoxPoints(RotatedRect, Point2f[]) Finds the box vertices. Declaration public static void BoxPoints(RotatedRect box, Point2f[] pt) Parameters Type Name Description RotatedRect box The input rotated rectangle. Point2f [] pt The array of box vertices. | Improve this Doc View Source CalcAffineFlowPyrLK(Arr, Arr, Arr, Arr, Point2f[], Point2f[], Single[], Size, Int32, Byte[], Single[], TermCriteria, LKFlowFlags) Calculates the affine optical flow for a sparse feature set using a modification of the iterative Lucas-Kanade method with pyramids. Declaration public static void CalcAffineFlowPyrLK(Arr prev, Arr curr, Arr prevPyr, Arr currPyr, Point2f[] prevFeatures, Point2f[] currFeatures, float[] matrices, Size winSize, int level, byte[] status, float[] trackError, TermCriteria criteria, LKFlowFlags flags) Parameters Type Name Description Arr prev First frame. Arr curr Second frame. Arr prevPyr Buffer for the pyramid for the first frame. If it is not null , the buffer must have a sufficient size to store the pyramid from level 1 to level level ; the total size of (width + 8) * height / 3 bytes is sufficient. Arr currPyr The same as prevPyr , for the second frame. Point2f [] prevFeatures Array of points for which the flow needs to be found. Point2f [] currFeatures Array of 2D points containing the calculated new positions of the input features in the second image. Single [] matrices The array of affine transformation matrices for each feature point. Matrices are stored sequentially with the format m(i) = [a00, a01, a10, a11] for each feature index, i. Size winSize Size of the search window of each pyramid level. Int32 level Maximal pyramid level number. If 0 , pyramids are not used (single level), if 1, two levels are used, etc. Byte [] status Every element of the status array is set to either 1, if the flow for the corresponding feature has been found, or 0 otherwise. Single [] trackError Array of numbers containing the difference between patches around the original and moved points. Optional parameter; can be null . TermCriteria criteria Specifies when the iteration process of finding the flow for each point on each pyramid level should be stopped. LKFlowFlags flags Specifies operation flags. | Improve this Doc View Source CalcBayesianProb(Histogram[], Histogram[]) Calculates bayesian probabilistic histograms. Declaration public static void CalcBayesianProb(Histogram[] src, Histogram[] dst) Parameters Type Name Description Histogram [] src The source histograms. Histogram [] dst The destination histograms. | Improve this Doc View Source CalcCovarMatrix(Arr[], Arr, Arr, CovarianceFlags) Calculates covariance matrix of a set of vectors. Declaration public static void CalcCovarMatrix(Arr[] vects, Arr covMat, Arr avg, CovarianceFlags flags) Parameters Type Name Description Arr [] vects The input vectors, all of which must have the same type and the same size. The vectors do not have to be 1D, they can be 2D (e.g., images) and so forth. Arr covMat The output covariance matrix that should be floating-point and square. Arr avg The input or output (depending on the flags) array containing the mean (average) vector of the input vectors. CovarianceFlags flags A value specifying various operation flags. | Improve this Doc View Source CalcEMD2(Arr, Arr, DistanceType, Func<Single, Single, Single>, Arr, Arr) Computes the earth mover distance between two weighted point sets (signatures). Declaration public static float CalcEMD2(Arr signature1, Arr signature2, DistanceType distanceType, Func<float, float, float> distanceFunc = null, Arr costMatrix = null, Arr flow = null) Parameters Type Name Description Arr signature1 The first signature array. Must be floating-point and consist of rows containing the histogram bin count followed by its coordinates. Arr signature2 The second signature array. Must be floating-point and consist of rows containing the histogram bin count followed by its coordinates. DistanceType distanceType The type of metric to use for computing the earth mover distance. Func < Single , Single , Single > distanceFunc The custom distance function used for computing the earth mover distance. Arr costMatrix The user-defined cost matrix. Arr flow The resultant flow matrix. Returns Type Description Single The earth mover distance between the two signatures. | Improve this Doc View Source CalcEMD2(Arr, Arr, DistanceType, Func<Single, Single, Single>, Arr, Arr, ref Single) Computes the earth mover distance between two weighted point sets (signatures). Declaration public static float CalcEMD2(Arr signature1, Arr signature2, DistanceType distanceType, Func<float, float, float> distanceFunc, Arr costMatrix, Arr flow, ref float lowerBound) Parameters Type Name Description Arr signature1 The first signature array. Must be floating-point and consist of rows containing the histogram bin count followed by its coordinates. Arr signature2 The second signature array. Must be floating-point and consist of rows containing the histogram bin count followed by its coordinates. DistanceType distanceType The type of metric to use for computing the earth mover distance. Func < Single , Single , Single > distanceFunc The custom distance function used for computing the earth mover distance. Arr costMatrix The user-defined cost matrix. Arr flow The resultant flow matrix. Single lowerBound The optional lower boundary of the distance between the two signatures that is a distance between mass centers. Returns Type Description Single The earth mover distance between the two signatures. | Improve this Doc View Source CalcGlobalOrientation(Arr, Arr, Arr, Double, Double) Calculates the global motion orientation of some selected region. Declaration public static double CalcGlobalOrientation(Arr orientation, Arr mask, Arr mhi, double timestamp, double duration) Parameters Type Name Description Arr orientation Motion gradient orientation image calculated by CalcMotionGradient(Arr, Arr, Arr, Double, Double, Int32) . Arr mask Mask image. It may be a conjunction of a valid gradient mask, obtained with CalcMotionGradient(Arr, Arr, Arr, Double, Double, Int32) and the mask of the region, whose direction needs to be calculated. Arr mhi Motion history image. Double timestamp Current time in milliseconds or other units. Double duration Maximal duration of the motion track in the same units as timestamp . Returns Type Description Double The general motion direction angle in the selected region, between 0 degrees and 360 degrees. | Improve this Doc View Source CalcMatMulDeriv(Mat, Mat, Mat, Mat) Computes partial derivatives of the matrix product for each multiplied matrix. Declaration public static void CalcMatMulDeriv(Mat A, Mat B, Mat dABdA, Mat dABdB) Parameters Type Name Description Mat A First multiplied matrix. Mat B Second multiplied matrix. Mat dABdA First output derivative matrix d(A B)/dA of size (A.Rows B.Cols)x(A.Rows*A.Cols). Mat dABdB Second output derivative matrix d(A B)/dB of size (A.Rows B.Cols)x(B.Rows*B.Cols). | Improve this Doc View Source CalcMotionGradient(Arr, Arr, Arr, Double, Double, Int32) Calculates the gradient orientation of a motion history image. Declaration public static void CalcMotionGradient(Arr mhi, Arr mask, Arr orientation, double delta1, double delta2, int apertureSize = 3) Parameters Type Name Description Arr mhi Motion history image. Arr mask Output mask image with non-zero pixels where the motion gradient data is correct. Arr orientation Motion gradient orientation image; contains angles from 0 to 360 degrees. Double delta1 The minimal or maximal gradient threshold used to determine whether a given pixel motion gradient data is correct. Double delta2 The minimal or maximal gradient threshold used to determine whether a given pixel motion gradient data is correct. Int32 apertureSize Aperture size of derivative operators used by the function. See Sobel(Arr, Arr, Int32, Int32, Int32) . | Improve this Doc View Source CalcOpticalFlowFarneback(Arr, Arr, Arr, Double, Int32, Int32, Int32, Int32, Double, FarnebackFlowFlags) Computes dense optical flow using Gunnar Farneback’s algorithm. Declaration public static void CalcOpticalFlowFarneback(Arr prev, Arr next, Arr flow, double pyrScale, int levels, int winSize, int iterations, int polyN, double polySigma, FarnebackFlowFlags flags) Parameters Type Name Description Arr prev The first 8-bit single-channel input image. Arr next The second input image of the same size and the same type as prev . Arr flow The computed flow image; will have the same size as prev and two 32-bit floating-point channels. Double pyrScale Specifies the image scale (less than 1) to build the pyramids for each image. 0.5 means the classical pyramid, where each next layer is twice smaller than the previous. Int32 levels The number of pyramid layers, including the initial image. 1 means that no extra layers are created and only the original images are used. Int32 winSize The averaging window size; The larger values increase the algorithm robustness to image noise and give more chances for fast motion detection, but yield a more blurred motion field. Int32 iterations The number of iterations the algorithm does at each pyramid level. Int32 polyN Size of the pixel neighborhood used to find polynomial expansion in each pixel. The larger values mean that the image will be approximated with smoother surfaces, yielding a more robust algorithm and a more blurred motion field. Typically, polyN is set to 5 or 7. Double polySigma Standard deviation of the Gaussian that is used to smooth derivatives that are used as a basis for the polynomial expansion. For a polyN of 5 you can set polySigma to 1.1, while for a polyN of 7 a good value would be 1.5. FarnebackFlowFlags flags Specifies operation flags. | Improve this Doc View Source CalcOpticalFlowPyrLK(Arr, Arr, Arr, Arr, Point2f[], Point2f[], Size, Int32, Byte[], Single[], TermCriteria, LKFlowFlags) Calculates the optical flow for a sparse feature set using the iterative Lucas-Kanade method with pyramids. Declaration public static void CalcOpticalFlowPyrLK(Arr prev, Arr curr, Arr prevPyr, Arr currPyr, Point2f[] prevFeatures, Point2f[] currFeatures, Size winSize, int level, byte[] status, float[] trackError, TermCriteria criteria, LKFlowFlags flags) Parameters Type Name Description Arr prev First frame. Arr curr Second frame. Arr prevPyr Buffer for the pyramid for the first frame. If it is not null , the buffer must have a sufficient size to store the pyramid from level 1 to level level ; the total size of (width + 8) * height / 3 bytes is sufficient. Arr currPyr The same as prevPyr , for the second frame. Point2f [] prevFeatures Array of points for which the flow needs to be found. Point2f [] currFeatures Array of 2D points containing the calculated new positions of the input features in the second image. Size winSize Size of the search window of each pyramid level. Int32 level Maximal pyramid level number. If 0 , pyramids are not used (single level), if 1, two levels are used, etc. Byte [] status Every element of the status array is set to either 1, if the flow for the corresponding feature has been found, or 0 otherwise. Single [] trackError Array of numbers containing the difference between patches around the original and moved points. Optional parameter; can be null . TermCriteria criteria Specifies when the iteration process of finding the flow for each point on each pyramid level should be stopped. LKFlowFlags flags Specifies operation flags. | Improve this Doc View Source CalcPCA(Arr, Arr, Arr, Arr, PcaFlags) Performs PCA analysis of the vector set. Declaration public static void CalcPCA(Arr data, Arr mean, Arr eigenvals, Arr eigenvects, PcaFlags flags) Parameters Type Name Description Arr data The input data array; each vector is either a single row or a single column. Arr mean The mean (average) vector. Arr eigenvals The output eigenvalues of covariance matrix. Arr eigenvects The output eigenvectors of covariance matrix (i.e. principal components); one vector per row. PcaFlags flags A value specifying various operation flags. | Improve this Doc View Source CalibrateCamera2(Mat, Mat, Mat, Size, Mat, Mat, Mat, Mat, CameraCalibrationFlags) Finds the camera intrinsic and extrinsic parameters from several views of a calibration pattern. Declaration public static double CalibrateCamera2(Mat objectPoints, Mat imagePoints, Mat pointCounts, Size imageSize, Mat cameraMatrix, Mat distortionCoeffs, Mat rotationVectors = null, Mat translationVectors = null, CameraCalibrationFlags flags = default(CameraCalibrationFlags)) Parameters Type Name Description Mat objectPoints The joint matrix of object points; calibration pattern features in the model coordinate space. A floating-point 3xN or Nx3 1-channel, or 1xN or Nx1 3-channel array, where N is the total number of points in all views. Mat imagePoints The joint matrix of object point projections in the camera views. A floating-point 2xN or Nx2 1-channel, or 1xN or Nx1 2-channel array, where N is the total number of points in all views. Mat pointCounts Integer 1xM or Mx1 vector (where M is the number of calibration pattern views) containing the number of points in each particular view. The sum of vector elements must match the size of objectPoints and imagePoints (=N). Size imageSize Size of the image, used only to initialize the intrinsic camera matrix. Mat cameraMatrix The output 3x3 floating-point camera matrix A = [fx 0 cx; 0 fy cy; 0 0 1]. Mat distortionCoeffs The output 4x1, 1x4, 5x1 or 1x5 vector of distortion coefficients (k1, k2, p1, p2[, k3]). Mat rotationVectors The output 3xM or Mx3 1-channel, or 1xM or Mx1 3-channel array of rotation vectors (see Rodrigues2(Mat, Mat, Mat) ), estimated for each pattern view. That is, each k-th rotation vector together with the corresponding k-th translation vector (see the next output parameter description) brings the calibration pattern from the model coordinate space (in which object points are specified) to the world coordinate space, i.e. real position of the calibration pattern in the k-th pattern view (k=0..M-1) Mat translationVectors The output 3xM or Mx3 1-channel, or 1xM or Mx1 3-channel array of translation vectors, estimated for each pattern view. CameraCalibrationFlags flags Specifies various operation flags. Returns Type Description Double The final re-projection error. | Improve this Doc View Source CalibrateCamera2(Mat, Mat, Mat, Size, Mat, Mat, Mat, Mat, CameraCalibrationFlags, TermCriteria) Finds the camera intrinsic and extrinsic parameters from several views of a calibration pattern. Declaration public static double CalibrateCamera2(Mat objectPoints, Mat imagePoints, Mat pointCounts, Size imageSize, Mat cameraMatrix, Mat distortionCoeffs, Mat rotationVectors, Mat translationVectors, CameraCalibrationFlags flags, TermCriteria criteria) Parameters Type Name Description Mat objectPoints The joint matrix of object points; calibration pattern features in the model coordinate space. A floating-point 3xN or Nx3 1-channel, or 1xN or Nx1 3-channel array, where N is the total number of points in all views. Mat imagePoints The joint matrix of object point projections in the camera views. A floating-point 2xN or Nx2 1-channel, or 1xN or Nx1 2-channel array, where N is the total number of points in all views. Mat pointCounts Integer 1xM or Mx1 vector (where M is the number of calibration pattern views) containing the number of points in each particular view. The sum of vector elements must match the size of objectPoints and imagePoints (=N). Size imageSize Size of the image, used only to initialize the intrinsic camera matrix. Mat cameraMatrix The output 3x3 floating-point camera matrix A = [fx 0 cx; 0 fy cy; 0 0 1]. Mat distortionCoeffs The output 4x1, 1x4, 5x1 or 1x5 vector of distortion coefficients (k1, k2, p1, p2[, k3]). Mat rotationVectors The output 3xM or Mx3 1-channel, or 1xM or Mx1 3-channel array of rotation vectors (see Rodrigues2(Mat, Mat, Mat) ), estimated for each pattern view. That is, each k-th rotation vector together with the corresponding k-th translation vector (see the next output parameter description) brings the calibration pattern from the model coordinate space (in which object points are specified) to the world coordinate space, i.e. real position of the calibration pattern in the k-th pattern view (k=0..M-1) Mat translationVectors The output 3xM or Mx3 1-channel, or 1xM or Mx1 3-channel array of translation vectors, estimated for each pattern view. CameraCalibrationFlags flags Specifies various operation flags. TermCriteria criteria Termination criteria for the iterative optimization algorithm. Returns Type Description Double The final re-projection error. | Improve this Doc View Source CalibrationMatrixValues(Mat, Size, Double, Double) Computes useful camera characteristics from the camera matrix. Declaration public static void CalibrationMatrixValues(Mat cameraMatrix, Size imageSize, double apertureWidth = null, double apertureHeight = null) Parameters Type Name Description Mat cameraMatrix Input camera matrix that can be estimated by CalibrateCamera2(Mat, Mat, Mat, Size, Mat, Mat, Mat, Mat, CameraCalibrationFlags, TermCriteria) or StereoCalibrate(Mat, Mat, Mat, Mat, Mat, Mat, Mat, Mat, Size, Mat, Mat, Mat, Mat, TermCriteria, StereoCalibrationFlags) . Size imageSize Input image size in pixels. Double apertureWidth Physical width of the sensor. Double apertureHeight Physical height of the sensor. | Improve this Doc View Source CalibrationMatrixValues(Mat, Size, Double, Double, out Double) Computes useful camera characteristics from the camera matrix. Declaration public static void CalibrationMatrixValues(Mat cameraMatrix, Size imageSize, double apertureWidth, double apertureHeight, out double fovx) Parameters Type Name Description Mat cameraMatrix Input camera matrix that can be estimated by CalibrateCamera2(Mat, Mat, Mat, Size, Mat, Mat, Mat, Mat, CameraCalibrationFlags, TermCriteria) or StereoCalibrate(Mat, Mat, Mat, Mat, Mat, Mat, Mat, Mat, Size, Mat, Mat, Mat, Mat, TermCriteria, StereoCalibrationFlags) . Size imageSize Input image size in pixels. Double apertureWidth Physical width of the sensor. Double apertureHeight Physical height of the sensor. Double fovx Output field of view in degrees along the horizontal sensor axis. | Improve this Doc View Source CalibrationMatrixValues(Mat, Size, Double, Double, out Double, out Double) Computes useful camera characteristics from the camera matrix. Declaration public static void CalibrationMatrixValues(Mat cameraMatrix, Size imageSize, double apertureWidth, double apertureHeight, out double fovx, out double fovy) Parameters Type Name Description Mat cameraMatrix Input camera matrix that can be estimated by CalibrateCamera2(Mat, Mat, Mat, Size, Mat, Mat, Mat, Mat, CameraCalibrationFlags, TermCriteria) or StereoCalibrate(Mat, Mat, Mat, Mat, Mat, Mat, Mat, Mat, Size, Mat, Mat, Mat, Mat, TermCriteria, StereoCalibrationFlags) . Size imageSize Input image size in pixels. Double apertureWidth Physical width of the sensor. Double apertureHeight Physical height of the sensor. Double fovx Output field of view in degrees along the horizontal sensor axis. Double fovy Output field of view in degrees along the vertical sensor axis. | Improve this Doc View Source CalibrationMatrixValues(Mat, Size, Double, Double, out Double, out Double, out Double) Computes useful camera characteristics from the camera matrix. Declaration public static void CalibrationMatrixValues(Mat cameraMatrix, Size imageSize, double apertureWidth, double apertureHeight, out double fovx, out double fovy, out double focalLength) Parameters Type Name Description Mat cameraMatrix Input camera matrix that can be estimated by CalibrateCamera2(Mat, Mat, Mat, Size, Mat, Mat, Mat, Mat, CameraCalibrationFlags, TermCriteria) or StereoCalibrate(Mat, Mat, Mat, Mat, Mat, Mat, Mat, Mat, Size, Mat, Mat, Mat, Mat, TermCriteria, StereoCalibrationFlags) . Size imageSize Input image size in pixels. Double apertureWidth Physical width of the sensor. Double apertureHeight Physical height of the sensor. Double fovx Output field of view in degrees along the horizontal sensor axis. Double fovy Output field of view in degrees along the vertical sensor axis. Double focalLength Focal length of the lens in mm. | Improve this Doc View Source CalibrationMatrixValues(Mat, Size, Double, Double, out Double, out Double, out Double, out Point2d) Computes useful camera characteristics from the camera matrix. Declaration public static void CalibrationMatrixValues(Mat cameraMatrix, Size imageSize, double apertureWidth, double apertureHeight, out double fovx, out double fovy, out double focalLength, out Point2d principalPoint) Parameters Type Name Description Mat cameraMatrix Input camera matrix that can be estimated by CalibrateCamera2(Mat, Mat, Mat, Size, Mat, Mat, Mat, Mat, CameraCalibrationFlags, TermCriteria) or StereoCalibrate(Mat, Mat, Mat, Mat, Mat, Mat, Mat, Mat, Size, Mat, Mat, Mat, Mat, TermCriteria, StereoCalibrationFlags) . Size imageSize Input image size in pixels. Double apertureWidth Physical width of the sensor. Double apertureHeight Physical height of the sensor. Double fovx Output field of view in degrees along the horizontal sensor axis. Double fovy Output field of view in degrees along the vertical sensor axis. Double focalLength Focal length of the lens in mm. Point2d principalPoint Principal point in pixels. | Improve this Doc View Source CalibrationMatrixValues(Mat, Size, Double, Double, out Double, out Double, out Double, out Point2d, out Double) Computes useful camera characteristics from the camera matrix. Declaration public static void CalibrationMatrixValues(Mat cameraMatrix, Size imageSize, double apertureWidth, double apertureHeight, out double fovx, out double fovy, out double focalLength, out Point2d principalPoint, out double pixelAspectRatio) Parameters Type Name Description Mat cameraMatrix Input camera matrix that can be estimated by CalibrateCamera2(Mat, Mat, Mat, Size, Mat, Mat, Mat, Mat, CameraCalibrationFlags, TermCriteria) or StereoCalibrate(Mat, Mat, Mat, Mat, Mat, Mat, Mat, Mat, Size, Mat, Mat, Mat, Mat, TermCriteria, StereoCalibrationFlags) . Size imageSize Input image size in pixels. Double apertureWidth Physical width of the sensor. Double apertureHeight Physical height of the sensor. Double fovx Output field of view in degrees along the horizontal sensor axis. Double fovy Output field of view in degrees along the vertical sensor axis. Double focalLength Focal length of the lens in mm. Point2d principalPoint Principal point in pixels. Double pixelAspectRatio The aspect ratio of a pixel, given by fy / fx. | Improve this Doc View Source CamShift(Arr, Rect, TermCriteria, out ConnectedComp) Finds the object center, size, and orientation. Declaration public static bool CamShift(Arr probImage, Rect window, TermCriteria criteria, out ConnectedComp comp) Parameters Type Name Description Arr probImage Back projection of object histogram (see CalcArrBackProject(Arr[], Arr) ). Rect window Initial search window. TermCriteria criteria Criteria applied to determine when the window search should be finished. ConnectedComp comp Resultant structure that contains the converged search window coordinates ( Rect field) and the sum of all of the pixels inside the window ( Area field). Returns Type Description Boolean true if the search was successful; false otherwise. | Improve this Doc View Source CamShift(Arr, Rect, TermCriteria, out ConnectedComp, out RotatedRect) Finds the object center, size, and orientation. Declaration public static bool CamShift(Arr probImage, Rect window, TermCriteria criteria, out ConnectedComp comp, out RotatedRect box) Parameters Type Name Description Arr probImage Back projection of object histogram (see CalcArrBackProject(Arr[], Arr) ). Rect window Initial search window. TermCriteria criteria Criteria applied to determine when the window search should be finished. ConnectedComp comp Resultant structure that contains the converged search window coordinates ( Rect field) and the sum of all of the pixels inside the window ( Area field). RotatedRect box Circumscribed box for the object. Returns Type Description Boolean true if the search was successful; false otherwise. | Improve this Doc View Source Canny(Arr, Arr, Double, Double, Int32) Implements the Canny algorithm for edge detection. Declaration public static void Canny(Arr image, Arr edges, double threshold1, double threshold2, int apertureSize = 3) Parameters Type Name Description Arr image Input image. Arr edges Single-channel image to store the edges found by the function. Double threshold1 The first threshold. The smallest value between threshold1 and threshold2 is used for edge linking, the largest value is used to find the initial segments of strong edges. Double threshold2 The second threshold. The smallest value between threshold1 and threshold2 is used for edge linking, the largest value is used to find the initial segments of strong edges. Int32 apertureSize Aperture parameter for the Sobel operator (see Sobel(Arr, Arr, Int32, Int32, Int32) ). | Improve this Doc View Source CartToPolar(Arr, Arr, Arr, Arr, Boolean) Calculates the magnitude and/or angle of 2d vectors. Declaration public static void CartToPolar(Arr x, Arr y, Arr magnitude, Arr angle = null, bool angleInDegrees = false) Parameters Type Name Description Arr x The array of x-coordinates. Arr y The array of y-coordinates. Arr magnitude The destination array of magnitudes, may be set to null if it is not needed. Arr angle The destination array of angles, may be set to null if it is not needed. The angles are measured in radians (0 to 2pi) or in degrees (0 to 360 degrees). Boolean angleInDegrees A value indicating whether the angles are measured in radians, which is the default mode, or in degrees. | Improve this Doc View Source Cbrt(Single) Calculates the cubic root. Declaration public static float Cbrt(float value) Parameters Type Name Description Single value The input floating-point value. Returns Type Description Single The cubic root of value . | Improve this Doc View Source CheckChessboard(IplImage, Size) Does a fast check if a chessboard is in the input image. Declaration public static bool CheckChessboard(IplImage src, Size size) Parameters Type Name Description IplImage src The input image. Size size The size of the chessboard. Returns Type Description Boolean true if a chessboard may be in the input image; false otherwise. | Improve this Doc View Source CheckContourConvexity(CVHandle) Tests contour convexity. The contour must be simple, without self-intersections. Declaration public static bool CheckContourConvexity(CVHandle contour) Parameters Type Name Description CVHandle contour Sequence or array of points. Returns Type Description Boolean A value indicating whether or not the contour is convex. | Improve this Doc View Source Circle(Arr, Point, Int32, Scalar, Int32, LineFlags, Int32) Draws a circle with the specified center and radius . Declaration public static void Circle(Arr img, Point center, int radius, Scalar color, int thickness = 1, LineFlags lineType = default(LineFlags), int shift = 0) Parameters Type Name Description Arr img The image on which to draw. Point center The center of the circle. Int32 radius The radius of the circle. Scalar color The color of the circle. Int32 thickness The thickness of the circle outline if positive, otherwise this indicates that a filled circle is to be drawn. LineFlags lineType The algorithm used to draw the circle boundary. Int32 shift The number of fractional bits in the center coordinates and radius value. | Improve this Doc View Source ClipLine(Size, ref Point, ref Point) Clips the line against the image rectangle. Declaration public static bool ClipLine(Size imgSize, ref Point pt1, ref Point pt2) Parameters Type Name Description Size imgSize The size of the image. Point pt1 The first ending point of the line segment. Point pt2 The second ending point of the line segment. Returns Type Description Boolean true if some portion of the line segment is inside the image, otherwise false . | Improve this Doc View Source Cmp(Arr, Arr, Arr, ComparisonOperation) Performs per-element comparison of two arrays. Declaration public static void Cmp(Arr src1, Arr src2, Arr dst, ComparisonOperation cmpOp) Parameters Type Name Description Arr src1 The first input array. Arr src2 The second input array. Both input arrays must have a single channel. Arr dst The destination array. It must have U8 or S8 type. ComparisonOperation cmpOp The comparison operation used to test the relation between the elements to be checked. | Improve this Doc View Source CmpS(Arr, Double, Arr, ComparisonOperation) Performs per-element comparison of an array and a scalar. Declaration public static void CmpS(Arr src, double value, Arr dst, ComparisonOperation cmpOp) Parameters Type Name Description Arr src The input array, must have a single channel. Double value The scalar value with which to compare each array element. Arr dst The destination array. It must have U8 or S8 type. ComparisonOperation cmpOp The comparison operation used to test the relation between the elements to be checked. | Improve this Doc View Source CompleteSymm(Mat, Boolean) Copies the lower or the upper half of a square matrix to another half. Declaration public static void CompleteSymm(Mat matrix, bool lowerToUpper = false) Parameters Type Name Description Mat matrix The input-output floating point square matrix. Boolean lowerToUpper If true , the lower half is copied to the upper half, otherwise the upper half is copied to the lower half. | Improve this Doc View Source ComposeRT(Mat, Mat, Mat, Mat, Mat, Mat, Mat, Mat, Mat, Mat, Mat, Mat, Mat, Mat) Combines two rotation-and-shift transformations. Declaration public static void ComposeRT(Mat rvec1, Mat tvec1, Mat rvec2, Mat tvec2, Mat rvec3, Mat tvec3, Mat dr3dr1 = null, Mat dr3dt1 = null, Mat dr3dr2 = null, Mat dr3dt2 = null, Mat dt3dr1 = null, Mat dt3dt1 = null, Mat dt3dr2 = null, Mat dt3dt2 = null) Parameters Type Name Description Mat rvec1 First rotation vector. Mat tvec1 First translation vector. Mat rvec2 Second rotation vector. Mat tvec2 Second translation vector. Mat rvec3 Output rotation vector of the superposition. Mat tvec3 Output translation vector of the superposition. Mat dr3dr1 Optional output derivatives of rvec3 with regard to rvec1 . Mat dr3dt1 Optional output derivatives of rvec3 with regard to tvec1 . Mat dr3dr2 Optional output derivatives of rvec3 with regard to rvec2 . Mat dr3dt2 Optional output derivatives of rvec3 with regard to tvec2 . Mat dt3dr1 Optional output derivatives of tvec3 with regard to rvec1 . Mat dt3dt1 Optional output derivatives of tvec3 with regard to tvec1 . Mat dt3dr2 Optional output derivatives of tvec3 with regard to rvec2 . Mat dt3dt2 Optional output derivatives of tvec3 with regard to tvec2 . | Improve this Doc View Source ComputeCorrespondEpilines(Mat, Int32, Mat, Mat) For points in one image of a stereo pair, computes the corresponding epilines in the other image. Declaration public static void ComputeCorrespondEpilines(Mat points, int whichImage, Mat fundamentalMatrix, Mat correspondentLines) Parameters Type Name Description Mat points The input points. 2xN, Nx2, 3xN or Nx3 array (where N number of points). Multi-channel 1xN or Nx1 array is also acceptable. Int32 whichImage Index of the image (1 or 2) that contains the points. Mat fundamentalMatrix The fundamental matrix that can be estimated using FindFundamentalMat(Mat, Mat, Mat, FundamentalMatrixMethod, Double, Double, Mat) or StereoRectify(Mat, Mat, Mat, Mat, Size, Mat, Mat, Mat, Mat, Mat, Mat, Mat, StereoRectificationFlags, Double, Size) . Mat correspondentLines The output epilines, a 3xN or Nx3 array. Each line ax + by + c = 0 is encoded by 3 numbers (a, b, c). | Improve this Doc View Source ContourArea(CVHandle) Calculates the area of a whole contour or contour section. Declaration public static double ContourArea(CVHandle contour) Parameters Type Name Description CVHandle contour Sequence or array of vertices. Returns Type Description Double The area of the whole contour or contour section. | Improve this Doc View Source ContourArea(CVHandle, SeqSlice, Boolean) Calculates the area of a whole contour or contour section. Declaration public static double ContourArea(CVHandle contour, SeqSlice slice, bool oriented = false) Parameters Type Name Description CVHandle contour Sequence or array of vertices. SeqSlice slice Starting and ending points of the contour section of interest. By default, the area of the whole contour is calculated. Boolean oriented If false , the absolute area will be returned; otherwise the returned value might be negative. Returns Type Description Double The area of the whole contour or contour section. | Improve this Doc View Source ContourPerimeter(CVHandle) Calculates the contour perimeter. Declaration public static double ContourPerimeter(CVHandle contour) Parameters Type Name Description CVHandle contour Sequence or array of the contour points. Returns Type Description Double The perimeter of the closed contour as the sum of the lengths of segments between subsequent points. | Improve this Doc View Source Convert(Arr, Arr) Converts one array to another. Declaration public static void Convert(Arr src, Arr dst) Parameters Type Name Description Arr src The source array. Arr dst The destination array. | Improve this Doc View Source ConvertImage(Arr, Arr, ConvertImageFlags) Converts one image to another with an optional vertical flip. Declaration public static void ConvertImage(Arr src, Arr dst, ConvertImageFlags flags = default(ConvertImageFlags)) Parameters Type Name Description Arr src Source image. Arr dst Destination image. ConvertImageFlags flags The operation flags. | Improve this Doc View Source ConvertMaps(Arr, Arr, Arr, Arr) Converts image transformation maps from floating-point to integer fixed-point for fast remapping operation. Declaration public static void ConvertMaps(Arr mapx, Arr mapy, Arr mapxy, Arr mapalpha) Parameters Type Name Description Arr mapx The map of x-coordinates, 32-bit single-channel floating-point image. Arr mapy The map of y-coordinates, 32-bit single-channel floating-point image. Arr mapxy The output map of xy-coordinates, 16-bit 2-channel signed integer image. Arr mapalpha The output alpha map, 16-bit single-channel unsigned integer image. | Improve this Doc View Source ConvertPointsHomogeneous(Mat, Mat) Convert points to/from homogeneous coordinates. Declaration public static void ConvertPointsHomogeneous(Mat src, Mat dst) Parameters Type Name Description Mat src The input point array, 2xN, Nx2, 3xN, Nx3, 4xN or Nx4 (where N is the number of points). Multi-channel 1xN or Nx1 array is also acceptable. Mat dst The output point array, must contain the same number of points as the input. The dimensionality must be the same, 1 less or 1 more than the input. | Improve this Doc View Source ConvertScale(Arr, Arr, Double, Double) Converts one array to another with optional linear transformation. Declaration public static void ConvertScale(Arr src, Arr dst, double scale = null, double shift = null) Parameters Type Name Description Arr src The source array. Arr dst The destination array. Double scale The optional scale factor applied independently to all element channels. Double shift The optional value added to scaled array elements. | Improve this Doc View Source ConvertScaleAbs(Arr, Arr, Double, Double) Converts input array elements to an 8-bit unsigned integer array with optional linear transformation. Declaration public static void ConvertScaleAbs(Arr src, Arr dst, double scale = null, double shift = null) Parameters Type Name Description Arr src The source array. Arr dst The destination array (must have U8 depth). Double scale The optional scale factor applied independently to all element channels. Double shift The optional value added to scaled array elements. Remarks This function is similar to ConvertScale(Arr, Arr, Double, Double) , but stores absolute values after the conversion results. | Improve this Doc View Source ConvexHull2(CVHandle, CVHandle, ShapeOrientation, Boolean) Finds the convex hull of a point set. Declaration public static Seq ConvexHull2(CVHandle input, CVHandle hullStorage = null, ShapeOrientation orientation = default(ShapeOrientation), bool returnPoints = false) Parameters Type Name Description CVHandle input Sequence or array of points. CVHandle hullStorage The array or memory storage that will store the convex hull. ShapeOrientation orientation Desired orientation of the convex hull. Boolean returnPoints If true , the points themselves will be stored in the hull instead of the indices. Returns Type Description Seq A sequence containing the points in the convex hull. | Improve this Doc View Source ConvexityDefects(CVHandle, Seq, MemStorage) Finds the convexity defects of a contour. Declaration public static Seq ConvexityDefects(CVHandle contour, Seq convexhull, MemStorage storage = null) Parameters Type Name Description CVHandle contour Input contour. Seq convexhull Convex hull obtained using ConvexHull2(CVHandle, CVHandle, ShapeOrientation, Boolean) that should contain pointers or indices to the contour points, not the hull points themselves (i.e. the returnPoints of ConvexHull2(CVHandle, CVHandle, ShapeOrientation, Boolean) parameter should be false ). MemStorage storage Container for the output sequence of convexity defects. Returns Type Description Seq A sequence of ConvexityDefect structures. | Improve this Doc View Source Copy(Arr, Arr, Arr) Copies elements of one array to another. Declaration public static void Copy(Arr src, Arr dst, Arr mask = null) Parameters Type Name Description Arr src The source array. Arr dst The destination array. Arr mask Optional operation mask, 8-bit single-channel array specifying the elements that should be changed on dst . | Improve this Doc View Source CopyMakeBorder(Arr, Arr, Point, IplBorder) Copies an image and makes a border around it. Declaration public static void CopyMakeBorder(Arr src, Arr dst, Point offset, IplBorder borderType) Parameters Type Name Description Arr src The source image. Arr dst The destination image. Point offset Coordinates of the top-left corner (or bottom-left in the case of images with bottom-left origin) of the destination image rectangle where the source image (or its ROI) is copied. IplBorder borderType Type of the border to create around the copied source image rectangle. | Improve this Doc View Source CopyMakeBorder(Arr, Arr, Point, IplBorder, Scalar) Copies an image and makes a border around it. Declaration public static void CopyMakeBorder(Arr src, Arr dst, Point offset, IplBorder borderType, Scalar value) Parameters Type Name Description Arr src The source image. Arr dst The destination image. Point offset Coordinates of the top-left corner (or bottom-left in the case of images with bottom-left origin) of the destination image rectangle where the source image (or its ROI) is copied. IplBorder borderType Type of the border to create around the copied source image rectangle. Scalar value Value of the border pixels if borderType is Constant . | Improve this Doc View Source CornerEigenValsAndVecs(Arr, Arr, Int32, Int32) Calculates eigenvalues and eigenvectors of image blocks for corner detection. Declaration public static void CornerEigenValsAndVecs(Arr image, Arr eigenvv, int blockSize, int apertureSize = 3) Parameters Type Name Description Arr image Input image. Arr eigenvv Image to store the results. It must be 6 times wider than the input image. Int32 blockSize The pixel neighborhood size. The method calculates the covariance matrix of derivatives over the neighborhood and finds its eigenvectors and eigenvalues. Int32 apertureSize Aperture parameter for the Sobel operator (see Sobel(Arr, Arr, Int32, Int32, Int32) ). | Improve this Doc View Source CornerHarris(Arr, Arr, Int32, Int32, Double) Implements the Harris edge detector. Declaration public static void CornerHarris(Arr image, Arr harrisResponse, int blockSize, int apertureSize = 3, double k = 0.04) Parameters Type Name Description Arr image Input image. Arr harrisResponse Image to store the Harris detector responses. Should have the same size as image . Int32 blockSize The pixel neighborhood size (see CornerEigenValsAndVecs(Arr, Arr, Int32, Int32) ). Int32 apertureSize Aperture parameter for the Sobel operator (see Sobel(Arr, Arr, Int32, Int32, Int32) ). Double k Harris detector free parameter. | Improve this Doc View Source CornerMinEigenVal(Arr, Arr, Int32, Int32) Calculates the minimal eigenvalue of gradient matrices for corner detection. Declaration public static void CornerMinEigenVal(Arr image, Arr eigenval, int blockSize, int apertureSize = 3) Parameters Type Name Description Arr image Input image. Arr eigenval Image to store the minimal eigenvalues. Should have the same size as image . Int32 blockSize The pixel neighborhood size (see CornerEigenValsAndVecs(Arr, Arr, Int32, Int32) ). Int32 apertureSize Aperture parameter for the Sobel operator (see Sobel(Arr, Arr, Int32, Int32, Int32) ). | Improve this Doc View Source CorrectMatches(Mat, Mat, Mat, Mat, Mat) Refines coordinates of corresponding points. Declaration public static void CorrectMatches(Mat F, Mat points1, Mat points2, Mat newPoints1, Mat newPoints2) Parameters Type Name Description Mat F 3x3 fundamental matrix. Mat points1 1xN array containing the first set of points. Mat points2 1xN array containing the second set of points. Mat newPoints1 The optimized points1 . Mat newPoints2 The optimized points2 | Improve this Doc View Source CountNonZero(Arr) Counts non-zero array elements. Declaration public static int CountNonZero(Arr arr) Parameters Type Name Description Arr arr The source array. Must be a single-channel array or a multi-channel image with COI set. Returns Type Description Int32 The number of non-zero elements in arr . | Improve this Doc View Source CreateButton(String, ButtonCallback, ButtonType, Boolean) Creates and attaches a button to the shared control panel. Declaration public static bool CreateButton(string buttonName = null, ButtonCallback onChange = null, ButtonType buttonType = default(ButtonType), bool initialButtonState = false) Parameters Type Name Description String buttonName The name of the button. ButtonCallback onChange The callback method that will be called every time the button changes state. ButtonType buttonType The type of button to create. Boolean initialButtonState The initial state of the button. Returns Type Description Boolean true if the button was created successfully; otherwise, false . | Improve this Doc View Source CreatePyramid(Arr, Int32, Double, Size[], Arr, Boolean, PyramidDecompositionFilter) Builds pyramid representation of an image. Declaration public static Mat[] CreatePyramid(Arr img, int extraLayers, double rate, Size[] layerSizes = null, Arr buffer = null, bool calc = true, PyramidDecompositionFilter filter = default(PyramidDecompositionFilter)) Parameters Type Name Description Arr img The source image. Int32 extraLayers The number of extra pyramid layers. Double rate The size scale factor between each pyramid layer. Used if layerSizes is null . Size [] layerSizes The size of each pyramid layer. Arr buffer An image buffer on which the pyramids will be stored. Boolean calc A value indicating whether to compute the actual pyramids. If it is false , only the memory for the pyramids is allocated. PyramidDecompositionFilter filter The type of filter used for convolution. Returns Type Description Mat [] A set of matrix handles representing the pyramid of img . | Improve this Doc View Source CrossProduct(Arr, Arr, Arr) Calculates the cross product of two 3D vectors. Declaration public static void CrossProduct(Arr src1, Arr src2, Arr dst) Parameters Type Name Description Arr src1 The first source vector. Arr src2 The second source vector. Arr dst The destination vector. | Improve this Doc View Source CvtColor(Arr, Arr, ColorConversion) Converts an image from one color space to another. Declaration public static void CvtColor(Arr src, Arr dst, ColorConversion code) Parameters Type Name Description Arr src The input image, 8-bit unsigned, 16-bit unsigned or single-precision floating-point. Arr dst The output image of the same size and depth as src . ColorConversion code The color space conversion to apply. | Improve this Doc View Source DCT(Arr, Arr, DiscreteTransformFlags) Performs a forward or inverse Discrete Cosine transform of a 1D or 2D floating-point array. Declaration public static void DCT(Arr src, Arr dst, DiscreteTransformFlags flags) Parameters Type Name Description Arr src The source array, real 1D or 2D array. Arr dst Destination array of the same size and type as src . DiscreteTransformFlags flags The transformation flags specifying the operation of the DCT. | Improve this Doc View Source DecodeImage(Mat, LoadImageFlags) Reads an image from a buffer in memory as an IplImage . Declaration public static IplImage DecodeImage(Mat buf, LoadImageFlags colorType) Parameters Type Name Description Mat buf Input array of bytes. LoadImageFlags colorType Specific color type of the loaded image. Returns Type Description IplImage The newly loaded image. | Improve this Doc View Source DecodeImageM(Mat, LoadImageFlags) Reads an image from a buffer in memory as a Mat . Declaration public static Mat DecodeImageM(Mat buf, LoadImageFlags colorType) Parameters Type Name Description Mat buf Input array of bytes. LoadImageFlags colorType Specific color type of the loaded image. Returns Type Description Mat The newly loaded image. | Improve this Doc View Source DecomposeProjectionMatrix(Mat, Mat, Mat, Mat, Mat, Mat, Mat, Point3d[]) Decomposes the projection matrix into a rotation matrix and a camera matrix. Declaration public static void DecomposeProjectionMatrix(Mat projMatr, Mat calibMatr, Mat rotMatr, Mat posVect, Mat rotMatrX = null, Mat rotMatrY = null, Mat rotMatrZ = null, Point3d[] eulerAngles = null) Parameters Type Name Description Mat projMatr The 3x4 input projection matrix P. Mat calibMatr The output 3x3 camera matrix K. Mat rotMatr The output 3x3 external rotation matrix R. Mat posVect The output 4x1 translation vector T. Mat rotMatrX Optional output 3x3 rotation matrix around x-axis. Mat rotMatrY Optional output 3x3 rotation matrix around y-axis. Mat rotMatrZ Optional output 3x3 rotation matrix around z-axis. Point3d [] eulerAngles Optional output array containing the three Euler angles of rotation. | Improve this Doc View Source Det(Arr) Returns the determinant of a matrix. Declaration public static double Det(Arr mat) Parameters Type Name Description Arr mat The source matrix. Returns Type Description Double The determinant of the square matrix mat . | Improve this Doc View Source DFT(Arr, Arr, DiscreteTransformFlags, Int32) Performs a forward or inverse Discrete Fourier transform of a 1D or 2D floating-point array. Declaration public static void DFT(Arr src, Arr dst, DiscreteTransformFlags flags, int nonzeroRows) Parameters Type Name Description Arr src The source array, containing real or complex values. Arr dst The destination array of the same size and type as src . DiscreteTransformFlags flags The transformation flags specifying the operation of the DFT. Int32 nonzeroRows The number of nonzero rows in the source array (in the case of a forward 2d transform), or a number of rows of interest in the destination array (in the case of an inverse 2d transform). | Improve this Doc View Source Dilate(Arr, Arr, IplConvKernel, Int32) Dilates an image by using a specific structuring element. Declaration public static void Dilate(Arr src, Arr dst, IplConvKernel element = null, int iterations = 1) Parameters Type Name Description Arr src The source image. Arr dst The destination image. IplConvKernel element The structuring element used for dilation. If it is null , a 3x3 rectangular structuring element is used. Int32 iterations The number of times dilation is applied. | Improve this Doc View Source DistTransform(Arr, Arr, DistanceType, Int32, Single[], Arr, DistanceLabel) Calculates the distance to the closest zero pixel for all non-zero pixels of the source image. Declaration public static void DistTransform(Arr src, Arr dst, DistanceType distanceType = default(DistanceType), int maskSize = 3, float[] mask = null, Arr labels = null, DistanceLabel labelType = default(DistanceLabel)) Parameters Type Name Description Arr src 8-bit, single-channel (binary) source image. Arr dst Output image with calculated distances (32-bit floating-point, single-channel). DistanceType distanceType The type of distance to use. Int32 maskSize Size of the distance transform mask; can be 3 or 5. Single [] mask User-defined mask in the case of a user-defined distance. It consists of 2 numbers (horizontal/vertical shift cost, diagonal shift cost) in the case of a 3x3 mask and 3 numbers (horizontal/vertical shift cost, diagonal shift cost, knight’s move cost) in the case of a 5x5 mask. Arr labels The optional output 2d array of integer type labels, the same size as src and dst . DistanceLabel labelType Specifies the content of the output label array. | Improve this Doc View Source Div(Arr, Arr, Arr, Double) Calculates the per-element division of two arrays. Declaration public static void Div(Arr src1, Arr src2, Arr dst, double scale = null) Parameters Type Name Description Arr src1 The first input array. If the reference is null , the array is assumed to be all ones. Arr src2 The second input array. Arr dst The destination array. Double scale An optional scale factor. | Improve this Doc View Source DotProduct(Arr, Arr) Calculates the dot product of two arrays in Euclidian metrics. Declaration public static double DotProduct(Arr src1, Arr src2) Parameters Type Name Description Arr src1 The first input array. Arr src2 The second input array. Returns Type Description Double The Euclidean dot product of the two arrays. In the case of multiple channel arrays, the results for all channels are accumulated. | Improve this Doc View Source DrawChessboardCorners(Arr, Size, Point2f[], Boolean) Renders the detected chessboard corners. Declaration public static void DrawChessboardCorners(Arr image, Size patternSize, Point2f[] corners, bool patternWasFound) Parameters Type Name Description Arr image The destination image; it must be an 8-bit color image. Size patternSize The number of inner corners per chessboard row and column (pointsPerRow, pointsPerColumn). Point2f [] corners The array of detected corners. Boolean patternWasFound A value indicating whether the complete board was found. | Improve this Doc View Source DrawContours(Arr, Seq, Scalar, Scalar, Int32, Int32, LineFlags) Draws contour outlines or filled interiors in an image. Declaration public static void DrawContours(Arr img, Seq contour, Scalar externalColor, Scalar holeColor, int maxLevel, int thickness = 1, LineFlags lineType = default(LineFlags)) Parameters Type Name Description Arr img The image where the contours are to be drawn. Seq contour The first contour to draw. Scalar externalColor The color of the external contours. Scalar holeColor The color of the internal holes. Int32 maxLevel The maximal level for drawn contours. If 0, only contour is drawn. If 1, the contour and all contours following it on the same level are drawn. If 2, all contours following contour and all contours one level below the contours are drawn, and so forth. If the value is negative, the function does not draw the contours following contour contour but draws the child contours of contour up to the max level minus one. Int32 thickness The thickness of the lines the contours are drawn with. If negative, the contour interiors are drawn. LineFlags lineType The algorithm used to draw the contour boundaries. | Improve this Doc View Source DrawContours(Arr, Seq, Scalar, Scalar, Int32, Int32, LineFlags, Point) Draws contour outlines or filled interiors in an image. Declaration public static void DrawContours(Arr img, Seq contour, Scalar externalColor, Scalar holeColor, int maxLevel, int thickness, LineFlags lineType, Point offset) Parameters Type Name Description Arr img The image where the contours are to be drawn. Seq contour The first contour to draw. Scalar externalColor The color of the external contours. Scalar holeColor The color of the internal holes. Int32 maxLevel The maximal level for drawn contours. If 0, only contour is drawn. If 1, the contour and all contours following it on the same level are drawn. If 2, all contours following contour and all contours one level below the contours are drawn, and so forth. If the value is negative, the function does not draw the contours following contour contour but draws the child contours of contour up to the max level minus one. Int32 thickness The thickness of the lines the contours are drawn with. If negative, the contour interiors are drawn. LineFlags lineType The algorithm used to draw the contour boundaries. Point offset An offset to apply to all contour vertices. | Improve this Doc View Source EigenVV(Arr, Arr, Arr, Double, Int32, Int32) Computes eigenvalues and eigenvectors of a symmetric matrix. Declaration public static void EigenVV(Arr mat, Arr evects, Arr evals, double eps = null, int lowindex = null, int highindex = null) Parameters Type Name Description Arr mat The input symmetric square matrix, modified during the processing. Arr evects The output matrix of eigenvectors, stored as subsequent rows. Arr evals The output vector of eigenvalues, stored in the descending order. Double eps Accuracy of diagonalization. Int32 lowindex Optional index of largest eigenvalue/-vector to calculate. Int32 highindex Optional index of smallest eigenvalue/-vector to calculate. | Improve this Doc View Source Ellipse(Arr, Point, Size, Double, Double, Double, Scalar, Int32, LineFlags, Int32) Draws ellipse outline, filled ellipse, elliptic arc or filled elliptic sector, depending on thickness , startAngle and endAngle parameters. The resultant figure is rotated by angle . All the angles are in degrees. Declaration public static void Ellipse(Arr img, Point center, Size axes, double angle, double startAngle, double endAngle, Scalar color, int thickness = 1, LineFlags lineType = default(LineFlags), int shift = 0) Parameters Type Name Description Arr img The image on which to draw. Point center The center of the ellipse. Size axes The length of the ellipse axes. Double angle The rotation angle. Double startAngle The starting angle of the elliptic arc. Double endAngle The ending angle of the elliptic arc. Scalar color The color of the ellipse. Int32 thickness The thickness of the ellipse boundary if positive, otherwise this indicates that a filled ellipse sector is to be drawn. LineFlags lineType The algorithm used to draw the ellipse boundary. Int32 shift The number of fractional bits in the center coordinates and axes' values. | Improve this Doc View Source EllipseBox(Arr, RotatedRect, Scalar, Int32, LineFlags, Int32) Draws a simple or thick ellipse from the specified enclosing box . Declaration public static void EllipseBox(Arr img, RotatedRect box, Scalar color, int thickness = 1, LineFlags lineType = default(LineFlags), int shift = 0) Parameters Type Name Description Arr img The image on which to draw. RotatedRect box The enclosing box of the ellipse. Scalar color The color of the ellipse. Int32 thickness The thickness of the ellipse boundary if positive, otherwise this indicates that a filled ellipse is to be drawn. LineFlags lineType The algorithm used to draw the ellipse boundary. Int32 shift The number of fractional bits in the center coordinates and axes' values. | Improve this Doc View Source EllipseToPoly(Point, Size, Int32, Int32, Int32, Point[], Int32) Returns the polygon points which make up the given ellipse. Declaration public static int EllipseToPoly(Point center, Size axes, int angle, int startAngle, int endAngle, Point[] pts, int delta) Parameters Type Name Description Point center The center of the ellipse. Size axes The length of the ellipse axes. Int32 angle The rotation angle. Int32 startAngle The starting angle of the elliptic arc. Int32 endAngle The ending angle of the elliptic arc. Point [] pts The array of points that define the polygon. The array must be large enough to hold the result. Int32 delta The angle between the subsequent polyline vertices. It defines the approximation accuracy. Returns Type Description Int32 The total number of points stored into pts . | Improve this Doc View Source EncodeImage(String, Arr, Int32[]) Encodes an image into a memory buffer. Declaration public static Mat EncodeImage(string ext, Arr image, params int[] parameters) Parameters Type Name Description String ext File extension that defines the output format. Arr image Image to be written. Int32 [] parameters Optional image compression parameters. Returns Type Description Mat A newly created Mat containing the encoded image bytes. | Improve this Doc View Source EqualizeHist(Arr, Arr) Equalizes the histogram of a grayscale image. Declaration public static void EqualizeHist(Arr src, Arr dst) Parameters Type Name Description Arr src Source 8-bit single channel image. Arr dst Destination image of the same size and type as src . | Improve this Doc View Source Erode(Arr, Arr, IplConvKernel, Int32) Erodes an image by using a specific structuring element. Declaration public static void Erode(Arr src, Arr dst, IplConvKernel element = null, int iterations = 1) Parameters Type Name Description Arr src The source image. Arr dst The destination image. IplConvKernel element The structuring element used for erosion. If it is null , a 3x3 rectangular structuring element is used. Int32 iterations The number of times erosion is applied. | Improve this Doc View Source EstimateRigidTransform(Arr, Arr, Mat, Boolean) Estimates the optimal affine transformation between two images or two point sets. Declaration public static bool EstimateRigidTransform(Arr A, Arr B, Mat M, bool fullAffine) Parameters Type Name Description Arr A First input 2D point set stored as a Mat , or an image. Arr B Second input 2D point set of the same size and the same type as A , or another image. Mat M The output optimal 2x3 affine transformation matrix. Boolean fullAffine If true , the function finds an optimal affine transformation with no additional restrictions (6 degrees of freedom). Otherwise, the class of transformations to choose from is limited to combinations of translation, rotation, and uniform scaling (5 degrees of freedom). Returns Type Description Boolean true if the optimal affine transformation was successfully found; false otherwise. | Improve this Doc View Source Exp(Arr, Arr) Calculates the exponent of every array element. Declaration public static void Exp(Arr src, Arr dst) Parameters Type Name Description Arr src The source array. Arr dst The destination array, it should have double type or the same type as src . | Improve this Doc View Source FastArctan(Single, Single) Calculates the angle of a 2D vector. Declaration public static float FastArctan(float y, float x) Parameters Type Name Description Single y The y-coordinate of the 2D vector. Single x The x-coordinate of the 2D vector. Returns Type Description Single The full-range angle of an input 2D vector. The angle is measured in degrees and varies from 0 degrees to 360 degrees. The accuracy is about 0.1 degrees. | Improve this Doc View Source FillConvexPoly(Arr, Point[], Scalar, LineFlags, Int32) Fills a convex polygon. Declaration public static void FillConvexPoly(Arr img, Point[] pts, Scalar color, LineFlags lineType = default(LineFlags), int shift = 0) Parameters Type Name Description Arr img The image on which to draw. Point [] pts The array of points specifying a single convex polygon. Scalar color The color of the polygon. LineFlags lineType The algorithm used to draw the polygon boundaries. Int32 shift The number of fractional bits in the vertex coordinates. | Improve this Doc View Source FillPoly(Arr, Point[][], Scalar, LineFlags, Int32) Fills an area bounded by several polygonal contours. Declaration public static void FillPoly(Arr img, Point[][] pts, Scalar color, LineFlags lineType = default(LineFlags), int shift = 0) Parameters Type Name Description Arr img The image on which to draw. Point [][] pts The array of polygons bounding the area to fill. Scalar color The color of the filled area. LineFlags lineType The algorithm used to draw the polygon boundaries. Int32 shift The number of fractional bits in the vertex coordinates. | Improve this Doc View Source Filter2D(Arr, Arr, Mat) Convolves an image with the kernel. Declaration public static void Filter2D(Arr src, Arr dst, Mat kernel) Parameters Type Name Description Arr src The source image. Arr dst The destination image of the same size and number of channels as src . Mat kernel The convolution kernel (or rather a correlation kernel), a single-channel floating point matrix. | Improve this Doc View Source Filter2D(Arr, Arr, Mat, Point) Convolves an image with the kernel. Declaration public static void Filter2D(Arr src, Arr dst, Mat kernel, Point anchor) Parameters Type Name Description Arr src The source image. Arr dst The destination image of the same size and number of channels as src . Mat kernel The convolution kernel (or rather a correlation kernel), a single-channel floating point matrix. Point anchor The anchor of the kernel that indicates the relative position of a filtered point within the kernel; the anchor should lie within the kernel; default value (-1,-1) means that the anchor is at the kernel center. | Improve this Doc View Source FindChessboardCorners(Arr, Size, Point2f[]) Finds the positions of the internal corners of the chessboard. Declaration public static bool FindChessboardCorners(Arr image, Size patternSize, Point2f[] corners) Parameters Type Name Description Arr image Source chessboard view; it must be an 8-bit grayscale or color image. Size patternSize The number of inner corners per chessboard row and column (pointsPerRow,pointsPerColumn). Point2f [] corners The output array of detected corners. Returns Type Description Boolean true if all of the corners have been found and correctly reordered; false otherwise. | Improve this Doc View Source FindChessboardCorners(Arr, Size, Point2f[], out Int32, ChessboardCalibrationFlags) Finds the positions of the internal corners of the chessboard. Declaration public static bool FindChessboardCorners(Arr image, Size patternSize, Point2f[] corners, out int cornerCount, ChessboardCalibrationFlags flags = default(ChessboardCalibrationFlags)) Parameters Type Name Description Arr image Source chessboard view; it must be an 8-bit grayscale or color image. Size patternSize The number of inner corners per chessboard row and column (pointsPerRow, pointsPerColumn). Point2f [] corners The output array of detected corners. Int32 cornerCount The output number of corners found. ChessboardCalibrationFlags flags Specifies operation flags. Returns Type Description Boolean true if all of the corners have been found and correctly reordered; false otherwise. | Improve this Doc View Source FindContours(Arr, MemStorage, out Seq) Finds the contours in a binary image. Declaration public static int FindContours(Arr image, MemStorage storage, out Seq firstContour) Parameters Type Name Description Arr image The source image, 8-bit single channel. Non-zero pixels are treated as ones, zero pixels remain zero, i.e. the image is treated as binary. MemStorage storage Container of the retrieved contours. Seq firstContour The reference to the first outer contour. Returns Type Description Int32 The number of retrieved contours. | Improve this Doc View Source FindContours(Arr, MemStorage, out Seq, Int32, ContourRetrieval, ContourApproximation) Finds the contours in a binary image. Declaration public static int FindContours(Arr image, MemStorage storage, out Seq firstContour, int headerSize, ContourRetrieval mode = default(ContourRetrieval), ContourApproximation method = default(ContourApproximation)) Parameters Type Name Description Arr image The source image, 8-bit single channel. Non-zero pixels are treated as ones, zero pixels remain zero, i.e. the image is treated as binary. MemStorage storage Container of the retrieved contours. Seq firstContour The reference to the first outer contour. Int32 headerSize Size of the sequence header. ContourRetrieval mode Specifies the contour retrieval mode. ContourApproximation method Specifies the contour approximation method. Returns Type Description Int32 The number of retrieved contours. | Improve this Doc View Source FindContours(Arr, MemStorage, out Seq, Int32, ContourRetrieval, ContourApproximation, Point) Finds the contours in a binary image. Declaration public static int FindContours(Arr image, MemStorage storage, out Seq firstContour, int headerSize, ContourRetrieval mode, ContourApproximation method, Point offset) Parameters Type Name Description Arr image The 8-bit, single channel, binary source image. MemStorage storage Container of the retrieved contours. Seq firstContour The reference to the first outer contour. Int32 headerSize Size of the sequence header. ContourRetrieval mode Specifies the contour retrieval mode. ContourApproximation method Specifies the contour approximation method. Point offset An offset, by which every contour point is shifted. This is useful if the contours are extracted from an image ROI but should then be analyzed in the whole image context. Returns Type Description Int32 The number of retrieved contours. | Improve this Doc View Source FindCornerSubPix(Arr, Point2f[], Size, Size, TermCriteria) Refines the corner locations. Declaration public static void FindCornerSubPix(Arr image, Point2f[] corners, Size win, Size zeroZone, TermCriteria criteria) Parameters Type Name Description Arr image Input image. Point2f [] corners Initial coordinates of the input corners; refined coordinates on output. Size win Half of the side length of the search window. Size zeroZone Half of the size of the dead region in the middle of the search zone over which the summation is not done. It is used sometimes to avoid possible singularities of the autocorrelation matrix. The value of (-1,-1) indicates that there is no such size. TermCriteria criteria Criteria for termination of the iterative process of corner refinement. | Improve this Doc View Source FindExtrinsicCameraParams2(Mat, Mat, Mat, Mat, Mat, Mat, Boolean) Finds the object pose from the 3D-2D point correspondences. Declaration public static void FindExtrinsicCameraParams2(Mat objectPoints, Mat imagePoints, Mat cameraMatrix, Mat distortionCoeffs, Mat rotationVector, Mat translationVector, bool useExtrinsicGuess = false) Parameters Type Name Description Mat objectPoints The array of object points in the object coordinate space, 3xN or Nx3 1-channel, or 1xN or Nx1 3-channel, where N is the number of points. Mat imagePoints The array of corresponding image points, 2xN or Nx2 1-channel or 1xN or Nx1 2-channel, where N is the number of points. Mat cameraMatrix The camera matrix A = [fx 0 cx; 0 fy cy; 0 0 1]. Mat distortionCoeffs The input vector of distortion coefficients of 4,5 or 8 elements. If it is null , the zero distortion coefficients are assumed. Mat rotationVector The output rotation vector (see Rodrigues2(Mat, Mat, Mat) ) that (together with translationVector ) brings points from the model coordinate system to the camera coordinate system. Mat translationVector The output translation vector. Boolean useExtrinsicGuess If true , the function will use the provided rotationVector and translationVector as the initial approximations of the rotation and translation vectors, respectively, and will further optimize them. | Improve this Doc View Source FindFundamentalMat(Mat, Mat, Mat, FundamentalMatrixMethod, Double, Double, Mat) Calculates the fundamental matrix from the corresponding points in two images. Declaration public static int FindFundamentalMat(Mat points1, Mat points2, Mat fundamentalMatrix, FundamentalMatrixMethod method = default(FundamentalMatrixMethod), double param1 = null, double param2 = 0.99, Mat status = null) Parameters Type Name Description Mat points1 Array of N points from the first image. It can be 2xN, Nx2, 3xN or Nx3 1-channel array or 1xN or Nx1 2- or 3-channel array. The point coordinates should be floating-point (single or double precision). Mat points2 Array of the second image points of the same size and format as points1 . Mat fundamentalMatrix The output fundamental matrix or matrices. The size should be 3x3 or 9x3 (7-point method may return up to 3 matrices). FundamentalMatrixMethod method Method for computing the fundamental matrix. Double param1 The parameter is used for RANSAC. It is the maximum distance from the point to the epipolar line in pixels, beyond which the point is considered an outlier and is not used for computing the final fundamental matrix. It can be set to something like 1-3, depending on the accuracy of the point localization, image resolution and image noise. Double param2 The parameter is used for RANSAC or LMedS methods only. It specifies the desirable level of confidence (probability) that the estimated matrix is correct. Mat status The optional output array of N elements, every element of which is set to 0 for outliers and to 1 for the other points. The array is computed only in RANSAC and LMedS methods. For other methods it is set to all 1's. Returns Type Description Int32 The number of fundamental matrices found (1 or 3) or 0, if no matrix is found. Normally just one matrix is found, but in the case of 7-point algorithm the function may return up to 3 solutions (9x3 matrix that stores all 3 matrices sequentially). | Improve this Doc View Source FindHomography(Mat, Mat, Mat, FindHomographyMethod, Double, Mat) Finds the perspective transformation between two planes. Declaration public static bool FindHomography(Mat srcPoints, Mat dstPoints, Mat homography, FindHomographyMethod method = default(FindHomographyMethod), double ransacReprojThreshold = null, Mat mask = null) Parameters Type Name Description Mat srcPoints Coordinates of the points in the original plane, 2xN, Nx2, 3xN or Nx3 1-channel array (the latter two are for representation in homogeneous coordinates), where N is the number of points. 1xN or Nx1 2- or 3-channel array can also be passed. Mat dstPoints Point coordinates in the destination plane, 2xN, Nx2, 3xN or Nx3 1-channel, or 1xN or Nx1 2- or 3-channel array. Mat homography The output 3x3 homography matrix. FindHomographyMethod method The method used to compute the homography matrix. Double ransacReprojThreshold The maximum allowed reprojection error to treat a point pair as an inlier (used in the RANSAC method only). Mat mask The optional output mask set by a robust method ( Ransac or LMedS ). Returns Type Description Boolean A value indicating whether the homography matrix calculation was successful. | Improve this Doc View Source FitEllipse2(CVHandle) Fits an ellipse around a set of 2D points. Declaration public static RotatedRect FitEllipse2(CVHandle points) Parameters Type Name Description CVHandle points Sequence or array of points. Returns Type Description RotatedRect The rotated rectangle representing the ellipse best fit around the point set. The size of the box represents the full lengths of the ellipse axes. | Improve this Doc View Source FitLine(Arr, DistanceType, Double, Double, Double, Single[]) Fits line to 2D or 3D point set. Declaration public static void FitLine(Arr points, DistanceType distType, double param, double reps, double aeps, float[] line) Parameters Type Name Description Arr points Sequence or array of 2D or 3D points with 32-bit integer or floating-point coordinates. DistanceType distType The distance used for fitting. Double param Numerical parameter (C) for some types of distances, if 0 then some optimal value is chosen. Double reps Sufficient accuracy for radius (distance between the coordinate origin and the line); 0.01 would be a good default. Double aeps Sufficient accuracy for angle; 0.01 would be a good default. Single [] line The output line parameters. In case of 2D fitting it is an array of 4 floats (vx, vy, x0, y0) where (vx, vy) is a normalized vector collinear to the line and (x0, y0) is some point on the line. In case of 3D fitting it is an array of 6 floats (vx, vy, vz, x0, y0, z0) where (vx, vy, vz) is a normalized vector collinear to the line and (x0, y0, z0) is some point on the line. | Improve this Doc View Source Flip(Arr, Arr, FlipMode) Flips a 2D array around vertical, horizontal or both axes. Declaration public static void Flip(Arr src, Arr dst = null, FlipMode flipMode = default(FlipMode)) Parameters Type Name Description Arr src The source array. Arr dst The destination array. If it is null , the flipping is done in place. FlipMode flipMode A value that specifies how to flip the array. | Improve this Doc View Source FloodFill(Arr, Point, Scalar) Fills a connected component with the given color. Declaration public static void FloodFill(Arr image, Point seedPoint, Scalar newVal) Parameters Type Name Description Arr image Input/output 1- or 3-channel, 8-bit or floating-point image. It is modified by the function unless MaskOnly is set. Point seedPoint The starting point. Scalar newVal New value of the repainted domain pixels. | Improve this Doc View Source FloodFill(Arr, Point, Scalar, Scalar) Fills a connected component with the given color. Declaration public static void FloodFill(Arr image, Point seedPoint, Scalar newVal, Scalar lowerDiff) Parameters Type Name Description Arr image Input/output 1- or 3-channel, 8-bit or floating-point image. It is modified by the function unless MaskOnly is set. Point seedPoint The starting point. Scalar newVal New value of the repainted domain pixels. Scalar lowerDiff Maximal lower brightness/color difference between the currently observed pixel and one of its neighbors belonging to the component, or a seed pixel being added to the component. | Improve this Doc View Source FloodFill(Arr, Point, Scalar, Scalar, Scalar) Fills a connected component with the given color. Declaration public static void FloodFill(Arr image, Point seedPoint, Scalar newVal, Scalar lowerDiff, Scalar upperDiff) Parameters Type Name Description Arr image Input/output 1- or 3-channel, 8-bit or floating-point image. It is modified by the function unless MaskOnly is set. Point seedPoint The starting point. Scalar newVal New value of the repainted domain pixels. Scalar lowerDiff Maximal lower brightness/color difference between the currently observed pixel and one of its neighbors belonging to the component, or a seed pixel being added to the component. Scalar upperDiff Maximal upper brightness/color difference between the currently observed pixel and one of its neighbors belonging to the component, or a seed pixel being added to the component. | Improve this Doc View Source FloodFill(Arr, Point, Scalar, Scalar, Scalar, out ConnectedComp, FloodFillFlags, Arr) Fills a connected component with the given color. Declaration public static void FloodFill(Arr image, Point seedPoint, Scalar newVal, Scalar lowerDiff, Scalar upperDiff, out ConnectedComp comp, FloodFillFlags flags = default(FloodFillFlags), Arr mask = null) Parameters Type Name Description Arr image Input/output 1- or 3-channel, 8-bit or floating-point image. It is modified by the function unless MaskOnly is set. Point seedPoint The starting point. Scalar newVal New value of the repainted domain pixels. Scalar lowerDiff Maximal lower brightness/color difference between the currently observed pixel and one of its neighbors belonging to the component, or a seed pixel being added to the component. Scalar upperDiff Maximal upper brightness/color difference between the currently observed pixel and one of its neighbors belonging to the component, or a seed pixel being added to the component. ConnectedComp comp Output parameter that will be initialized with information about the repainted domain. FloodFillFlags flags The operation flags. Arr mask Operation mask, should be a single-channel 8-bit image, 2 pixels wider and 2 pixels taller than image . | Improve this Doc View Source Free(ref IntPtr) Deallocates a block of memory previously allocated by a call to Alloc(UIntPtr) . Declaration public static void Free(ref IntPtr ptr) Parameters Type Name Description IntPtr ptr Pointer to a memory block previously allocated with Alloc(UIntPtr) . | Improve this Doc View Source GEMM(Arr, Arr, Double, Arr, Double, Arr, GemmFlags) Performs generalized matrix multiplication. Declaration public static void GEMM(Arr src1, Arr src2, double alpha, Arr src3, double beta, Arr dst, GemmFlags tABC = default(GemmFlags)) Parameters Type Name Description Arr src1 The first source array. Arr src2 The second source array. Double alpha A scale factor for the multiplication. Arr src3 The third source array (shift). Can be null , if there is no shift. Double beta A scale factor for the shift. Arr dst The destination array. GemmFlags tABC The operation flags, used to indicate whether any of the inputs should be transposed. | Improve this Doc View Source GetAffineTransform(Point2f[], Point2f[], Mat) Calculates the affine transform from three corresponding points. Declaration public static Mat GetAffineTransform(Point2f[] src, Point2f[] dst, Mat mapMatrix) Parameters Type Name Description Point2f [] src Coordinates of three triangle vertices in the source image. Point2f [] dst Coordinates of the three corresponding triangle vertices in the destination image. Mat mapMatrix The destination 2 x 3 transformation matrix. Returns Type Description Mat The destination 2 x 3 transformation matrix. | Improve this Doc View Source GetOptimalDFTSize(Int32) Returns optimal DFT size for a given vector size. Declaration public static int GetOptimalDFTSize(int size0) Parameters Type Name Description Int32 size0 The vector size. Returns Type Description Int32 The minimum number N that is greater than or equal to size0 , such that the DFT of a vector of size N can be computed fast. | Improve this Doc View Source GetOptimalNewCameraMatrix(Mat, Mat, Size, Double, Mat) Returns the new camera matrix based on the free scaling parameter. Declaration public static void GetOptimalNewCameraMatrix(Mat cameraMatrix, Mat distCoeffs, Size imageSize, double alpha, Mat newCameraMatrix) Parameters Type Name Description Mat cameraMatrix The input camera matrix. Mat distCoeffs The input 4x1, 1x4, 5x1 or 1x5 vector of distortion coefficients (k1, k2, p1, p2[, k3]). If the vector is null , the zero distortion coefficients are assumed. Size imageSize The original image size. Double alpha The free scaling parameter between 0 (when all the pixels in the undistorted image will be valid) and 1 (when all the source image pixels will be retained in the undistorted image); see StereoRectify(Mat, Mat, Mat, Mat, Size, Mat, Mat, Mat, Mat, Mat, Mat, Mat, StereoRectificationFlags, Double, Size) . Mat newCameraMatrix The output new camera matrix. | Improve this Doc View Source GetOptimalNewCameraMatrix(Mat, Mat, Size, Double, Mat, Size) Returns the new camera matrix based on the free scaling parameter. Declaration public static void GetOptimalNewCameraMatrix(Mat cameraMatrix, Mat distCoeffs, Size imageSize, double alpha, Mat newCameraMatrix, Size newImageSize) Parameters Type Name Description Mat cameraMatrix The input camera matrix. Mat distCoeffs The input 4x1, 1x4, 5x1 or 1x5 vector of distortion coefficients (k1, k2, p1, p2[, k3]). If the vector is null , the zero distortion coefficients are assumed. Size imageSize The original image size. Double alpha The free scaling parameter between 0 (when all the pixels in the undistorted image will be valid) and 1 (when all the source image pixels will be retained in the undistorted image); see StereoRectify(Mat, Mat, Mat, Mat, Size, Mat, Mat, Mat, Mat, Mat, Mat, Mat, StereoRectificationFlags, Double, Size) . Mat newCameraMatrix The output new camera matrix. Size newImageSize The image size after rectification. By default it will be set to imageSize . | Improve this Doc View Source GetOptimalNewCameraMatrix(Mat, Mat, Size, Double, Mat, Size, out Rect, Boolean) Returns the new camera matrix based on the free scaling parameter. Declaration public static void GetOptimalNewCameraMatrix(Mat cameraMatrix, Mat distCoeffs, Size imageSize, double alpha, Mat newCameraMatrix, Size newImageSize, out Rect validPixelROI, bool centerPrincipalPoint = false) Parameters Type Name Description Mat cameraMatrix The input camera matrix. Mat distCoeffs The input 4x1, 1x4, 5x1 or 1x5 vector of distortion coefficients (k1, k2, p1, p2[, k3]). If the vector is null , the zero distortion coefficients are assumed. Size imageSize The original image size. Double alpha The free scaling parameter between 0 (when all the pixels in the undistorted image will be valid) and 1 (when all the source image pixels will be retained in the undistorted image); see StereoRectify(Mat, Mat, Mat, Mat, Size, Mat, Mat, Mat, Mat, Mat, Mat, Mat, StereoRectificationFlags, Double, Size) . Mat newCameraMatrix The output new camera matrix. Size newImageSize The image size after rectification. By default it will be set to imageSize . Rect validPixelROI The optional output rectangle that will outline all-good-pixels region in the undistorted image. Boolean centerPrincipalPoint Optional flag that indicates whether in the new camera matrix the principal point should be at the image center or not. By default, the principal point is chosen to best fit a subset of the source image (determined by alpha) to the corrected image. | Improve this Doc View Source GetPerspectiveTransform(Point2f[], Point2f[], Mat) Calculates the perspective transform from four corresponding points. Declaration public static Mat GetPerspectiveTransform(Point2f[] src, Point2f[] dst, Mat mapMatrix) Parameters Type Name Description Point2f [] src Coordinates of four quadrangle vertices in the source image. Point2f [] dst Coordinates of the four corresponding quadrangle vertices in the destination image. Mat mapMatrix The destination 3 x 3 transformation matrix. Returns Type Description Mat The destination 3 x 3 transformation matrix. | Improve this Doc View Source GetQuadrangleSubPix(Arr, Arr, Mat) Retrieves the pixel quadrangle from an image with sub-pixel accuracy. Declaration public static void GetQuadrangleSubPix(Arr src, Arr dst, Mat mapMatrix) Parameters Type Name Description Arr src The source image. Arr dst The destination image containing the extracted quadrangle. Mat mapMatrix The 2 x 3 transformation matrix. | Improve this Doc View Source GetRectSubPix(Arr, Arr, Point2f) Retrieves the pixel rectangle from an image with sub-pixel accuracy. Declaration public static void GetRectSubPix(Arr src, Arr dst, Point2f center) Parameters Type Name Description Arr src The source image. Arr dst The destination image containing the extracted rectangle. Point2f center Floating point coordinates of the extracted rectangle center within the source image. The center must be inside the image. | Improve this Doc View Source GetRotationMatrix2D(Point2f, Double, Double, Mat) Calculates the affine matrix of 2d rotation. Declaration public static Mat GetRotationMatrix2D(Point2f center, double angle, double scale, Mat mapMatrix) Parameters Type Name Description Point2f center Center of the rotation in the source image. Double angle The rotation angle in degrees. Positive values mean counter-clockwise rotation (the coordinate origin is assumed to be the top-left corner). Double scale Isotropic scale factor. Mat mapMatrix The destination 2 x 3 transformation matrix. Returns Type Description Mat The destination 2 x 3 transformation matrix. | Improve this Doc View Source GetTextSize(String, Font, out Size, out Int32) Retrieves the width and height of a text string. Declaration public static void GetTextSize(string text, Font font, out Size textSize, out int baseline) Parameters Type Name Description String text The input string that is to be measured. Font font The font style used to render the text strokes. Size textSize The resultant size of the text string. Height of the text does not include the height of character parts that are below the baseline. Int32 baseline The y-coordinate of the baseline relative to the bottom-most text point. | Improve this Doc View Source GoodFeaturesToTrack(Arr, Arr, Arr, Point2f[], out Int32, Double, Double, Arr, Int32, Boolean, Double) Determines strong corners on an image. Declaration public static void GoodFeaturesToTrack(Arr image, Arr eigImage, Arr tempImage, Point2f[] corners, out int cornerCount, double qualityLevel, double minDistance, Arr mask = null, int blockSize = 3, bool useHarris = false, double k = 0.04) Parameters Type Name Description Arr image The source 8-bit or floating-point 32-bit, single-channel image. Arr eigImage Temporary floating-point 32-bit image, the same size as image . Arr tempImage Another temporary image, the same size and format as eigImage . Point2f [] corners Output parameter; detected corners. Int32 cornerCount Output parameter; number of detected corners. Double qualityLevel Multiplier for the max/min eigenvalue; specifies the minimal accepted quality of image corners. Double minDistance Limit, specifying the minimum possible distance between the returned corners; Euclidian distance is used. Arr mask Region of interest. The function selects points either in the specified region or in the whole image if the mask is null . Int32 blockSize Size of the averaging block, passed to the underlying corner detection method. Boolean useHarris If true , Harris operator ( CornerHarris(Arr, Arr, Int32, Int32, Double) ) is used instead of default ( CornerMinEigenVal(Arr, Arr, Int32, Int32) ). Double k Free parameter of Harris detector; used only if useHarris is true . | Improve this Doc View Source HoughCircles(Arr, CVHandle, HoughCirclesMethod, Double, Double, Double, Double, Int32, Int32) Finds circles in a grayscale image using a Hough transform. Declaration public static Seq HoughCircles(Arr image, CVHandle circleStorage, HoughCirclesMethod method, double dp, double minDist, double param1, double param2, int minRadius, int maxRadius) Parameters Type Name Description Arr image The 8-bit, single-channel, grayscale input image. CVHandle circleStorage The storage for the circles that are detected. It can be a memory storage (in this case a sequence of circles is created in the storage and returned by the function) or single row/single column matrix ( Mat ) of a particular type. HoughCirclesMethod method The Hough transform method. Currently, only Gradient is implemented. Double dp The inverse ratio of the accumulator resolution to the image resolution. For example, if dp = 1, the accumulator will have the same resolution as the input image, if dp = 2 the accumulator will have half as big width and height, etc. Double minDist Minimum distance between the centers of the detected circles. If the parameter is too small, multiple neighbor circles may be falsely detected in addition to a true one. If it is too large, some circles may be missed. Double param1 The first method-specific parameter. in the case of Gradient it is the higher threshold of the two passed to the canny edge detector (the lower one will be twice smaller). Double param2 The second method-specific parameter. in the case of Gradient it is the accumulator threshold at the center detection stage. The smaller it is, the more false circles may be detected. Circles, corresponding to the larger accumulator values, will be returned first. Int32 minRadius Minimum circle radius. Int32 maxRadius Maximum circle radius. Returns Type Description Seq A sequence of lines in case circleStorage is a memory storage. | Improve this Doc View Source HoughLines2(Arr, CVHandle, HoughLinesMethod, Double, Double, Int32, Double, Double) Finds lines in a binary image using a Hough transform. Declaration public static Seq HoughLines2(Arr image, CVHandle lineStorage, HoughLinesMethod method, double rho, double theta, int threshold, double param1, double param2) Parameters Type Name Description Arr image The 8-bit, single-channel, binary source image. In the case of a probabilistic method, the image is modified by the function. CVHandle lineStorage The storage for the lines that are detected. It can be a memory storage (in this case a sequence of lines is created in the storage and returned by the function) or single row/single column matrix ( Mat ) of a particular type. HoughLinesMethod method The Hough transform variant. Double rho Distance resolution in pixel-related units. Double theta Angle resolution measured in radians. Int32 threshold Threshold parameter. A line is returned by the function if the corresponding accumulator value is greater than threshold . Double param1 The first method-dependent parameter. For the classical Hough transform it is not used. For the probabilistic Hough transform it is the minimum line length. For the multi-scale Hough transform it is the divisor for the distance resolution rho . Double param2 The second method-dependent parameter. For the classical Hough transform it is not used. For the probabilistic Hough transform it is the maximum gap between line segments lying on the same line to treat them as a single line segment (i.e. to join them). For the multi-scale Hough transform it is the divisor for the angle resolution theta . Returns Type Description Seq A sequence of lines in case lineStorage is a memory storage. | Improve this Doc View Source InitIntrinsicParams2D(Mat, Mat, Mat, Size, Mat, Double) Finds the initial camera matrix from the 3D-2D point correspondences. Declaration public static void InitIntrinsicParams2D(Mat objectPoints, Mat imagePoints, Mat npoints, Size imageSize, Mat cameraMatrix, double aspectRatio = null) Parameters Type Name Description Mat objectPoints The joint array of object points; see CalibrateCamera2(Mat, Mat, Mat, Size, Mat, Mat, Mat, Mat, CameraCalibrationFlags) . Mat imagePoints The joint array of object point projections; see CalibrateCamera2(Mat, Mat, Mat, Size, Mat, Mat, Mat, Mat, CameraCalibrationFlags) . Mat npoints The array of point counts; see CalibrateCamera2(Mat, Mat, Mat, Size, Mat, Mat, Mat, Mat, CameraCalibrationFlags) . Size imageSize The image size in pixels; used to initialize the principal point. Mat cameraMatrix The output camera matrix A = [fx 0 cx; 0 fy cy; 0 0 1]. Double aspectRatio If it is zero or negative, both fx and fy are estimated independently. Otherwise fx = fy * aspectRatio . | Improve this Doc View Source InitUndistortMap(Mat, Mat, Arr, Arr) Computes an undistortion map. Declaration public static void InitUndistortMap(Mat cameraMatrix, Mat distortionCoeffs, Arr mapx, Arr mapy) Parameters Type Name Description Mat cameraMatrix The input camera matrix. Mat distortionCoeffs The 4 or 5 element vector of distortion coefficients. Arr mapx The output map of x-coordinates, 32-bit single-channel floating-point image or 16-bit 2-channel signed integer image. Fixed-point version is faster. Arr mapy The output map of y-coordinates, 32-bit single-channel floating-point image or 16-bit single-channel unsigned integer image. Fixed-point version is faster. | Improve this Doc View Source InitUndistortRectifyMap(Mat, Mat, Mat, Mat, Arr, Arr) Computes the undistortion and rectification transformation map. Declaration public static void InitUndistortRectifyMap(Mat cameraMatrix, Mat distortionCoeffs, Mat R, Mat newCameraMatrix, Arr mapx, Arr mapy) Parameters Type Name Description Mat cameraMatrix The input camera matrix. Mat distortionCoeffs The 4 or 5 element vector of distortion coefficients. Mat R The optional rectification transformation in object space (3x3 matrix). If it is null the identity transform is used. Mat newCameraMatrix The new camera matrix. Arr mapx The output map of x-coordinates, 32-bit single-channel floating-point image or 16-bit 2-channel signed integer image. Fixed-point version is faster. Arr mapy The output map of y-coordinates, 32-bit single-channel floating-point image or 16-bit single-channel unsigned integer image. Fixed-point version is faster. | Improve this Doc View Source Inpaint(Arr, Arr, Arr, Double, InpaintMethod) Restores the selected region in an image using the region neighborhood. Declaration public static void Inpaint(Arr src, Arr inpaintMask, Arr dst, double inpaintRange, InpaintMethod flags) Parameters Type Name Description Arr src Input 8-bit 1-channel or 3-channel image. Arr inpaintMask Inpainting mask, 8-bit 1-channel image. Non-zero pixels indicate the area that needs to be inpainted. Arr dst Output image with the same size and type as src . Double inpaintRange Radius of a circular neighborhood of each point inpainted that is considered by the algorithm. InpaintMethod flags Specifies the inpainting method. | Improve this Doc View Source InRange(Arr, Arr, Arr, Arr) Checks that array elements lie between the elements of two other arrays. Declaration public static void InRange(Arr src, Arr lower, Arr upper, Arr dst) Parameters Type Name Description Arr src The input array. Arr lower The inclusive lower boundary array. Arr upper The exclusive upper boundary array. Arr dst The destination array. It must have U8 or S8 type. | Improve this Doc View Source InRangeS(Arr, Scalar, Scalar, Arr) Checks that array elements lie between two scalars. Declaration public static void InRangeS(Arr src, Scalar lower, Scalar upper, Arr dst) Parameters Type Name Description Arr src The input array. Scalar lower The inclusive lower boundary. Scalar upper The exclusive upper boundary. Arr dst The destination array. It must have U8 or S8 type. | Improve this Doc View Source Integral(Arr, Arr, Arr, Arr) Calculates the integral of an image. Declaration public static void Integral(Arr image, Arr sum, Arr sqsum = null, Arr tiltedSum = null) Parameters Type Name Description Arr image The source image, W x H, 8-bit or floating-point (32f or 64f). Arr sum The integral image, (W + 1) x (H + 1), 32-bit integer or double precision floating-point (64f). Arr sqsum The optional integral image for squared pixel values, (W + 1) x (H + 1), double precision floating-point (64f). Arr tiltedSum The integral for the image rotated by 45 degrees, the same data type as sum . | Improve this Doc View Source Invert(Arr, Arr, InversionMethod) Finds the inverse or pseudo-inverse of a matrix. Declaration public static double Invert(Arr src, Arr dst, InversionMethod method = default(InversionMethod)) Parameters Type Name Description Arr src The source matrix. Arr dst The destination matrix. InversionMethod method The inversion method. Returns Type Description Double The inversed condition of src (ratio of the smallest singular value to the largest singular value) or 0 if src is all zeros. | Improve this Doc View Source KMeans2(Arr, Int32, Arr, TermCriteria, Int32) Finds centers of clusters and groups input samples around the clusters. Declaration public static int KMeans2(Arr samples, int clusterCount, Arr labels, TermCriteria criteria, int attempts = 1) Parameters Type Name Description Arr samples The floating-point matrix of input samples, one row per sample. Int32 clusterCount The number of clusters to split the set by. Arr labels The input/output integer array that stores the cluster indices for every sample. TermCriteria criteria The algorithm termination criteria, that is, the maximum number of iterations and/or the desired accuracy. Int32 attempts Specifies the number of times the algorithm is executed using different initial labelings. The algorithm returns the labels that yield the best compactness (see the last parameter). Returns Type Description Int32 The compactness measure for the best clustering attempt. | Improve this Doc View Source KMeans2(Arr, Int32, Arr, TermCriteria, Int32, ref UInt64, KMeansFlags, Arr) Finds centers of clusters and groups input samples around the clusters. Declaration public static int KMeans2(Arr samples, int clusterCount, Arr labels, TermCriteria criteria, int attempts, ref ulong rng, KMeansFlags flags = default(KMeansFlags), Arr centers = null) Parameters Type Name Description Arr samples The floating-point matrix of input samples, one row per sample. Int32 clusterCount The number of clusters to split the set by. Arr labels The input/output integer array that stores the cluster indices for every sample. TermCriteria criteria The algorithm termination criteria, that is, the maximum number of iterations and/or the desired accuracy. Int32 attempts Specifies the number of times the algorithm is executed using different initial labelings. The algorithm returns the labels that yield the best compactness (see the last parameter). UInt64 rng The random number generator state initialized by Rng(Int64) . KMeansFlags flags The operation flags for the k-means algorithm. Arr centers The output matrix of the cluster centers, one row per each cluster center. Returns Type Description Int32 The compactness measure for the best clustering attempt. | Improve this Doc View Source KMeans2(Arr, Int32, Arr, TermCriteria, Int32, ref UInt64, KMeansFlags, Arr, out Double) Finds centers of clusters and groups input samples around the clusters. Declaration public static int KMeans2(Arr samples, int clusterCount, Arr labels, TermCriteria criteria, int attempts, ref ulong rng, KMeansFlags flags, Arr centers, out double compactness) Parameters Type Name Description Arr samples The floating-point matrix of input samples, one row per sample. Int32 clusterCount The number of clusters to split the set by. Arr labels The input/output integer array that stores the cluster indices for every sample. TermCriteria criteria The algorithm termination criteria, that is, the maximum number of iterations and/or the desired accuracy. Int32 attempts Specifies the number of times the algorithm is executed using different initial labelings. The algorithm returns the labels that yield the best compactness (see the last parameter). UInt64 rng The random number generator state initialized by Rng(Int64) . KMeansFlags flags The operation flags for the k-means algorithm. Arr centers The output matrix of the cluster centers, one row per each cluster center. Double compactness When this method returns, contains the compactness measure for the best clustering attempt. Returns Type Description Int32 The compactness measure for the best clustering attempt. | Improve this Doc View Source Laplace(Arr, Arr, Int32) Calculates the Laplacian of an image. Declaration public static void Laplace(Arr src, Arr dst, int apertureSize = 3) Parameters Type Name Description Arr src The source image. Arr dst The destination image. Int32 apertureSize Size of the extended Sobel kernel used to compute derivatives, must be 1, 3, 5 or 7. | Improve this Doc View Source Line(Arr, Point, Point, Scalar, Int32, LineFlags, Int32) Draws a line segment connecting two points. Declaration public static void Line(Arr img, Point pt1, Point pt2, Scalar color, int thickness = 1, LineFlags lineType = default(LineFlags), int shift = 0) Parameters Type Name Description Arr img The image on which to draw. Point pt1 The first point of the line segment. Point pt2 The second point of the line segment. Scalar color The color of the line. Int32 thickness The thickness of the line. LineFlags lineType The algorithm used to draw the line. Int32 shift The number of fractional bits in the point coordinates. | Improve this Doc View Source LinearPolar(Arr, Arr, Point2f, Double, WarpFlags) Performs forward or inverse linear-polar image transform. The function emulates human \"foveal\" vision. In-place operation is not supported. Declaration public static void LinearPolar(Arr src, Arr dst, Point2f center, double maxRadius, WarpFlags flags = default(WarpFlags)) Parameters Type Name Description Arr src The source image. Arr dst The destination image. Point2f center The transformation center; where the output precision is maximal. Double maxRadius The maximum radius of polar transformation. WarpFlags flags A combination of interpolation methods and operational flags. | Improve this Doc View Source LineIterator(Arr, Point, Point, LineType, Boolean) Steps through all image points on the raster line between pt1 and pt2 . Declaration public static IEnumerable<Scalar> LineIterator(Arr image, Point pt1, Point pt2, LineType connectivity = default(LineType), bool leftToRight = false) Parameters Type Name Description Arr image The image to sample the line from. Point pt1 The first ending point of the line segment. Point pt2 The second ending point of the line segment. LineType connectivity The scanned line connectivity for Bresenham's algorithm, either 4 or 8. Boolean leftToRight If true the line is scanned from the leftmost point to the rightmost point, otherwise it will be scanned in the specified order, from pt1 to pt2 . Returns Type Description IEnumerable < Scalar > An whose elements are the result of scanning the image points along the raster line between pt1 and pt2 . | Improve this Doc View Source Load<TElement>(String, MemStorage, String) Loads an object from a file. Declaration public static TElement Load<TElement>(string fileName, MemStorage storage = null, string name = null) where TElement : CVHandle Parameters Type Name Description String fileName The file path to be loaded. MemStorage storage Memory storage for dynamic structures, such as Seq or Graph . It is not used for matrices or images. String name Optional object name. If it is null , the first top-level object in the storage will be loaded. Returns Type Description TElement The loaded object instance. Type Parameters Name Description TElement The type of object to load. | Improve this Doc View Source Load<TElement>(String, MemStorage, String, out String) Loads an object from a file. Declaration public static TElement Load<TElement>(string fileName, MemStorage storage, string name, out string realName) where TElement : CVHandle Parameters Type Name Description String fileName The file path to be loaded. MemStorage storage Memory storage for dynamic structures, such as Seq or Graph . It is not used for matrices or images. String name Optional object name. If it is null , the first top-level object in the storage will be loaded. String realName Optional output parameter that will contain the name of the loaded object. Returns Type Description TElement The loaded object instance. Type Parameters Name Description TElement The type of object to load. | Improve this Doc View Source LoadImage(String, LoadImageFlags) Loads an image from a file as an IplImage . Declaration public static IplImage LoadImage(string fileName, LoadImageFlags colorType) Parameters Type Name Description String fileName Name of file to be loaded. LoadImageFlags colorType Specific color type of the loaded image. Returns Type Description IplImage The newly loaded image. | Improve this Doc View Source LoadImageM(String, LoadImageFlags) Loads an image from a file as a Mat . Declaration public static Mat LoadImageM(string fileName, LoadImageFlags colorType) Parameters Type Name Description String fileName Name of file to be loaded. LoadImageFlags colorType Specific color type of the loaded image. Returns Type Description Mat The newly loaded image. | Improve this Doc View Source Log(Arr, Arr) Calculates the natural logarithm of every array element’s absolute value. Declaration public static void Log(Arr src, Arr dst) Parameters Type Name Description Arr src The source array. Arr dst The destination array, it should have double type or the same type as src . | Improve this Doc View Source LogPolar(Arr, Arr, Point2f, Double, WarpFlags) Performs forward or inverse log-polar image transform. The function emulates human \"foveal\" vision. In-place operation is not supported. Declaration public static void LogPolar(Arr src, Arr dst, Point2f center, double M, WarpFlags flags = default(WarpFlags)) Parameters Type Name Description Arr src The source image. Arr dst The destination image. Point2f center The transformation center; where the output precision is maximal. Double M Magnitude scale parameter for polar transformation. WarpFlags flags A combination of interpolation methods and operational flags. | Improve this Doc View Source LUT(Arr, Arr, Arr) Performs a look-up transformation of the source array. Declaration public static void LUT(Arr src, Arr dst, Arr lut) Parameters Type Name Description Arr src The input array. Arr dst The destination array. Arr lut The look-up table array. Elements of src are used as indices in this 256-element table. | Improve this Doc View Source Mahalanobis(Arr, Arr, Arr) Calculates the Mahalonobis distance between two vectors. Declaration public static double Mahalanobis(Arr vec1, Arr vec2, Arr mat) Parameters Type Name Description Arr vec1 The first 1D source vector. Arr vec2 The second 1D source vector. Arr mat The inverse covariance matrix. Returns Type Description Double The weighted Mahalanobis distance between two vectors. | Improve this Doc View Source MatchShapes(CVHandle, CVHandle, ShapeMatchingMethod, Double) Compares two shapes using their Hu moments. Declaration public static double MatchShapes(CVHandle object1, CVHandle object2, ShapeMatchingMethod method, double parameter = null) Parameters Type Name Description CVHandle object1 First contour or grayscale image. CVHandle object2 Second contour or grayscale image. ShapeMatchingMethod method The shape comparison method. Double parameter Method-specific parameter (not used). Returns Type Description Double The distance between the two shapes. | Improve this Doc View Source MatchTemplate(Arr, Arr, Arr, TemplateMatchingMethod) Compares a template against overlapped image regions. Declaration public static void MatchTemplate(Arr image, Arr templ, Arr result, TemplateMatchingMethod method) Parameters Type Name Description Arr image The image where the search is running; should be 8-bit or 32-bit floating-point. Arr templ Searched template; must not be greater than image and have the same data type. Arr result A map of comparison results; single-channel 32-bit floating-point. TemplateMatchingMethod method Specifies the way the template must be compared with the image regions. | Improve this Doc View Source MatMul(Arr, Arr, Arr) Performs generalized matrix multiplication. Declaration public static void MatMul(Arr src1, Arr src2, Arr dst) Parameters Type Name Description Arr src1 The first source array. Arr src2 The second source array. Arr dst The destination array. | Improve this Doc View Source MatMulAdd(Arr, Arr, Arr, Arr) Performs generalized matrix multiplication. Declaration public static void MatMulAdd(Arr src1, Arr src2, Arr src3, Arr dst) Parameters Type Name Description Arr src1 The first source array. Arr src2 The second source array. Arr src3 The third source array (shift). Can be null , if there is no shift. Arr dst The destination array. | Improve this Doc View Source Max(Arr, Arr, Arr) Finds per-element maximum of two arrays. Declaration public static void Max(Arr src1, Arr src2, Arr dst) Parameters Type Name Description Arr src1 The first input array. Arr src2 The second input array. Arr dst The destination array. | Improve this Doc View Source MaxRect(Rect, Rect) Finds minimum rectangle containing two given rectangles. Declaration public static Rect MaxRect(Rect rect1, Rect rect2) Parameters Type Name Description Rect rect1 The first rectangle. Rect rect2 The second rectangle. Returns Type Description Rect The minimum rectangle containing rect1 and rect2 . | Improve this Doc View Source MaxS(Arr, Double, Arr) Finds per-element maximum of array and scalar. Declaration public static void MaxS(Arr src, double value, Arr dst) Parameters Type Name Description Arr src The input array. Double value The scalar input value. Arr dst The destination array. | Improve this Doc View Source MeanShift(Arr, Rect, TermCriteria, out ConnectedComp) Finds the object center on back projection. Declaration public static bool MeanShift(Arr probImage, Rect window, TermCriteria criteria, out ConnectedComp comp) Parameters Type Name Description Arr probImage Back projection of object histogram (see CalcArrBackProject(Arr[], Arr) ). Rect window Initial search window. TermCriteria criteria Criteria applied to determine when the window search should be finished. ConnectedComp comp Resultant structure that contains the converged search window coordinates ( Rect field) and the sum of all of the pixels inside the window ( Area field). Returns Type Description Boolean true if the search was successful; false otherwise. | Improve this Doc View Source Merge(Arr, Arr, Arr, Arr, Arr) Composes a multi-channel array from several single-channel arrays or inserts a single channel into the array. Declaration public static void Merge(Arr src0, Arr src1, Arr src2, Arr src3, Arr dst) Parameters Type Name Description Arr src0 The first input channel array. Arr src1 The second input channel array. Arr src2 The third input channel array. Arr src3 The fourth input channel array. Arr dst The destination array. Remarks The function is the opposite to Split(Arr, Arr, Arr, Arr, Arr) . If the destination array has N channels then if the first N input channels are not null , they all are copied to the destination array; if only a single source channel of the first N is not null , this particular channel is copied into the destination array; otherwise an exception is raised. The rest of the source channels (beyond the first N) must always be null . For an IplImage instance, Copy(Arr, Arr, Arr) with COI set can also be used to insert a single channel into the image. | Improve this Doc View Source Min(Arr, Arr, Arr) Finds per-element minimum of two arrays. Declaration public static void Min(Arr src1, Arr src2, Arr dst) Parameters Type Name Description Arr src1 The first input array. Arr src2 The second input array. Arr dst The destination array. | Improve this Doc View Source MinAreaRect2(CVHandle, MemStorage) Finds the circumscribed rectangle of minimal area for a given 2D point set. Declaration public static RotatedRect MinAreaRect2(CVHandle points, MemStorage storage = null) Parameters Type Name Description CVHandle points Sequence or array of points. MemStorage storage Optional temporary memory storage. Returns Type Description RotatedRect The oriented rectangle with minimal area for the specified points . | Improve this Doc View Source MinEnclosingCircle(CVHandle, out Point2f, out Single) Finds the circumscribed circle of minimal area for a given 2D point set. Declaration public static bool MinEnclosingCircle(CVHandle points, out Point2f center, out float radius) Parameters Type Name Description CVHandle points Sequence or array of points. Point2f center Output parameter; the center of the enclosing circle. Single radius Output parameter; the radius of the enclosing circle. Returns Type Description Boolean true if the resulting circle contains all the input points and false otherwise. | Improve this Doc View Source MinMaxLoc(Arr, out Double, out Double) Finds global minimum and maximum in array or subarray. Declaration public static void MinMaxLoc(Arr arr, out double minValue, out double maxValue) Parameters Type Name Description Arr arr The source array, single-channel or multi-channel with COI set. Double minValue The returned minimum value. Double maxValue The returned maximum value. | Improve this Doc View Source MinMaxLoc(Arr, out Double, out Double, out Point) Finds global minimum and maximum in array or subarray. Declaration public static void MinMaxLoc(Arr arr, out double minValue, out double maxValue, out Point minLocation) Parameters Type Name Description Arr arr The source array, single-channel or multi-channel with COI set. Double minValue The returned minimum value. Double maxValue The returned maximum value. Point minLocation The returned minimum location. | Improve this Doc View Source MinMaxLoc(Arr, out Double, out Double, out Point, out Point, Arr) Finds global minimum and maximum in array or subarray. Declaration public static void MinMaxLoc(Arr arr, out double minValue, out double maxValue, out Point minLocation, out Point maxLocation, Arr mask = null) Parameters Type Name Description Arr arr The source array, single-channel or multi-channel with COI set. Double minValue The returned minimum value. Double maxValue The returned maximum value. Point minLocation The returned minimum location. Point maxLocation The returned maximum location. Arr mask The optional mask used to select a subarray. | Improve this Doc View Source MinS(Arr, Double, Arr) Finds per-element minimum of an array and a scalar. Declaration public static void MinS(Arr src, double value, Arr dst) Parameters Type Name Description Arr src The input array. Double value The scalar input value. Arr dst The destination array. | Improve this Doc View Source MixChannels(Arr[], Arr[], Int32[]) Copies specified channels from the input arrays to the specified channels of the output arrays. All matrices must have the same size and depth. Declaration public static void MixChannels(Arr[] src, Arr[] dst, int[] fromTo) Parameters Type Name Description Arr [] src The input arrays. Arr [] dst The output arrays. Int32 [] fromTo The array of index pairs, specifying which channels are copied and where. fromTo [k 2] is the 0-based index of the input channel in src and fromTo [k 2+1] is the index of the output channel in dst . Continuous channel numbering is used, i.e. the first input channels in src are indexed from 0 to src[0].Channels-1 , and the second input channels are indexed from src[0].Channels to src[0].Channels + src[1].Channels-1 . The same scheme is used for the output image channels. As a special case, negative output channel indices mean that the corresponding output channel is filled with zeros. Remarks This function is a generalized form of Split(Arr, Arr, Arr, Arr, Arr) and Merge(Arr, Arr, Arr, Arr, Arr) . It can be used to change the order of the planes, add/remove alpha channel, extract or insert a single plane or multiple planes, etc. | Improve this Doc View Source MorphologyEx(Arr, Arr, Arr, IplConvKernel, MorphologicalOperation, Int32) Performs advanced morphological transformations. Declaration public static void MorphologyEx(Arr src, Arr dst, Arr temp, IplConvKernel element, MorphologicalOperation operation, int iterations = 1) Parameters Type Name Description Arr src The source image. Arr dst The destination image. Arr temp Temporary image, required for Gradient and in-place operation of TopHat and BlackHat . IplConvKernel element The structuring element used for morphological transformation. MorphologicalOperation operation The type of morphological transformation applied. Int32 iterations The number of times erosion and dilation are applied. | Improve this Doc View Source Mul(Arr, Arr, Arr, Double) Calculates the per-element product of two arrays. Declaration public static void Mul(Arr src1, Arr src2, Arr dst, double scale = null) Parameters Type Name Description Arr src1 The first input array. Arr src2 The second input array. Arr dst The destination array. Double scale An optional scale factor. | Improve this Doc View Source MulSpectrums(Arr, Arr, Arr, DiscreteTransformFlags) Performs per-element multiplication of two Fourier spectrums. Declaration public static void MulSpectrums(Arr src1, Arr src2, Arr dst, DiscreteTransformFlags flags) Parameters Type Name Description Arr src1 The first source array. Arr src2 The second source array. Arr dst The destination array of the same type and size as the source arrays. DiscreteTransformFlags flags A combination of Rows and MultiplyConjugate . | Improve this Doc View Source MultiplyAcc(Arr, Arr, Arr, Arr) Adds the product of two input images to the accumulator. Declaration public static void MultiplyAcc(Arr image1, Arr image2, Arr acc, Arr mask = null) Parameters Type Name Description Arr image1 First input image, 1- or 3-channel, 8-bit or 32-bit floating point. Each channel of multi-channel image is processed independently. Arr image2 Second input image, the same format as the first one. Arr acc Accumulator with the same number of channels as input images, 32-bit or 64-bit floating-point. Arr mask Optional operation mask. | Improve this Doc View Source MulTransposed(Arr, Arr, Int32, Arr, Double) Calculates the product of an array and a transposed array. Declaration public static void MulTransposed(Arr src, Arr dst, int order, Arr delta = null, double scale = null) Parameters Type Name Description Arr src The source array. Arr dst The destination array. Must be of type F32 or F64. Int32 order The order of multipliers. Arr delta An optional array, subtracted from src before multiplication. Double scale An optional scale factor. | Improve this Doc View Source Norm(Arr, Arr, NormTypes, Arr) Calculates absolute array norm, absolute difference norm, or relative difference norm. Declaration public static double Norm(Arr arr1, Arr arr2 = null, NormTypes normType = default(NormTypes), Arr mask = null) Parameters Type Name Description Arr arr1 The first source image. Arr arr2 The second source image. If it is null , the absolute norm of arr1 is calculated, otherwise the absolute or relative norm of arr1 - arr2 is calculated. NormTypes normType The type of array norm. Arr mask The optional operation mask. Returns Type Description Double The absolute or relative array norm. | Improve this Doc View Source Normalize(Arr, Arr, Double, Double, NormTypes, Arr) Normalizes the array norm or the range. Declaration public static void Normalize(Arr src, Arr dst, double a = null, double b = null, NormTypes normType = default(NormTypes), Arr mask = null) Parameters Type Name Description Arr src The source array. Arr dst The destination array. Must have the same size as src . Double a The norm value to normalize to or the lower range boundary in the case of range normalization. Double b The upper range boundary in the case of range normalization; not used for norm normalization. NormTypes normType The normalization type. Arr mask The optional operation mask. | Improve this Doc View Source Not(Arr, Arr) Performs per-element bit-wise inversion of array elements. Declaration public static void Not(Arr src, Arr dst) Parameters Type Name Description Arr src The input array. Arr dst The destination array. | Improve this Doc View Source Or(Arr, Arr, Arr, Arr) Performs per-element bit-wise disjunction of two arrays. Declaration public static void Or(Arr src1, Arr src2, Arr dst, Arr mask = null) Parameters Type Name Description Arr src1 The first input array. Arr src2 The second input array. Arr dst The destination array. Arr mask Optional operation mask, 8-bit single-channel array specifying the elements that should be changed on dst . | Improve this Doc View Source OrS(Arr, Scalar, Arr, Arr) Performs per-element bit-wise disjunction of an array and a scalar. Declaration public static void OrS(Arr src, Scalar value, Arr dst, Arr mask = null) Parameters Type Name Description Arr src The input array. Scalar value The scalar input value. Arr dst The destination array. Arr mask Optional operation mask, 8-bit single-channel array specifying the elements that should be changed on dst . | Improve this Doc View Source PerspectiveTransform(Arr, Arr, Mat) Performs perspective matrix transformation of a vector array. Declaration public static void PerspectiveTransform(Arr src, Arr dst, Mat mat) Parameters Type Name Description Arr src The source three-channel floating-point array. Arr dst The destination three-channel floating-point array. Mat mat The 3x3 or 4x4 transformation matrix. | Improve this Doc View Source PointPolygonTest(CVHandle, Point2f, Boolean) Point in contour test. Declaration public static double PointPolygonTest(CVHandle contour, Point2f pt, bool measureDist) Parameters Type Name Description CVHandle contour Input contour. Point2f pt The point to be tested against the contour . Boolean measureDist If true the method estimates the distance from the point to the nearest contour edge. Otherwise, only the test result itself is stored. Returns Type Description Double If measureDist is true , the return value is a signed distance between the point and the nearest contour edge. Otherwise, +1, -1 and 0 are returned, respectively, when the point is inside the contour, outside or lies on an edge. | Improve this Doc View Source PolarToCart(Arr, Arr, Arr, Arr, Boolean) Calculates Cartesian coordinates of 2d vectors represented in polar form. Declaration public static void PolarToCart(Arr magnitude, Arr angle, Arr x, Arr y, bool angleInDegrees = false) Parameters Type Name Description Arr magnitude The array of magnitudes. If it is null , the magnitudes are assumed to be all ones. Arr angle The array of angles, whether in radians or degrees. Arr x The destination array of x-coordinates, may be set to null if it is not needed. Arr y The destination array of y-coordinates, may be set to null if it is not needed. Boolean angleInDegrees A value indicating whether the angles are measured in radians, which is the default mode, or in degrees. | Improve this Doc View Source PolyLine(Arr, Point[][], Boolean, Scalar, Int32, LineFlags, Int32) Draws one or more polygonal curves. Declaration public static void PolyLine(Arr img, Point[][] pts, bool isClosed, Scalar color, int thickness = 1, LineFlags lineType = default(LineFlags), int shift = 0) Parameters Type Name Description Arr img The image on which to draw. Point [][] pts The array of polygons to draw. Boolean isClosed A value indicating whether the polylines must be drawn closed. If closed, the function draws the line from the last vertex of every contour to the first vertex. Scalar color The color of the polygons. Int32 thickness The thickness of the polyline edges. LineFlags lineType The algorithm used to draw the polygon boundaries. Int32 shift The number of fractional bits in the vertex coordinates. | Improve this Doc View Source Pow(Arr, Arr, Double) Raises every array element to a power. Declaration public static void Pow(Arr src, Arr dst, double power) Parameters Type Name Description Arr src The source array. Arr dst The destination array, should be the same type as the source. Double power The exponent of power. | Improve this Doc View Source PreCornerDetect(Arr, Arr, Int32) Calculates the feature map for corner detection. Declaration public static void PreCornerDetect(Arr image, Arr corners, int apertureSize = 3) Parameters Type Name Description Arr image Input image. Arr corners Image to store the corner candidates. Int32 apertureSize Aperture parameter for the Sobel operator (see Sobel(Arr, Arr, Int32, Int32, Int32) ). | Improve this Doc View Source ProjectPCA(Arr, Arr, Arr, Arr) Projects vectors to the specified subspace. Declaration public static void ProjectPCA(Arr data, Arr mean, Arr eigenvects, Arr result) Parameters Type Name Description Arr data The input data array; each vector is either a single row or a single column. Arr mean The mean (average) vector. If it is a single-row vector, then inputs are stored as rows; otherwise, it should be a single-column vector and inputs will be stored as columns. Arr eigenvects The eigenvectors (principal components). One vector per row. Arr result The output matrix containing the projected vectors. | Improve this Doc View Source ProjectPoints2(Mat, Mat, Mat, Mat, Mat, Mat, Mat, Mat, Mat, Mat, Mat, Double) Projects 3D points to an image plane. Declaration public static void ProjectPoints2(Mat objectPoints, Mat rotationVector, Mat translationVector, Mat cameraMatrix, Mat distortionCoeffs, Mat imagePoints, Mat dpdrot = null, Mat dpdt = null, Mat dpdf = null, Mat dpdc = null, Mat dpddist = null, double aspectRatio = null) Parameters Type Name Description Mat objectPoints The array of object points, 3xN or Nx3 1-channel or 1xN or Nx1 3-channel, where N is the number of points in the view. Mat rotationVector The rotation vector of the points; see Rodrigues2(Mat, Mat, Mat) . Mat translationVector The translation vector of the points; see Rodrigues2(Mat, Mat, Mat) . Mat cameraMatrix The camera matrix A = [fx 0 cx; 0 fy cy; 0 0 1]. Mat distortionCoeffs The input vector of distortion coefficients of 4,5 or 8 elements. If it is null , the zero distortion coefficients are assumed. Mat imagePoints The output array of image points, 2xN or Nx2 1-channel or 1xN or Nx1 2-channel. Mat dpdrot Optional 2Nx3 matrix of derivatives of image points with respect to components of the rotation vector. Mat dpdt Optional 2Nx3 matrix of derivatives of image points with respect to components of the translation vector. Mat dpdf Optional 2Nx2 matrix of derivatives of image points with respect to fx and fy. Mat dpdc Optional 2Nx2 matrix of derivatives of image points with respect to cx and cy. Mat dpddist Optional 2Nx4 matrix of derivatives of image points with respect to the distortion coefficients. Double aspectRatio Optional “fixed aspect ratio” parameter. If the parameter is not 0, the function assumes that the aspect ratio (fx/fy) is fixed and correspondingly adjusts the jacobian matrix. | Improve this Doc View Source PutText(Arr, String, Point, Font, Scalar) Renders text strokes with the specified font and color at the specified location. Declaration public static void PutText(Arr img, string text, Point origin, Font font, Scalar color) Parameters Type Name Description Arr img The image on which to draw. String text The text string to print. Point origin The coordinates of the bottom-left corner of the first letter. Font font The font style used to render the text strokes. Scalar color The color of the text. | Improve this Doc View Source PyrDown(Arr, Arr, PyramidDecompositionFilter) Blurs an image and downsamples it. Declaration public static void PyrDown(Arr src, Arr dst, PyramidDecompositionFilter filter = default(PyramidDecompositionFilter)) Parameters Type Name Description Arr src The source image. Arr dst The destination image, with the same type as src . PyramidDecompositionFilter filter The type of filter used for convolution. | Improve this Doc View Source PyrMeanShiftFiltering(Arr, Arr, Double, Double, Int32) Performs initial step of meanshift segmentation of an image. Declaration public static void PyrMeanShiftFiltering(Arr src, Arr dst, double sp, double sr, int maxLevel = 1) Parameters Type Name Description Arr src The source 8-bit, 3-channel image. Arr dst The destination image of the same format and the same size as src . Double sp The spatial window radius. Double sr The color window radius. Int32 maxLevel Maximum level of the pyramid for the segmentation. | Improve this Doc View Source PyrMeanShiftFiltering(Arr, Arr, Double, Double, Int32, TermCriteria) Performs initial step of meanshift segmentation of an image. Declaration public static void PyrMeanShiftFiltering(Arr src, Arr dst, double sp, double sr, int maxLevel, TermCriteria termcrit) Parameters Type Name Description Arr src The source 8-bit, 3-channel image. Arr dst The destination image of the same format and the same size as src . Double sp The spatial window radius. Double sr The color window radius. Int32 maxLevel Maximum level of the pyramid for the segmentation. TermCriteria termcrit Termination criteria: when to stop meanshift iterations. | Improve this Doc View Source PyrUp(Arr, Arr, PyramidDecompositionFilter) Upsamples an image and then blurs it. Declaration public static void PyrUp(Arr src, Arr dst, PyramidDecompositionFilter filter = default(PyramidDecompositionFilter)) Parameters Type Name Description Arr src The source image. Arr dst The destination image, with the same type as src . PyramidDecompositionFilter filter The type of filter used for convolution. | Improve this Doc View Source RandArr(ref UInt64, Arr, RandDistribution, Scalar, Scalar) Fills an array with random numbers and updates the generator state. Declaration public static void RandArr(ref ulong rng, Arr arr, RandDistribution distType, Scalar param1, Scalar param2) Parameters Type Name Description UInt64 rng The random number generator state initialized by Rng(Int64) . Arr arr The destination array. RandDistribution distType The type of distribution used to generate random numbers. Scalar param1 The first parameter of the distribution. In the case of a uniform distribution it is the inclusive lower boundary of the random numbers range. In the case of a normal distribution it is the mean value of the random numbers. Scalar param2 The second parameter of the distribution. In the case of a uniform distribution it is the exclusive upper boundary of the random numbers range. In the case of a normal distribution it is the standard deviation of the random numbers. | Improve this Doc View Source RandInt(ref UInt64) Returns a random 32-bit unsigned integer and updates the generator state. Declaration public static uint RandInt(ref ulong rng) Parameters Type Name Description UInt64 rng The random number generator state initialized by Rng(Int64) . Returns Type Description UInt32 A uniformly-distributed random 32-bit unsigned integer. | Improve this Doc View Source RandReal(ref UInt64) Returns a floating-point random number and updates the generator state. Declaration public static double RandReal(ref ulong rng) Parameters Type Name Description UInt64 rng The random number generator state initialized by Rng(Int64) . Returns Type Description Double A uniformly-distributed random floating-point number between 0 inclusive and 1 exclusive. | Improve this Doc View Source RandShuffle(Arr, ref UInt64, Double) Shuffles the array elements randomly and updates the generator state. Declaration public static void RandShuffle(Arr mat, ref ulong rng, double iterFactor = null) Parameters Type Name Description Arr mat The source and destination array. The array is shuffled in place. UInt64 rng The random number generator state initialized by Rng(Int64) . Double iterFactor The scale factor that determines the number of random swap operations. | Improve this Doc View Source Range(Arr, Double, Double) Fills a matrix with the given range of numbers. Declaration public static Arr Range(Arr mat, double start, double end) Parameters Type Name Description Arr mat The matrix to initialize. It should be single-channel, 32-bit integer or floating-point. Double start The lower inclusive boundary of the range. Double end The upper exclusive boundary of the range. Returns Type Description Arr The source matrix if the operation was successful, null otherwise. | Improve this Doc View Source Rectangle(Arr, Point, Point, Scalar, Int32, LineFlags, Int32) Draws a simple, thick, or filled rectangle with the two opposite corners pt1 and pt2 . Declaration public static void Rectangle(Arr img, Point pt1, Point pt2, Scalar color, int thickness = 1, LineFlags lineType = default(LineFlags), int shift = 0) Parameters Type Name Description Arr img The image on which to draw. Point pt1 The first point of the line segment. Point pt2 The second point of the line segment. Scalar color The color of the rectangle. Int32 thickness The thickness of the lines that make up the rectangle if positive, otherwise this indicates that a filled rectangle is to be drawn. LineFlags lineType The algorithm used to draw the rectangle outline. Int32 shift The number of fractional bits in the point coordinates. | Improve this Doc View Source Rectangle(Arr, Rect, Scalar, Int32, LineFlags, Int32) Draws a simple, thick, or filled rectangle specified by a Rect structure. Declaration public static void Rectangle(Arr img, Rect rectangle, Scalar color, int thickness = 1, LineFlags lineType = default(LineFlags), int shift = 0) Parameters Type Name Description Arr img The image on which to draw. Rect rectangle The rectangle to draw. Scalar color The color of the rectangle. Int32 thickness The thickness of the lines that make up the rectangle if positive, otherwise this indicates that a filled rectangle is to be drawn. LineFlags lineType The algorithm used to draw the rectangle outline. Int32 shift The number of fractional bits in the rectangle coordinates. | Improve this Doc View Source Reduce(Arr, Arr, Int32, ReduceOperation) Reduces a matrix to a vector. Declaration public static void Reduce(Arr src, Arr dst, int dim = null, ReduceOperation op = ReduceOperation.Sum) Parameters Type Name Description Arr src The input matrix. Arr dst The output single-row/single-column vector that accumulates all the matrix rows/columns. Int32 dim The dimension index along which the matrix is reduced. 0 means that the matrix is reduced to a single row, 1 means that the matrix is reduced to a single column and -1 means that the dimension is chosen automatically by analysing the dst size. ReduceOperation op The reduction operation. | Improve this Doc View Source Remap(Arr, Arr, Arr, Arr, WarpFlags) Applies a generic geometrical transformation to the image. The method transforms the source image using the specified map for each individual pixel coordinates. Declaration public static void Remap(Arr src, Arr dst, Arr mapx, Arr mapy, WarpFlags flags = default(WarpFlags)) Parameters Type Name Description Arr src The source image. Arr dst The destination image. Arr mapx The map of x-coordinates, 32-bit single-channel floating-point image or 16-bit 2-channel signed integer image. Fixed-point version is faster. Arr mapy The map of y-coordinates, 32-bit single-channel floating-point image or 16-bit single-channel unsigned integer image. Fixed-point version is faster. WarpFlags flags A combination of interpolation methods and operational flags. | Improve this Doc View Source Remap(Arr, Arr, Arr, Arr, WarpFlags, Scalar) Applies a generic geometrical transformation to the image. The method transforms the source image using the specified map for each individual pixel coordinates. Declaration public static void Remap(Arr src, Arr dst, Arr mapx, Arr mapy, WarpFlags flags, Scalar fillval) Parameters Type Name Description Arr src The source image. Arr dst The destination image. Arr mapx The map of x-coordinates, 32-bit single-channel floating-point image or 16-bit 2-channel signed integer image. Arr mapy The map of y-coordinates, 32-bit single-channel floating-point image or 16-bit single-channel unsigned integer image. WarpFlags flags A combination of interpolation methods and operational flags. Scalar fillval A value used to fill outliers. | Improve this Doc View Source Repeat(Arr, Arr) Repeats the 2D source array in both horizontal and vertical directions to fill the destination array. Declaration public static void Repeat(Arr src, Arr dst) Parameters Type Name Description Arr src The source array. Arr dst The destination array. | Improve this Doc View Source ReprojectImageTo3D(Arr, Arr, Mat, Boolean) Reprojects disparity image to 3D space. Declaration public static void ReprojectImageTo3D(Arr disparityImage, Arr image3d, Mat Q, bool handleMissingValues) Parameters Type Name Description Arr disparityImage The input single-channel 16-bit signed or 32-bit floating-point disparity image. Arr image3d The output 3-channel floating-point image of the same size as disparity . Each element of image3d(x,y) will contain the 3D coordinates of the point (x,y), computed from the disparity map. Mat Q The 4x4 perspective transformation matrix that can be obtained with StereoRectify(Mat, Mat, Mat, Mat, Size, Mat, Mat, Mat, Mat, Mat, Mat, Mat, StereoRectificationFlags, Double) . Boolean handleMissingValues If true , the pixels with the minimal disparity (which correspond to the outliers; see FindStereoCorrespondence(Arr, Arr, Arr) ) will be transformed to 3D points with some very large Z value (currently set to 10000). | Improve this Doc View Source Resize(Arr, Arr, SubPixelInterpolation) Resizes an image. Declaration public static void Resize(Arr src, Arr dst, SubPixelInterpolation interpolation = default(SubPixelInterpolation)) Parameters Type Name Description Arr src The source image. Arr dst The destination image. SubPixelInterpolation interpolation The interpolation method. | Improve this Doc View Source Rng(Int64) Initializes a random number generator state. Declaration public static ulong Rng(long seed) Parameters Type Name Description Int64 seed A 64-bit value used to initiate a random sequence. Returns Type Description UInt64 The initialized random number generator state. | Improve this Doc View Source Rodrigues2(Mat, Mat, Mat) Converts a rotation matrix to a rotation vector or vice versa. Declaration public static bool Rodrigues2(Mat src, Mat dst, Mat jacobian = null) Parameters Type Name Description Mat src The input rotation vector (3x1 or 1x3) or rotation matrix (3x3). Mat dst The output rotation matrix (3x3) or rotation vector (3x1 or 1x3), respectively. Mat jacobian Optional output Jacobian matrix, 3x9 or 9x3; partial derivatives of the output array components with respect to the input array components. Returns Type Description Boolean A value indicating whether the conversion was successful. | Improve this Doc View Source RQDecomp3x3(Mat, Mat, Mat, Mat, Mat, Mat, Point3d[]) Computes the ‘RQ’ decomposition of 3x3 matrices. Declaration public static void RQDecomp3x3(Mat matrixM, Mat matrixR, Mat matrixQ, Mat matrixQx = null, Mat matrixQy = null, Mat matrixQz = null, Point3d[] eulerAngles = null) Parameters Type Name Description Mat matrixM The 3x3 input matrix. Mat matrixR The output 3x3 upper-triangular matrix. Mat matrixQ The output 3x3 orthogonal matrix. Mat matrixQx Optional output 3x3 rotation matrix around x-axis. Mat matrixQy Optional output 3x3 rotation matrix around y-axis. Mat matrixQz Optional output 3x3 rotation matrix around z-axis. Point3d [] eulerAngles Optional output array containing the three Euler angles of rotation. | Improve this Doc View Source RunningAvg(Arr, Arr, Double, Arr) Calculates the weighted sum of the input image image and the accumulator acc so that acc becomes a running average of frame sequence. Declaration public static void RunningAvg(Arr image, Arr acc, double alpha, Arr mask = null) Parameters Type Name Description Arr image Input image, 1- or 3-channel, 8-bit or 32-bit floating point. Each channel of multi-channel image is processed independently. Arr acc Accumulator with the same number of channels as input images, 32-bit or 64-bit floating-point. Double alpha Weight of the input image. This parameter regulates how fast the accumulator forgets about previous frames. Arr mask Optional operation mask. | Improve this Doc View Source SampleLine<TElement>(Arr, Point, Point, LineType) Samples the raster line elements. Declaration public static TElement[] SampleLine<TElement>(Arr image, Point pt1, Point pt2, LineType connectivity = default(LineType)) where TElement : struct Parameters Type Name Description Arr image The image to sample the line from. Point pt1 Starting line point. Point pt2 Ending line point. LineType connectivity The scanned line connectivity for Bresenham's algorithm, either 4 or 8. Returns Type Description TElement[] The buffer containing the sampled line elements. Type Parameters Name Description TElement The type of the elements in the image. | Improve this Doc View Source Save<TElement>(String, TElement, String, String, AttrList) Saves an object to a file. Declaration public static void Save<TElement>(string fileName, TElement element, string name = null, string comment = null, AttrList attributes = default(AttrList)) where TElement : CVHandle Parameters Type Name Description String fileName The file path to be saved. TElement element The object to save. String name Optional object name. If it is null , the name will be formed from fileName . String comment Optional comment to put in the beginning of the file. AttrList attributes A list of attributes used to customize the writing procedure. Type Parameters Name Description TElement The type of object to save. | Improve this Doc View Source SaveImage(String, Arr, Int32[]) Saves an image to a specified file. Declaration public static bool SaveImage(string fileName, Arr image, params int[] parameters) Parameters Type Name Description String fileName Name of the file. Arr image Image to be saved. Int32 [] parameters Optional image compression parameters. Returns Type Description Boolean true if the image was saved successfully; otherwise, false . | Improve this Doc View Source ScaleAdd(Arr, Scalar, Arr, Arr) Calculates the sum of a scaled array and another array. Declaration public static void ScaleAdd(Arr src1, Scalar scale, Arr src2, Arr dst) Parameters Type Name Description Arr src1 The first input array. Scalar scale The scale factor for the first array. Arr src2 The second input array. Arr dst The destination array. | Improve this Doc View Source SegmentMotion(Arr, Arr, MemStorage, Double, Double) Segments a whole motion into separate moving parts. Declaration public static Seq SegmentMotion(Arr mhi, Arr segMask, MemStorage storage, double timestamp, double segThresh) Parameters Type Name Description Arr mhi Motion history image. Arr segMask Output image where the segmentation mask should be stored, single-channel, 32-bit floating-point. Different motion segments are marked with individual values (1,2,...). MemStorage storage Memory storage that will contain a sequence of motion connected components. Double timestamp Current time in milliseconds or other units. Double segThresh Segmentation threshold; recommended to be equal to the interval between motion history “steps” or greater. Returns Type Description Seq A sequence of ConnectedComp structures, one for each motion component. The motion direction for every component can be calculated with CalcGlobalOrientation(Arr, Arr, Arr, Double, Double) using the extracted mask of the particular component. | Improve this Doc View Source SetIdentity(Arr) Initializes a scaled identity matrix. Declaration public static void SetIdentity(Arr mat) Parameters Type Name Description Arr mat The matrix to initialize (not necessarily square). | Improve this Doc View Source SetIdentity(Arr, Scalar) Initializes a scaled identity matrix. Declaration public static void SetIdentity(Arr mat, Scalar value) Parameters Type Name Description Arr mat The matrix to initialize (not necessarily square). Scalar value The value to assign to the diagonal elements. | Improve this Doc View Source Smooth(Arr, Arr, SmoothMethod, Int32, Int32, Double, Double) Smooths the image in one of several ways. Declaration public static void Smooth(Arr src, Arr dst, SmoothMethod smoothType = default(SmoothMethod), int size1 = 3, int size2 = 0, double sigma1 = null, double sigma2 = null) Parameters Type Name Description Arr src The source image. Arr dst The destination image. SmoothMethod smoothType Type of the smoothing. Int32 size1 The first parameter of the smoothing operation, the aperture width. Must be a positive odd number (e.g. 1, 3, 5, ...). Int32 size2 The second parameter of the smoothing operation, the aperture height. Ignored by Median and Bilateral methods. In the case of simple scaled/non-scaled and Gaussian blur, if size2 is zero, it is set to size1 . Otherwise it must be a positive odd number. Double sigma1 In the case of a Gaussian smoothing, this parameter may specify the standard deviation. If it is zero, it is calculated from the kernel size. If sigma1 is not zero but size1 and size2 are zeros, the kernel size is calculated from sigma1 . Double sigma2 Optionally specifies the standard deviation for the second dimension. | Improve this Doc View Source Sobel(Arr, Arr, Int32, Int32, Int32) Calculates the first, second, third or mixed image derivatives using an extended Sobel operator. Declaration public static void Sobel(Arr src, Arr dst, int xorder, int yorder, int apertureSize = 3) Parameters Type Name Description Arr src The source image. Arr dst The destination image. Int32 xorder The order of the derivative x. Int32 yorder The order of the derivative y. Int32 apertureSize Size of the extended Sobel kernel, must be 1, 3, 5 or 7. | Improve this Doc View Source Solve(Arr, Arr, Arr, InversionMethod) Solves a linear system or least-squares problem. Declaration public static bool Solve(Arr src1, Arr src2, Arr dst, InversionMethod method = default(InversionMethod)) Parameters Type Name Description Arr src1 The source matrix. Arr src2 The right-hand part of the linear system. Arr dst The output solution. InversionMethod method The matrix inversion method. Returns Type Description Boolean If LU method is used, returns true if src1 is non-singular and false otherwise; in the latter case, dst is not valid. | Improve this Doc View Source SolveCubic(Mat, Mat) Finds the real roots of a cubic equation. Declaration public static int SolveCubic(Mat coeffs, Mat roots) Parameters Type Name Description Mat coeffs The equation coefficients, an array of 3 or 4 elements. Mat roots The output array of real roots which should have 3 elements. Returns Type Description Int32 The number of real roots found. | Improve this Doc View Source SolvePoly(Mat, Mat, Int32, Int32) Finds the real or complex roots of a polynomial equation. Declaration public static void SolvePoly(Mat coeffs, Mat roots2, int maxIter = 20, int fig = 100) Parameters Type Name Description Mat coeffs The array of polynomial coefficients. Mat roots2 The destination (complex) array of roots. Int32 maxIter The maximum number of iterations to perform. Int32 fig The required figures of precision. | Improve this Doc View Source Sort(Arr, Arr, Arr, SortFlags) Sorts each row or each column of a matrix. Declaration public static void Sort(Arr src, Arr dst = null, Arr indices = null, SortFlags flags = default(SortFlags)) Parameters Type Name Description Arr src The source single-channel array. Arr dst The destination array of the same size and the same type as src . Arr indices The array on which to store the sorted indices. SortFlags flags The operation flags indicating whether to sort rows or columns and whether to use ascending or descending order. | Improve this Doc View Source Split(Arr, Arr, Arr, Arr, Arr) Divides a multi-channel array into several single-channel arrays or extracts a single channel from the array. Declaration public static void Split(Arr src, Arr dst0, Arr dst1, Arr dst2, Arr dst3) Parameters Type Name Description Arr src The source array. Arr dst0 The first destination channel array. Arr dst1 The second destination channel array. Arr dst2 The third destination channel array. Arr dst3 The fourth destination channel array. Remarks The function divides a multi-channel array into separate single-channel arrays. Two modes are available for the operation. If the source array has N channels and the first N destination channels are not null , they all are extracted from the source array; if only a single destination channel of the first N is not null , this particular channel is extracted; otherwise an exception is raised. The rest of the destination channels (beyond the first N) must always be null . For an IplImage instance, Copy(Arr, Arr, Arr) with COI set can also be used to extract a single channel from the image. | Improve this Doc View Source SquareAcc(Arr, Arr, Arr) Adds the square of the source image to the accumulator. Declaration public static void SquareAcc(Arr image, Arr sqsum, Arr mask = null) Parameters Type Name Description Arr image Input image, 1- or 3-channel, 8-bit or 32-bit floating point. Each channel of multi-channel image is processed independently. Arr sqsum Accumulator with the same number of channels as input image, 32-bit or 64-bit floating-point. Arr mask Optional operation mask. | Improve this Doc View Source StartFindContours(Arr, MemStorage, Int32, ContourRetrieval, ContourApproximation, Point) Initializes the contour scanning process. Declaration public static ContourScanner StartFindContours(Arr image, MemStorage storage, int headerSize, ContourRetrieval mode, ContourApproximation method, Point offset) Parameters Type Name Description Arr image The 8-bit, single channel, binary source image. MemStorage storage Container of the retrieved contours. Int32 headerSize Size of the sequence header. ContourRetrieval mode Specifies the contour retrieval mode. ContourApproximation method Specifies the contour approximation method. Point offset An offset, by which every contour point is shifted. This is useful if the contours are extracted from an image ROI but should then be analyzed in the whole image context. Returns Type Description ContourScanner A reference to the ContourScanner instance that can be used to iterate over the retrieved contours. | Improve this Doc View Source StereoCalibrate(Mat, Mat, Mat, Mat, Mat, Mat, Mat, Mat, Size, Mat, Mat, Mat, Mat) Calibrates stereo camera. Declaration public static double StereoCalibrate(Mat objectPoints, Mat imagePoints1, Mat imagePoints2, Mat npoints, Mat cameraMatrix1, Mat distCoeffs1, Mat cameraMatrix2, Mat distCoeffs2, Size imageSize, Mat R, Mat T, Mat E = null, Mat F = null) Parameters Type Name Description Mat objectPoints The joint matrix of object points; calibration pattern features in the model coordinate space. A floating-point 3xN or Nx3 1-channel, or 1xN or Nx1 3-channel array, where N is the total number of points in all views. Mat imagePoints1 The joint matrix of object point projections in the first camera views. A floating-point 2xN or Nx2 1-channel, or 1xN or Nx1 2-channel array, where N is the total number of points in all views. Mat imagePoints2 The joint matrix of object point projections in the second camera views. A floating-point 2xN or Nx2 1-channel, or 1xN or Nx1 2-channel array, where N is the total number of points in all views. Mat npoints Integer 1xM or Mx1 vector (where M is the number of calibration pattern views) containing the number of points in each particular view. The sum of vector elements must match the size of objectPoints , imagePoints1 and imagePoints2 (=N). Mat cameraMatrix1 The output 3x3 floating-point first camera matrix A = [fx 0 cx; 0 fy cy; 0 0 1]. Mat distCoeffs1 The output 4x1, 1x4, 5x1 or 1x5 vector of distortion coefficients for the first camera (k1, k2, p1, p2[, k3]). Mat cameraMatrix2 The output 3x3 floating-point second camera matrix A = [fx 0 cx; 0 fy cy; 0 0 1]. Mat distCoeffs2 The output 4x1, 1x4, 5x1 or 1x5 vector of distortion coefficients for the second camera (k1, k2, p1, p2[, k3]). Size imageSize Size of the image, used only to initialize the intrinsic camera matrix. Mat R The output rotation matrix between the 1st and the 2nd cameras’ coordinate systems. Mat T The output translation vector between the cameras’ coordinate systems. Mat E The optional output essential matrix. Mat F The optional output fundamental matrix. Returns Type Description Double The final re-projection error. | Improve this Doc View Source StereoCalibrate(Mat, Mat, Mat, Mat, Mat, Mat, Mat, Mat, Size, Mat, Mat, Mat, Mat, TermCriteria, StereoCalibrationFlags) Calibrates stereo camera. Declaration public static double StereoCalibrate(Mat objectPoints, Mat imagePoints1, Mat imagePoints2, Mat npoints, Mat cameraMatrix1, Mat distCoeffs1, Mat cameraMatrix2, Mat distCoeffs2, Size imageSize, Mat R, Mat T, Mat E, Mat F, TermCriteria criteria, StereoCalibrationFlags flags = default(StereoCalibrationFlags)) Parameters Type Name Description Mat objectPoints The joint matrix of object points; calibration pattern features in the model coordinate space. A floating-point 3xN or Nx3 1-channel, or 1xN or Nx1 3-channel array, where N is the total number of points in all views. Mat imagePoints1 The joint matrix of object point projections in the first camera views. A floating-point 2xN or Nx2 1-channel, or 1xN or Nx1 2-channel array, where N is the total number of points in all views. Mat imagePoints2 The joint matrix of object point projections in the second camera views. A floating-point 2xN or Nx2 1-channel, or 1xN or Nx1 2-channel array, where N is the total number of points in all views. Mat npoints Integer 1xM or Mx1 vector (where M is the number of calibration pattern views) containing the number of points in each particular view. The sum of vector elements must match the size of objectPoints , imagePoints1 and imagePoints2 (=N). Mat cameraMatrix1 The output 3x3 floating-point first camera matrix A = [fx 0 cx; 0 fy cy; 0 0 1]. Mat distCoeffs1 The output 4x1, 1x4, 5x1 or 1x5 vector of distortion coefficients for the first camera (k1, k2, p1, p2[, k3]). Mat cameraMatrix2 The output 3x3 floating-point second camera matrix A = [fx 0 cx; 0 fy cy; 0 0 1]. Mat distCoeffs2 The output 4x1, 1x4, 5x1 or 1x5 vector of distortion coefficients for the second camera (k1, k2, p1, p2[, k3]). Size imageSize Size of the image, used only to initialize the intrinsic camera matrix. Mat R The output rotation matrix between the 1st and the 2nd cameras’ coordinate systems. Mat T The output translation vector between the cameras’ coordinate systems. Mat E The optional output essential matrix. Mat F The optional output fundamental matrix. TermCriteria criteria The termination criteria for the iterative optimization algorithm. StereoCalibrationFlags flags Specifies various operation flags. Returns Type Description Double The final re-projection error. | Improve this Doc View Source StereoRectify(Mat, Mat, Mat, Mat, Size, Mat, Mat, Mat, Mat, Mat, Mat, Mat, StereoRectificationFlags, Double) Computes rectification transforms for each head of a calibrated stereo camera. Declaration public static void StereoRectify(Mat cameraMatrix1, Mat cameraMatrix2, Mat distCoeffs1, Mat distCoeffs2, Size imageSize, Mat R, Mat T, Mat R1, Mat R2, Mat P1, Mat P2, Mat Q = null, StereoRectificationFlags flags = default(StereoRectificationFlags), double alpha = null) Parameters Type Name Description Mat cameraMatrix1 The first camera matrix. Mat cameraMatrix2 The second camera matrix. Mat distCoeffs1 The input distortion coefficients for the first camera. Mat distCoeffs2 The input distortion coefficients for the second camera. Size imageSize Size of the image used for stereo calibration. Mat R The rotation matrix between the 1st and the 2nd cameras’ coordinate systems. Mat T The translation vector between the cameras’ coordinate systems. Mat R1 The output 3x3 rectification transform (rotation matrix) for the first camera. Mat R2 The output 3x3 rectification transform (rotation matrix) for the second camera. Mat P1 The output 3x4 projection matrix for the first camera in the new (rectified) coordinate system. Mat P2 The output 3x4 projection matrix for the second camera in the new (rectified) coordinate system. Mat Q The output 4x4 disparity-to-depth mapping matrix, see ReprojectImageTo3D(Arr, Arr, Mat, Boolean) . StereoRectificationFlags flags The operation flags. Double alpha The free scaling parameter. If it is -1, the function performs some default scaling. Otherwise the parameter should be between 0 and 1. 0 means that the rectified images will be zoomed and shifted so that only valid pixels are visible (i.e. there will be no black areas after rectification). 1 means that the rectified image will be decimated and shifted so that all the pixels from the original images from the cameras are retained in the rectified images, i.e. no source image pixels are lost. | Improve this Doc View Source StereoRectify(Mat, Mat, Mat, Mat, Size, Mat, Mat, Mat, Mat, Mat, Mat, Mat, StereoRectificationFlags, Double, Size) Computes rectification transforms for each head of a calibrated stereo camera. Declaration public static void StereoRectify(Mat cameraMatrix1, Mat cameraMatrix2, Mat distCoeffs1, Mat distCoeffs2, Size imageSize, Mat R, Mat T, Mat R1, Mat R2, Mat P1, Mat P2, Mat Q, StereoRectificationFlags flags, double alpha, Size newImageSize) Parameters Type Name Description Mat cameraMatrix1 The first camera matrix. Mat cameraMatrix2 The second camera matrix. Mat distCoeffs1 The input distortion coefficients for the first camera. Mat distCoeffs2 The input distortion coefficients for the second camera. Size imageSize Size of the image used for stereo calibration. Mat R The rotation matrix between the 1st and the 2nd cameras’ coordinate systems. Mat T The translation vector between the cameras’ coordinate systems. Mat R1 The output 3x3 rectification transform (rotation matrix) for the first camera. Mat R2 The output 3x3 rectification transform (rotation matrix) for the second camera. Mat P1 The output 3x4 projection matrix for the first camera in the new (rectified) coordinate system. Mat P2 The output 3x4 projection matrix for the second camera in the new (rectified) coordinate system. Mat Q The output 4x4 disparity-to-depth mapping matrix, see ReprojectImageTo3D(Arr, Arr, Mat, Boolean) . StereoRectificationFlags flags The operation flags. Double alpha The free scaling parameter. If it is -1, the function performs some default scaling. Otherwise the parameter should be between 0 and 1. 0 means that the rectified images will be zoomed and shifted so that only valid pixels are visible (i.e. there will be no black areas after rectification). 1 means that the rectified image will be decimated and shifted so that all the pixels from the original images from the cameras are retained in the rectified images, i.e. no source image pixels are lost. Size newImageSize The new image resolution after rectification. By default, i.e. when (0,0) is passed, it is set to the original imageSize . Setting it to larger value can help you to preserve details in the original image, especially when there is big radial distortion. | Improve this Doc View Source StereoRectify(Mat, Mat, Mat, Mat, Size, Mat, Mat, Mat, Mat, Mat, Mat, Mat, StereoRectificationFlags, Double, Size, out Rect) Computes rectification transforms for each head of a calibrated stereo camera. Declaration public static void StereoRectify(Mat cameraMatrix1, Mat cameraMatrix2, Mat distCoeffs1, Mat distCoeffs2, Size imageSize, Mat R, Mat T, Mat R1, Mat R2, Mat P1, Mat P2, Mat Q, StereoRectificationFlags flags, double alpha, Size newImageSize, out Rect validPixelROI1) Parameters Type Name Description Mat cameraMatrix1 The first camera matrix. Mat cameraMatrix2 The second camera matrix. Mat distCoeffs1 The input distortion coefficients for the first camera. Mat distCoeffs2 The input distortion coefficients for the second camera. Size imageSize Size of the image used for stereo calibration. Mat R The rotation matrix between the 1st and the 2nd cameras’ coordinate systems. Mat T The translation vector between the cameras’ coordinate systems. Mat R1 The output 3x3 rectification transform (rotation matrix) for the first camera. Mat R2 The output 3x3 rectification transform (rotation matrix) for the second camera. Mat P1 The output 3x4 projection matrix for the first camera in the new (rectified) coordinate system. Mat P2 The output 3x4 projection matrix for the second camera in the new (rectified) coordinate system. Mat Q The output 4x4 disparity-to-depth mapping matrix, see ReprojectImageTo3D(Arr, Arr, Mat, Boolean) . StereoRectificationFlags flags The operation flags. Double alpha The free scaling parameter. If it is -1, the function performs some default scaling. Otherwise the parameter should be between 0 and 1. 0 means that the rectified images will be zoomed and shifted so that only valid pixels are visible (i.e. there will be no black areas after rectification). 1 means that the rectified image will be decimated and shifted so that all the pixels from the original images from the cameras are retained in the rectified images, i.e. no source image pixels are lost. Size newImageSize The new image resolution after rectification. By default, i.e. when (0,0) is passed, it is set to the original imageSize . Setting it to larger value can help you to preserve details in the original image, especially when there is big radial distortion. Rect validPixelROI1 The optional output rectangle inside the rectified first camera image where all the pixels are valid. | Improve this Doc View Source StereoRectify(Mat, Mat, Mat, Mat, Size, Mat, Mat, Mat, Mat, Mat, Mat, Mat, StereoRectificationFlags, Double, Size, out Rect, out Rect) Computes rectification transforms for each head of a calibrated stereo camera. Declaration public static void StereoRectify(Mat cameraMatrix1, Mat cameraMatrix2, Mat distCoeffs1, Mat distCoeffs2, Size imageSize, Mat R, Mat T, Mat R1, Mat R2, Mat P1, Mat P2, Mat Q, StereoRectificationFlags flags, double alpha, Size newImageSize, out Rect validPixelROI1, out Rect validPixelROI2) Parameters Type Name Description Mat cameraMatrix1 The first camera matrix. Mat cameraMatrix2 The second camera matrix. Mat distCoeffs1 The input distortion coefficients for the first camera. Mat distCoeffs2 The input distortion coefficients for the second camera. Size imageSize Size of the image used for stereo calibration. Mat R The rotation matrix between the 1st and the 2nd cameras’ coordinate systems. Mat T The translation vector between the cameras’ coordinate systems. Mat R1 The output 3x3 rectification transform (rotation matrix) for the first camera. Mat R2 The output 3x3 rectification transform (rotation matrix) for the second camera. Mat P1 The output 3x4 projection matrix for the first camera in the new (rectified) coordinate system. Mat P2 The output 3x4 projection matrix for the second camera in the new (rectified) coordinate system. Mat Q The output 4x4 disparity-to-depth mapping matrix, see ReprojectImageTo3D(Arr, Arr, Mat, Boolean) . StereoRectificationFlags flags The operation flags. Double alpha The free scaling parameter. If it is -1, the function performs some default scaling. Otherwise the parameter should be between 0 and 1. 0 means that the rectified images will be zoomed and shifted so that only valid pixels are visible (i.e. there will be no black areas after rectification). 1 means that the rectified image will be decimated and shifted so that all the pixels from the original images from the cameras are retained in the rectified images, i.e. no source image pixels are lost. Size newImageSize The new image resolution after rectification. By default, i.e. when (0,0) is passed, it is set to the original imageSize . Setting it to larger value can help you to preserve details in the original image, especially when there is big radial distortion. Rect validPixelROI1 The optional output rectangle inside the rectified first camera image where all the pixels are valid. Rect validPixelROI2 The optional output rectangle inside the rectified second camera image where all the pixels are valid. | Improve this Doc View Source StereoRectifyUncalibrated(Mat, Mat, Mat, Size, Mat, Mat, Double) Computes rectification transform for uncalibrated stereo camera. Declaration public static bool StereoRectifyUncalibrated(Mat points1, Mat points2, Mat F, Size imageSize, Mat H1, Mat H2, double threshold = null) Parameters Type Name Description Mat points1 Array of N points from the first image.It can be 2xN, Nx2, 3xN or Nx3 1-channel array or 1xN or Nx1 2- or 3-channel array. The point coordinates should be floating-point (single or double precision). Mat points2 Array of the second image points of the same size and format as points1 . Mat F The input fundamental matrix. It can be computed from the same set of point pairs using FindFundamentalMat(Mat, Mat, Mat, FundamentalMatrixMethod, Double, Double, Mat) . Size imageSize Size of the image. Mat H1 The output rectification homography matrix for the first camera. Mat H2 The output rectification homography matrix for the second camera. Double threshold The optional threshold used to filter out the outliers. If the parameter is greater than zero, then all the point pairs that do not comply the epipolar geometry well enough are rejected prior to computing the homographies. Otherwise, all the points are considered inliers. Returns Type Description Boolean A value indicating whether the rectification transform was computed successfully. | Improve this Doc View Source Sub(Arr, Arr, Arr, Arr) Calculates the per-element difference between two arrays. Declaration public static void Sub(Arr src1, Arr src2, Arr dst, Arr mask = null) Parameters Type Name Description Arr src1 The first input array. Arr src2 The second input array. Arr dst The destination array. Arr mask Optional operation mask, 8-bit single-channel array specifying the elements that should be changed on dst . | Improve this Doc View Source SubRS(Arr, Scalar, Arr, Arr) Subtracts every element of a source array from a scalar. Declaration public static void SubRS(Arr src, Scalar value, Arr dst, Arr mask = null) Parameters Type Name Description Arr src The input array. Scalar value The scalar input value. Arr dst The destination array. Arr mask Optional operation mask, 8-bit single-channel array specifying the elements that should be changed on dst . | Improve this Doc View Source SubS(Arr, Scalar, Arr, Arr) Calculates the per-element difference between an array and a scalar. Declaration public static void SubS(Arr src, Scalar value, Arr dst, Arr mask = null) Parameters Type Name Description Arr src The input array. Scalar value The scalar input value. Arr dst The destination array. Arr mask Optional operation mask, 8-bit single-channel array specifying the elements that should be changed on dst . | Improve this Doc View Source Sum(Arr) Adds up array elements. Declaration public static Scalar Sum(Arr arr) Parameters Type Name Description Arr arr The source array. Returns Type Description Scalar The sum of array elements, independently for each channel. | Improve this Doc View Source SVBkSb(Arr, Arr, Arr, Arr, Arr, SvdFlags) Performs singular value back substitution. Declaration public static void SVBkSb(Arr W, Arr U, Arr V, Arr B, Arr X, SvdFlags flags) Parameters Type Name Description Arr W The matrix or vector of singular values. Arr U The left orthogonal matrix (may be transposed). Arr V The right orthogonal matrix (may be transposed). Arr B The matrix to multiply the pseudo-inverse of the original matrix A by. If it is null it will be assumed to be an identity matrix of an appropriate size. Arr X The destination matrix for the result of back substitution. SvdFlags flags The operation flags that were used to compute the singular values. | Improve this Doc View Source SVD(Arr, Arr, Arr, Arr, SvdFlags) Performs singular value decomposition of a real floating-point matrix. Declaration public static void SVD(Arr A, Arr W, Arr U = null, Arr V = null, SvdFlags flags = default(SvdFlags)) Parameters Type Name Description Arr A The source MxN matrix. Arr W The resulting singular value diagonal matrix or vector of singular values. Arr U The optional left orthogonal matrix. Arr V The optional right orthogonal matrix. SvdFlags flags The operation flags that can be used to speed up the processing. | Improve this Doc View Source Threshold(Arr, Arr, Double, Double, ThresholdTypes) Applies a fixed-level threshold to array elements. Declaration public static double Threshold(Arr src, Arr dst, double threshold, double maxValue, ThresholdTypes thresholdType) Parameters Type Name Description Arr src Source array. Arr dst Destination array; must be either the same type as src or 8-bit. Double threshold Threshold value. Double maxValue Maximum value to use with Binary and BinaryInv . ThresholdTypes thresholdType The type of threshold to apply. Returns Type Description Double The computed threshold value in case Otsu is used. | Improve this Doc View Source Trace(Arr) Returns the trace of a matrix. Declaration public static Scalar Trace(Arr mat) Parameters Type Name Description Arr mat The source matrix. Returns Type Description Scalar The sum of the diagonal elements of the matrix mat . | Improve this Doc View Source Transform(Arr, Arr, Mat, Mat) Transforms each element of source array and stores resultant vectors in destination array. Declaration public static void Transform(Arr src, Arr dst, Mat transmat, Mat shiftvec = null) Parameters Type Name Description Arr src The source array. Arr dst The destination array. Mat transmat The transformation matrix to apply to elements of the source array. Mat shiftvec The optional shift vector. | Improve this Doc View Source Transpose(Arr, Arr) Transposes a matrix. Declaration public static void Transpose(Arr src, Arr dst) Parameters Type Name Description Arr src The source matrix. Arr dst The destination matrix. | Improve this Doc View Source TriangulatePoints(Mat, Mat, Mat, Mat, Mat) Reconstructs points by triangulation. Declaration public static void TriangulatePoints(Mat projMatr1, Mat projMatr2, Mat projPoints1, Mat projPoints2, Mat points4D) Parameters Type Name Description Mat projMatr1 3x4 projection matrix of the first camera. Mat projMatr2 3x4 projection matrix of the second camera. Mat projPoints1 2xN array of feature points in the first image. Mat projPoints2 2xN array of corresponding points in the second image. Mat points4D 4xN array of reconstructed points in homogeneous coordinates. | Improve this Doc View Source Undistort2(Arr, Arr, Mat, Mat, Mat) Transforms an image to compensate for lens distortion. Declaration public static void Undistort2(Arr src, Arr dst, Mat cameraMatrix, Mat distortionCoeffs, Mat newCameraMatrix = null) Parameters Type Name Description Arr src The input (distorted) image. Arr dst The output (corrected) image with same size and type as src . Mat cameraMatrix The input camera matrix. Mat distortionCoeffs The vector of distortion coefficients. Mat newCameraMatrix Regulates the particular subset of the source image that will be visible in the corrected image. | Improve this Doc View Source UndistortPoints(Mat, Mat, Mat, Mat, Mat, Mat) Computes the ideal point coordinates from the observed point coordinates. Declaration public static void UndistortPoints(Mat src, Mat dst, Mat cameraMatrix, Mat distortionCoeffs, Mat R = null, Mat P = null) Parameters Type Name Description Mat src The observed point coordinates, 2xN or Nx2 single-channel or 1xN or Nx1 2-channel. Mat dst The output ideal point coordinates, after undistortion and reverse perspective transformation, same format as src . Mat cameraMatrix The input camera matrix. Mat distortionCoeffs The 4 or 5 element vector of distortion coefficients. Mat R The optional rectification transformation in object space (3x3 matrix). If it is null the identity transform is used. Mat P The optional new camera matrix (3x3) or the new projection matrix (3x4). If it is null the identity new camera matrix is used. | Improve this Doc View Source UpdateMotionHistory(Arr, Arr, Double, Double) Updates the motion history image by a moving silhouette. Declaration public static void UpdateMotionHistory(Arr silhouette, Arr mhi, double timestamp, double duration) Parameters Type Name Description Arr silhouette Silhouette mask that has non-zero pixels where the motion occurs. Arr mhi Motion history image, that is updated by the function (single-channel, 32-bit floating-point). Double timestamp Current time in milliseconds or other units. Double duration Maximal duration of the motion track in the same units as timestamp . | Improve this Doc View Source WaitKey(Int32) Waits for a pressed key. Declaration public static int WaitKey(int delay = 0) Parameters Type Name Description Int32 delay Maximum delay in milliseconds for which to wait for a key press. Returns Type Description Int32 The pressed key code or -1 if no key was pressed before the specified time had elapsed. | Improve this Doc View Source WarpAffine(Arr, Arr, Mat, WarpFlags) Applies an affine transformation to an image. Declaration public static void WarpAffine(Arr src, Arr dst, Mat mapMatrix, WarpFlags flags = default(WarpFlags)) Parameters Type Name Description Arr src The source image. Arr dst The destination image. Mat mapMatrix The 2 x 3 transformation matrix. WarpFlags flags A combination of interpolation methods and operational flags. | Improve this Doc View Source WarpAffine(Arr, Arr, Mat, WarpFlags, Scalar) Applies an affine transformation to an image. Declaration public static void WarpAffine(Arr src, Arr dst, Mat mapMatrix, WarpFlags flags, Scalar fillval) Parameters Type Name Description Arr src The source image. Arr dst The destination image. Mat mapMatrix The 2 x 3 transformation matrix. WarpFlags flags A combination of interpolation methods and operational flags. Scalar fillval A value used to fill outliers. | Improve this Doc View Source WarpPerspective(Arr, Arr, Mat, WarpFlags) Applies a perspective transformation to an image. Declaration public static void WarpPerspective(Arr src, Arr dst, Mat mapMatrix, WarpFlags flags = default(WarpFlags)) Parameters Type Name Description Arr src The source image. Arr dst The destination image. Mat mapMatrix The 3 x 3 transformation matrix. WarpFlags flags A combination of interpolation methods and operational flags. | Improve this Doc View Source WarpPerspective(Arr, Arr, Mat, WarpFlags, Scalar) Applies a perspective transformation to an image. Declaration public static void WarpPerspective(Arr src, Arr dst, Mat mapMatrix, WarpFlags flags, Scalar fillval) Parameters Type Name Description Arr src The source image. Arr dst The destination image. Mat mapMatrix The 3 x 3 transformation matrix. WarpFlags flags A combination of interpolation methods and operational flags. Scalar fillval A value used to fill outliers. | Improve this Doc View Source Watershed(Arr, Arr) Performs marker-based image segmentation using the watershed algorithm. Declaration public static void Watershed(Arr image, Arr markers) Parameters Type Name Description Arr image The input 8-bit 3-channel image. Arr markers The input/output 32-bit single-channel image (map) of markers. It should have the same size as image . | Improve this Doc View Source Xor(Arr, Arr, Arr, Arr) Performs per-element bit-wise \"exclusive or\" operation on two arrays. Declaration public static void Xor(Arr src1, Arr src2, Arr dst, Arr mask = null) Parameters Type Name Description Arr src1 The first input array. Arr src2 The second input array. Arr dst The destination array. Arr mask Optional operation mask, 8-bit single-channel array specifying the elements that should be changed on dst . | Improve this Doc View Source XorS(Arr, Scalar, Arr, Arr) Performs per-element bit-wise “exclusive or” operation on an array and a scalar. Declaration public static void XorS(Arr src, Scalar value, Arr dst, Arr mask = null) Parameters Type Name Description Arr src The input array. Scalar value The scalar input value. Arr dst The destination array. Arr mask Optional operation mask, 8-bit single-channel array specifying the elements that should be changed on dst ."
  },
  "api/OpenCV.Net.CVException.html": {
    "href": "api/OpenCV.Net.CVException.html",
    "title": "Class CVException",
    "keywords": "Class CVException The exception that is thrown when OpenCV error status is set. Inheritance Object CVException Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public class CVException : Exception Constructors | Improve this Doc View Source CVException() Initializes a new instance of the CVException class. Declaration public CVException() | Improve this Doc View Source CVException(SerializationInfo, StreamingContext) Initializes a new instance of the CVException class from serialization data. Declaration protected CVException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The object that holds the serialized object data. StreamingContext context The contextual information about the source or destination. | Improve this Doc View Source CVException(Int32, String, String, String, Int32) Initializes a new instance of the CVException class from OpenCV error information. Declaration public CVException(int status, string functionName, string errorMessage, string fileName, int line) Parameters Type Name Description Int32 status The error code, usually a negative value. String functionName The name of the function where the error status was set. String errorMessage The text of the error message. String fileName The path to the file where the error status was set. Int32 line The line number inside fileName where the error status was set. | Improve this Doc View Source CVException(String) Initializes a new instance of the CVException class with a specified error message. Declaration public CVException(string message) Parameters Type Name Description String message The error message that explains the reason for the exception. | Improve this Doc View Source CVException(String, Exception) Initializes a new instance of the CVException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public CVException(string message, Exception inner) Parameters Type Name Description String message The error message that explains the reason for the exception. Exception inner The exception that is the cause of the current exception. If the inner parameter is not null , the current exception is raised in a catch block that handles the inner exception. Properties | Improve this Doc View Source ErrorMessage Gets or sets the text of the error message. Declaration public string ErrorMessage { get; } Property Value Type Description String | Improve this Doc View Source FileName Gets or sets the path to the file where the error status was set. Declaration public string FileName { get; } Property Value Type Description String | Improve this Doc View Source FunctionName Gets or sets the name of the function where the error status was set. Declaration public string FunctionName { get; } Property Value Type Description String | Improve this Doc View Source Line Gets or sets the line number inside FileName where the error status was set. Declaration public int Line { get; } Property Value Type Description Int32 | Improve this Doc View Source Status Gets or sets the error code, usually a negative value. Declaration public int Status { get; } Property Value Type Description Int32"
  },
  "api/OpenCV.Net.CVHandle.html": {
    "href": "api/OpenCV.Net.CVHandle.html",
    "title": "Class CVHandle",
    "keywords": "Class CVHandle Represents a native handle to OpenCV structures and classes. Inheritance Object CVHandle Arr FileNode HaarClassifierCascade KalmanFilter LatentSvmDetector MemStorage Seq SparseNode StringHashNode Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public abstract class CVHandle : SafeHandleZeroOrMinusOneIsInvalid Constructors | Improve this Doc View Source CVHandle(Boolean) Initializes a new instance of the CVHandle class, specifying whether the handle is to be reliably released. Declaration protected CVHandle(bool ownsHandle) Parameters Type Name Description Boolean ownsHandle true to reliably release the handle during the finalization phase; false to prevent reliable release (not recommended)."
  },
  "api/OpenCV.Net.Depth.html": {
    "href": "api/OpenCV.Net.Depth.html",
    "title": "Enum Depth",
    "keywords": "Enum Depth Specifies the available element bit depth formats for Mat and Seq instances. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum Depth : int Fields Name Description F32 Specifies a floating point 32-bit element depth. F64 Specifies a floating point 64-bit element depth. S16 Specifies a signed 16-bit element depth. S32 Specifies a signed 32-bit element depth. S8 Specifies a signed 8-bit element depth. U16 Specifies an unsigned 16-bit element depth. U8 Specifies an unsigned 8-bit element depth. UserType Specifies a user defined element pointer type."
  },
  "api/OpenCV.Net.DiscreteTransformFlags.html": {
    "href": "api/OpenCV.Net.DiscreteTransformFlags.html",
    "title": "Enum DiscreteTransformFlags",
    "keywords": "Enum DiscreteTransformFlags Specifies the operation of discrete linear transforms and related functions. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum DiscreteTransformFlags : int Fields Name Description Forward Specifies that a forward 1D or 2D transform should be performed. Inverse Specifies that an inverse 1D or 2D transform should be performed. InverseScale A combination of Inverse and Scale . MultiplyConjugate Specifies that the second array should be conjugated before the multiplication. Rows Specifies that each row of the array should be processed individually. Scale Specifies that the result should be scaled by dividing it by the number of array elements."
  },
  "api/OpenCV.Net.DistanceLabel.html": {
    "href": "api/OpenCV.Net.DistanceLabel.html",
    "title": "Enum DistanceLabel",
    "keywords": "Enum DistanceLabel Specifies the content of the output label array in DistTransform(Arr, Arr, DistanceType, Int32, Single[], Arr, DistanceLabel) . Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum DistanceLabel : int Fields Name Description ConnectedComponent Specifies that the content of the output label array are connected components. Pixel Specifies that the content of the output label array are pixel values."
  },
  "api/OpenCV.Net.DistanceType.html": {
    "href": "api/OpenCV.Net.DistanceType.html",
    "title": "Enum DistanceType",
    "keywords": "Enum DistanceType Specifies the available types of distance functions. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum DistanceType : int Fields Name Description C Specifies the elementwise max distance. Fair Specifies the Fair metric given by c^2(|x|/c-log(1+|x|/c)), c = 1.3998. Huber Specifies the Huber metric given by distance = x^2/2 if |x| is less than c, else c(|x|-c/2), c=1.345. L1 Specifies the L1 or Manhattan distance. L12 Specifies the L1-L2 metric. L2 Specifies the L2 or Euclidean distance. User Specifies that a user defined distance should be used. Welsch Specifies the Welsch metric given by distance = c^2/2(1-exp(-(x/c)^2)), c = 2.9846."
  },
  "api/OpenCV.Net.FarnebackFlowFlags.html": {
    "href": "api/OpenCV.Net.FarnebackFlowFlags.html",
    "title": "Enum FarnebackFlowFlags",
    "keywords": "Enum FarnebackFlowFlags Specifies available operation flags for CalcOpticalFlowFarneback(Arr, Arr, Arr, Double, Int32, Int32, Int32, Int32, Double, FarnebackFlowFlags) . Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum FarnebackFlowFlags : int Fields Name Description Gaussian Specifies that a Gaussian filter should be used instead of a box filter for optical flow estimation. Usually, this option gives more accurate flow than a box filter, at the cost of lower speed. The size of the Gaussian window should be set to a larger value to achieve the same level of robustness. InitialFlow Specifies that output array contains the initial flow approximation. None Specifies that no operation flags are active."
  },
  "api/OpenCV.Net.FileNode.html": {
    "href": "api/OpenCV.Net.FileNode.html",
    "title": "Class FileNode",
    "keywords": "Class FileNode Represents a file storage node. When XML/YAML file is read, it is first parsed and stored in the memory as a hierarchical collection of nodes. Each node can be a “leaf”, that is, contain a single number or a string, or be a collection of other nodes. Inheritance Object CVHandle FileNode Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public class FileNode : CVHandle Properties | Improve this Doc View Source Name Gets the name of the node. Declaration public string Name { get; } Property Value Type Description String Methods | Improve this Doc View Source ReleaseHandle() Executes the code required to free the native FileNode handle. Declaration protected override bool ReleaseHandle() Returns Type Description Boolean true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false ."
  },
  "api/OpenCV.Net.FileNodeType.html": {
    "href": "api/OpenCV.Net.FileNodeType.html",
    "title": "Enum FileNodeType",
    "keywords": "Enum FileNodeType Specifies the available types of file storage node values. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum FileNodeType : int Fields Name Description Integer Specifies an integer type value. Map Specifies a map node value. Real Specifies a floating-point type value. Ref Specifies a reference type value. Seq Specifies a sequence node value. String Specifies a text string type value."
  },
  "api/OpenCV.Net.FileStorage.html": {
    "href": "api/OpenCV.Net.FileStorage.html",
    "title": "Class FileStorage",
    "keywords": "Class FileStorage Represents a storage associated with a file on disk. Inheritance Object FileStorage Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public class FileStorage : SafeHandleZeroOrMinusOneIsInvalid Constructors | Improve this Doc View Source FileStorage(String, MemStorage, StorageFlags, String) Initializes a new instance of the FileStorage class and prepares the file storage for reading or writing data. Declaration public FileStorage(string fileName, MemStorage storage, StorageFlags flags, string encoding = null) Parameters Type Name Description String fileName Name of the file associated with the storage. MemStorage storage Memory storage used for temporary data and for storing dynamic structures, such as Seq or Graph . If it is null , a temporary memory storage is created and used. StorageFlags flags Specifies operation flags associated with the new file storage. String encoding Encoding of the file. Note that UTF-16 XML encoding is not supported currently and you should use 8-bit encoding instead. Methods | Improve this Doc View Source EndWriteStruct() Ends the writing of a structure. Declaration public void EndWriteStruct() | Improve this Doc View Source GetFileNode(FileNode, StringHashNode, Boolean) Finds a node in a map or file storage. Declaration public FileNode GetFileNode(FileNode map, StringHashNode key, bool createMissing = false) Parameters Type Name Description FileNode map The parent map. If it is null , the function searches a top-level node. StringHashNode key Unique pointer to the node name, retrieved with GetHashedKey(String, Boolean) . Boolean createMissing A value indicating whether an absent node should be added to the map. Returns Type Description FileNode The found or newly created node; null in case of failure. | Improve this Doc View Source GetFileNode(FileNode, String) Finds a node in a map or file storage. Declaration public FileNode GetFileNode(FileNode map, string name) Parameters Type Name Description FileNode map The parent map. If it is null , the function searches a top-level node. String name The file node name. Returns Type Description FileNode The found node or null in case of failure. | Improve this Doc View Source GetHashedKey(String, Boolean) Returns a unique reference for a given name. Declaration public StringHashNode GetHashedKey(string name, bool createMissing = false) Parameters Type Name Description String name Literal node name. Boolean createMissing A value indicating whether an absent key should be added into the hash table. Returns Type Description StringHashNode A unique reference for each particular file node name. This reference can later be passed to the GetFileNode(FileNode, StringHashNode, Boolean) method. | Improve this Doc View Source GetRootFileNode(Int32) Retrieves one of the top-level nodes of the file storage. Declaration public FileNode GetRootFileNode(int streamIndex = 0) Parameters Type Name Description Int32 streamIndex Zero-based index of the stream. In most cases, there is only one stream in the file. Returns Type Description FileNode One of the top-level file nodes. The top-level nodes do not have a name, they correspond to the streams that are stored one after another in the file storage. If the index is out of range, the function returns null . | Improve this Doc View Source Read<TElement>(FileNode) Decodes an object and returns a reference to it. Declaration public TElement Read<TElement>(FileNode node) where TElement : CVHandle Parameters Type Name Description FileNode node The root object node. Returns Type Description TElement The reference to the decoded object. Type Parameters Name Description TElement The type of the object. | Improve this Doc View Source Read<TElement>(FileNode, String) Finds an object by name and decodes it. Declaration public TElement Read<TElement>(FileNode map, string name) where TElement : CVHandle Parameters Type Name Description FileNode map The parent map. If it is null , the function searches a top-level node. String name The node name. Returns Type Description TElement The reference to the decoded object. Type Parameters Name Description TElement The type of the object. | Improve this Doc View Source ReadInt(FileNode, Int32) Retrieves an integer value from a file node. Declaration public int ReadInt(FileNode node, int defaultValue = 0) Parameters Type Name Description FileNode node The file node. Int32 defaultValue The value that is returned if node is null . Returns Type Description Int32 An integer that is represented by the file node. | Improve this Doc View Source ReadInt(FileNode, String, Int32) Finds a file node and returns its integer value. Declaration public int ReadInt(FileNode map, string name, int defaultValue = 0) Parameters Type Name Description FileNode map The parent map. If it is null , the function searches a top-level node. String name The node name. Int32 defaultValue The value that is returned if the file node is not found. Returns Type Description Int32 An integer that is represented by the file node. | Improve this Doc View Source ReadRawData<TElement>(FileNode, TElement[], String) Reads multiple numbers. Declaration public void ReadRawData<TElement>(FileNode src, TElement[] dst, string format) where TElement : struct Parameters Type Name Description FileNode src The file node (a sequence) to read numbers from. TElement[] dst The destination array. String format Specification of each array element. Type Parameters Name Description TElement The type of the numbers to read. | Improve this Doc View Source ReadReal(FileNode, Double) Retrieves a floating-point value from a file node. Declaration public double ReadReal(FileNode node, double defaultValue = null) Parameters Type Name Description FileNode node The file node. Double defaultValue The value that is returned if node is null . Returns Type Description Double A floating-point value that is represented by the file node. | Improve this Doc View Source ReadReal(FileNode, String, Double) Finds a file node and returns its floating-point value. Declaration public double ReadReal(FileNode map, string name, double defaultValue = null) Parameters Type Name Description FileNode map The parent map. If it is null , the function searches a top-level node. String name The node name. Double defaultValue The value that is returned if the file node is not found. Returns Type Description Double A floating-point value that is represented by the file node. | Improve this Doc View Source ReadString(FileNode, String) Retrieves a text string from a file node. Declaration public string ReadString(FileNode node, string defaultValue = null) Parameters Type Name Description FileNode node The file node. String defaultValue The value that is returned if node is null . Returns Type Description String A text string that is represented by the file node. | Improve this Doc View Source ReadString(FileNode, String, String) Finds a file node and returns its text string value. Declaration public string ReadString(FileNode map, string name, string defaultValue = null) Parameters Type Name Description FileNode map The parent map. If it is null , the function searches a top-level node. String name The node name. String defaultValue The value that is returned if the file node is not found. Returns Type Description String A text string that is represented by the file node. | Improve this Doc View Source ReleaseHandle() Executes the code required to free the native FileStorage handle. Declaration protected override bool ReleaseHandle() Returns Type Description Boolean true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false . | Improve this Doc View Source StartNextStream() Starts the next stream in file storage. Both YAML and XML support multiple streams. This is useful for concatenating files or for resuming the writing process. Declaration public void StartNextStream() | Improve this Doc View Source StartWriteStruct(String, StructStorageFlags, String, AttrList) Starts writing a new structure. Declaration public void StartWriteStruct(string name, StructStorageFlags structFlags, string typeName = null, AttrList attributes = default(AttrList)) Parameters Type Name Description String name Name of the written structure. The structure can be accessed by this name when the storage is read. StructStorageFlags structFlags Operation flags associated with the written structure. String typeName Optional parameter, the object type name. In case of XML it is written as a type_id attribute of the structure opening tag. In the case of YAML it is written after a colon following the structure name. AttrList attributes Not used in the current implementation. | Improve this Doc View Source Write(String, CVHandle, AttrList) Writes an object to file storage. Declaration public void Write(string name, CVHandle handle, AttrList attributes = default(AttrList)) Parameters Type Name Description String name Name of the written object. Should be null if and only if the parent structure is a sequence. CVHandle handle Handle to the written object. AttrList attributes The attributes of the object. They are specific for each particular type. | Improve this Doc View Source WriteComment(String, Boolean) Writes a comment. Declaration public void WriteComment(string comment, bool eolComment) Parameters Type Name Description String comment The written comment, single-line or multi-line. Boolean eolComment If true , the method tries to put the comment at the end of current line; otherwise, if the comment is multi-line, or if it does not fit at the end of the current line, the comment starts a new line. | Improve this Doc View Source WriteFileNode(String, FileNode, Boolean) Writes a file node from another file storage. Declaration public void WriteFileNode(string newNodeName, FileNode node, bool embed) Parameters Type Name Description String newNodeName New name of the file node in the destination file storage. To keep the existing name, use the Name property. FileNode node The written node. Boolean embed If the written node is a collection and this parameter is true , no extra level of hierarchy is created. Instead, all the elements of node are written into the currently written structure. Of course, map elements can only be embedded into another map, and sequence elements can only be embedded into another sequence. | Improve this Doc View Source WriteInt(String, Int32) Writes an integer value. Declaration public void WriteInt(string name, int value) Parameters Type Name Description String name Name of the written value. Should be null if and only if the parent structure is a sequence. Int32 value The written value. | Improve this Doc View Source WriteRawData<TElement>(TElement[], String) Writes multiple numbers. Declaration public void WriteRawData<TElement>(TElement[] source, string format) where TElement : struct Parameters Type Name Description TElement[] source The source array. String format Specification of each array element. Type Parameters Name Description TElement The type of the numbers to write. | Improve this Doc View Source WriteReal(String, Double) Writes a floating-point value. Declaration public void WriteReal(string name, double value) Parameters Type Name Description String name Name of the written value. Should be null if and only if the parent structure is a sequence. Double value The written value. | Improve this Doc View Source WriteString(String, String, Boolean) Writes a text string. Declaration public void WriteString(string name, string value, bool quote = false) Parameters Type Name Description String name Name of the written string. Should be null if and only if the parent structure is a sequence. String value The written string. Boolean quote If true , the written string is put in quotes, regardless of whether they are required. Otherwise, if the flag is zero, quotes are used only when they are required (e.g. when the string starts with a digit or contains spaces)."
  },
  "api/OpenCV.Net.FindHomographyMethod.html": {
    "href": "api/OpenCV.Net.FindHomographyMethod.html",
    "title": "Enum FindHomographyMethod",
    "keywords": "Enum FindHomographyMethod Specifies available methods for computing the homography matrix. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum FindHomographyMethod : int Fields Name Description LMedS Specifies a Least-Median robust method. Ransac Specifies a RANSAC-based robust method. Regular Specifies a regular method using all the points."
  },
  "api/OpenCV.Net.FlipMode.html": {
    "href": "api/OpenCV.Net.FlipMode.html",
    "title": "Enum FlipMode",
    "keywords": "Enum FlipMode Specifies the mirror mode used in Flip(Arr, Arr, FlipMode) . Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum FlipMode : int Fields Name Description Both Specifies that the array should be flipped both vertically and horizontally. Horizontal Specifies that the array should be flipped horizontally. Vertical Specifies that the array should be flipped vertically."
  },
  "api/OpenCV.Net.FloodFillFlags.html": {
    "href": "api/OpenCV.Net.FloodFillFlags.html",
    "title": "Enum FloodFillFlags",
    "keywords": "Enum FloodFillFlags Specifies flags for the flood fill algorithm. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum FloodFillFlags : int Fields Name Description Connected4 Specifies the 4-connected flood fill algorithm. Connected8 Specifies the 8-connected flood fill algorithm. FixedRange Specifies that the difference between the current pixel and seed pixel is considered for flooding. Otherwise, the difference between neighbor pixels is considered (i.e. the range is floating). MaskOnly Specifies that the method does not change the image but fills the mask."
  },
  "api/OpenCV.Net.Font.html": {
    "href": "api/OpenCV.Net.Font.html",
    "title": "Class Font",
    "keywords": "Class Font Represents a font that can be passed to text rendering functions. Inheritance Object Font Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public class Font : SafeHandleZeroOrMinusOneIsInvalid Constructors | Improve this Doc View Source Font(FontFace, Double, Double, Double, Int32, LineFlags) Initializes a new instance of the Font class with the specified parameters. Declaration public Font(FontFace fontFace, double hscale, double vscale, double shear = null, int thickness = 1, LineFlags lineType = default(LineFlags)) Parameters Type Name Description FontFace fontFace The font name identifier. Double hscale The width scale factor for the font. Double vscale The height scale factor for the font. Double shear Approximate tangent of the character slope relative to the vertical line. A value of 0 means a non-italic font, 1.0 means around 45 degrees of slope, and so on. Int32 thickness The thickness of the text strokes. LineFlags lineType The algorithm used to draw the text strokes. | Improve this Doc View Source Font(Double, Int32) Initializes a new instance of the Font class with the specified scale and thickness . Declaration public Font(double scale, int thickness = 1) Parameters Type Name Description Double scale The scale factor for the font. Int32 thickness The thickness of the text strokes. | Improve this Doc View Source Font(String, Int32) Initializes a new instance of the Font class using Qt based glyphs. Declaration public Font(string nameFont, int pointSize = null) Parameters Type Name Description String nameFont Name of the font. The name should match the name of a system font (such as Times). If the font is not found, a default one is used. Int32 pointSize Size of the font. If not specified, equal zero or negative, the point size of the font is set to a system-dependent default value. Generally, this is 12 points. | Improve this Doc View Source Font(String, Int32, Scalar, FontWeight, FontStyle, Int32) Initializes a new instance of the Font class using Qt based glyphs. Declaration public Font(string nameFont, int pointSize, Scalar color, FontWeight weight = default(FontWeight), FontStyle style = default(FontStyle), int spacing = 0) Parameters Type Name Description String nameFont Name of the font. The name should match the name of a system font (such as Times). If the font is not found, a default one is used. Int32 pointSize Size of the font. If not specified, equal zero or negative, the point size of the font is set to a system-dependent default value. Generally, this is 12 points. Scalar color Color of the font. FontWeight weight Font weight. FontStyle style Font style. Int32 spacing Spacing between characters. It can be negative or positive. Methods | Improve this Doc View Source ReleaseHandle() Executes the code required to free the native Font handle. Declaration protected override bool ReleaseHandle() Returns Type Description Boolean true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false ."
  },
  "api/OpenCV.Net.FontFace.html": {
    "href": "api/OpenCV.Net.FontFace.html",
    "title": "Enum FontFace",
    "keywords": "Enum FontFace Specifies font face flags for instances of Font . Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum FontFace : int Fields Name Description HersheyComplex Specifies a normal size serif font. HersheyComplexSmall Specifies a smaller version of HersheyComplex . HersheyDuplex Specifies a normal size sans-serif font more complex than HersheySimplex . HersheyPlain Specifies a small size sans-serif font. HersheyScriptComplex Specifies a more complex variant of HersheyScriptSimplex . HersheyScriptSimplex Specifies a hand-writing style font. HersheySimplex Specifies a normal size sans-serif font. HersheyTriplex Specifies a normal size serif font more complex than HersheyComplex . Italic Specifies that the font should be rendered in italic or oblique font."
  },
  "api/OpenCV.Net.FontStyle.html": {
    "href": "api/OpenCV.Net.FontStyle.html",
    "title": "Enum FontStyle",
    "keywords": "Enum FontStyle Specifies the available Qt font glyph styles. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum FontStyle : int Fields Name Description Italic Specifies an italicized Qt font glyph style. Normal Specifies a normal (i.e. non-italicized) Qt font glyph style. Oblique Specifies a Qt font glyph style with an italic appearance but based on unstyled glyphs."
  },
  "api/OpenCV.Net.FontWeight.html": {
    "href": "api/OpenCV.Net.FontWeight.html",
    "title": "Enum FontWeight",
    "keywords": "Enum FontWeight Specifies the predefined font weights for Qt fonts. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum FontWeight : int Fields Name Description Black Specifies a black Qt font weight. Bold Specifies a bold Qt font weight. DemiBold Specifies a demibold Qt font weight. Light Specifies a light Qt font weight. Normal Specifies a normal Qt font weight."
  },
  "api/OpenCV.Net.FundamentalMatrixMethod.html": {
    "href": "api/OpenCV.Net.FundamentalMatrixMethod.html",
    "title": "Enum FundamentalMatrixMethod",
    "keywords": "Enum FundamentalMatrixMethod Specifies available methods for computing the fundamental matrix. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum FundamentalMatrixMethod : int Fields Name Description LMedS Specifies the Least-Median robust method (N >= 8). Point7 Specifies a 7-point algorithm (N = 7). Point8 Specifies an 8-point algorithm (N >= 8). Ransac Specifies the RANSAC algorithm (N >= 8)."
  },
  "api/OpenCV.Net.GemmFlags.html": {
    "href": "api/OpenCV.Net.GemmFlags.html",
    "title": "Enum GemmFlags",
    "keywords": "Enum GemmFlags Specifies operation flags for GEMM(Arr, Arr, Double, Arr, Double, Arr, GemmFlags) . Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum GemmFlags : int Fields Name Description None Specifies that no operation flags are active. TransposeA Specifies that matrix A should be transposed. TransposeB Specifies that matrix B should be transposed. TransposeC Specifies that matrix C should be transposed."
  },
  "api/OpenCV.Net.Graph.html": {
    "href": "api/OpenCV.Net.Graph.html",
    "title": "Class Graph",
    "keywords": "Class Graph Represents an oriented or unoriented weighted graph. Inheritance Object CVHandle Seq Set Graph Inherited Members Seq.Storage Seq.Kind Seq.ElementSize Seq.Count Seq.HPrev Seq.HNext Seq.VPrev Seq.VNext Seq.SetBlockSize(Int32) Seq.Push() Seq.Push<TElement>(TElement[]) Seq.PushFront() Seq.PushFront<TElement>(TElement[]) Seq.Pop() Seq.Pop<TElement>(TElement) Seq.Pop<TElement>(TElement[]) Seq.PopFront() Seq.PopFront<TElement>(TElement) Seq.PopFront<TElement>(TElement[]) Seq.Insert<TElement>(Int32, TElement) Seq.Insert(Int32, Seq) Seq.Insert(Int32, Arr) Seq.Remove(Int32) Seq.Remove(SeqSlice) Seq.GetElement(Int32) Seq.GetElementIndex(IntPtr) Seq.CopyTo<TElement>(TElement[]) Seq.CopyTo<TElement>(TElement[], SeqSlice) Seq.ToArray<TElement>() Seq.Slice(SeqSlice, MemStorage, Boolean) Seq.Sort<TElement>(Comparison<TElement>) Seq.Search<TElement>(TElement, Comparison<TElement>, Boolean) Seq.Invert() Seq.Partition<TElement>(MemStorage, Seq, Func<TElement, TElement, Boolean>) Seq.ReleaseHandle() Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public class Graph : Set Properties | Improve this Doc View Source EdgeCount Gets the total number of edges in the graph. Declaration public int EdgeCount { get; } Property Value Type Description Int32 | Improve this Doc View Source HeaderSize Gets the size of the Graph header, in bytes. Declaration public static int HeaderSize { get; } Property Value Type Description Int32 | Improve this Doc View Source VertexCount Gets the total number of vertices in the graph. Declaration public int VertexCount { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Clear() Removes all vertices and edges from the graph. Declaration public override void Clear() Overrides Set.Clear() | Improve this Doc View Source Clone(MemStorage) Creates a full copy of the graph. Declaration public Graph Clone(MemStorage storage = null) Parameters Type Name Description MemStorage storage The destination MemStorage instance on which to store the new graph. If storage is null , the same memory storage of this graph is used. Returns Type Description Graph A new Graph instance that is a copy of this graph. | Improve this Doc View Source GetVertexDegree(Int32) Counts the number of edges incident to the vertex. Declaration public int GetVertexDegree(int index) Parameters Type Name Description Int32 index The index of the graph vertex. Returns Type Description Int32 The number of edges incident to the vertex. | Improve this Doc View Source RemoveEdge(Int32, Int32) Removes an edge from the graph. Declaration public void RemoveEdge(int startIndex, int endIndex) Parameters Type Name Description Int32 startIndex The index of the starting vertex of the edge. Int32 endIndex The index of the ending vertex of the edge. | Improve this Doc View Source RemoveVertex(Int32) Removes a vertex from the graph. Declaration public int RemoveVertex(int index) Parameters Type Name Description Int32 index The index of the removed vertex. Returns Type Description Int32 The number of edges deleted."
  },
  "api/OpenCV.Net.HaarClassifierCascade.html": {
    "href": "api/OpenCV.Net.HaarClassifierCascade.html",
    "title": "Class HaarClassifierCascade",
    "keywords": "Class HaarClassifierCascade Represents a cascade or tree of boosted Haar stage classifiers. Inheritance Object CVHandle HaarClassifierCascade Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public class HaarClassifierCascade : CVHandle Methods | Improve this Doc View Source DetectObjects(Arr, MemStorage, Double, Int32, HaarDetectObjectFlags, Size, Size) Detects objects in the image. Declaration public Seq DetectObjects(Arr image, MemStorage storage, double scaleFactor = 1.1, int minNeighbors = 3, HaarDetectObjectFlags flags = default(HaarDetectObjectFlags), Size minSize = default(Size), Size maxSize = default(Size)) Parameters Type Name Description Arr image Image to detect objects in. MemStorage storage Memory storage to store the resultant sequence of the object candidate rectangles. Double scaleFactor The factor by which the search window is scaled between the subsequent scans, 1.1 means increasing window by 10%. Int32 minNeighbors Minimum number (minus 1) of neighbor rectangles that make up an object. All the groups of a smaller number of rectangles than minNeighbors -1 are rejected. If it is 0, the method does not do any grouping at all and returns all the detected candidate rectangles, which may be useful if the user wants to apply a customized grouping procedure. HaarDetectObjectFlags flags Mode of operation. Size minSize Minimum window size. By default, it is set to the size of samples the classifier has been trained on (20x20 for face detection). Size maxSize Maximum window size. By default, it is set to the total image size. Returns Type Description Seq The sequence of grouped (or ungrouped) object rectangles. | Improve this Doc View Source Load(String) Loads a boosted Haar classifier cascade from a file. This method ensures that all dependencies are loaded and is a temporary workaround to ensure Load<TElement>(String, MemStorage, String) does not throw an error. Declaration public static HaarClassifierCascade Load(string fileName) Parameters Type Name Description String fileName The path to the trained classifier cascade. Returns Type Description HaarClassifierCascade A new instance of the HaarClassifierCascade class. | Improve this Doc View Source ReleaseHandle() Executes the code required to free the native HaarClassifierCascade handle. Declaration protected override bool ReleaseHandle() Returns Type Description Boolean true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false ."
  },
  "api/OpenCV.Net.HaarDetectObjectFlags.html": {
    "href": "api/OpenCV.Net.HaarDetectObjectFlags.html",
    "title": "Enum HaarDetectObjectFlags",
    "keywords": "Enum HaarDetectObjectFlags Specifies available operation flags for DetectObjects(Arr, MemStorage, Double, Int32, HaarDetectObjectFlags, Size, Size) . Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum HaarDetectObjectFlags : int Fields Name Description DoCannyPruning Specifies that flat regions of the image (with no lines) should be skipped by the classifier. DoRoughSearch Specifies that the search should terminate at whatever scale the first candidate is found. Used only in combination with FindBiggestObject . FindBiggestObject Specifies that only the largest object found should be returned. None Specifies that no operation flags are active. ScaleImage Specifies that the image should be scaled rather than the detector."
  },
  "api/OpenCV.Net.Histogram.html": {
    "href": "api/OpenCV.Net.Histogram.html",
    "title": "Class Histogram",
    "keywords": "Class Histogram Represents a multi-dimensional histogram. Inheritance Object Histogram Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public sealed class Histogram : SafeHandleZeroOrMinusOneIsInvalid Constructors | Improve this Doc View Source Histogram(Int32, Int32[], HistogramType, Single[][], Boolean) Initializes a new instance of the Histogram class with the specified size. Declaration public Histogram(int dims, int[] sizes, HistogramType type, float[][] ranges = null, bool uniform = true) Parameters Type Name Description Int32 dims Number of histogram dimensions. Int32 [] sizes Array of the histogram dimension sizes. HistogramType type Histogram representation format. Single [][] ranges Array of ranges for the histogram bins. Boolean uniform If true the histogram has evenly spaced bins and for each dimension, ranges contains its lower and upper boundaries which are then used to split the dimension into equally sized bins. Otherwise, ranges specifies for each dimension the edges of each bin. Properties | Improve this Doc View Source Bins Gets the multi-dimensional array of histogram data. Declaration public Arr Bins { get; } Property Value Type Description Arr | Improve this Doc View Source IsUniform Gets a value indicating whether the histogram uses evenly spaced bins. Declaration public bool IsUniform { get; } Property Value Type Description Boolean | Improve this Doc View Source Type Gets the type of the histogram representation format. Declaration public HistogramType Type { get; } Property Value Type Description HistogramType Methods | Improve this Doc View Source CalcArrBackProject(Arr[], Arr) Calculates the back projection. Declaration public void CalcArrBackProject(Arr[] images, Arr dst) Parameters Type Name Description Arr [] images Source images. Arr dst Destination back projection image of the same type as the source images . | Improve this Doc View Source CalcArrBackProjectPatch(Arr[], Arr, Size, HistogramComparison, Double) Locates a template within an image by using a histogram comparison. Declaration public void CalcArrBackProjectPatch(Arr[] images, Arr dst, Size range, HistogramComparison method, double factor) Parameters Type Name Description Arr [] images Source images. Arr dst Destination image. Size range Size of the patch slid though the source image. HistogramComparison method The histogram comparison method. Double factor Normalization factor for histograms. | Improve this Doc View Source CalcArrHist(Arr[], Boolean, Arr) Calculates the histogram of image(s). Declaration public void CalcArrHist(Arr[] images, bool accumulate = false, Arr mask = null) Parameters Type Name Description Arr [] images Source images. Boolean accumulate If true , the histogram is not cleared in the beginning. This feature allows the user to compute a single histogram from several images, or to update the histogram online. Arr mask The operation mask, determines what pixels of the source images are counted. | Improve this Doc View Source CalcProbDensity(Histogram, Histogram, Double) Divides one histogram by another and stores the result in this instance. Declaration public void CalcProbDensity(Histogram hist1, Histogram hist2, double scale = null) Parameters Type Name Description Histogram hist1 First histogram (the divisor). Histogram hist2 Second histogram. Double scale Scale factor. | Improve this Doc View Source Clear() Clears the histogram. Declaration public void Clear() | Improve this Doc View Source Clone() Creates a new Histogram that is a copy of the current instance. Declaration public Histogram Clone() Returns Type Description Histogram A new Histogram that is a copy of this instance. | Improve this Doc View Source Compare(Histogram, HistogramComparison) Compares this histogram with another dense histogram. Declaration public double Compare(Histogram other, HistogramComparison method) Parameters Type Name Description Histogram other The second dense histogram. HistogramComparison method The comparison method to be used. Returns Type Description Double The distance between the two histograms. | Improve this Doc View Source Copy(out Histogram) Copies the histogram. The method copies this histogram’s bin values to the destination histogram and sets the same bin value ranges as this instance. Declaration public void Copy(out Histogram dst) Parameters Type Name Description Histogram dst The destination histogram. | Improve this Doc View Source GetBinRanges() Gets the bounds of the histogram bins. Declaration public float[][] GetBinRanges() Returns Type Description Single [][] The array of ranges for the histogram bins. | Improve this Doc View Source GetMinMaxValue(out Single, out Single, Int32[], Int32[]) Finds the minimum and maximum histogram bins. Declaration public void GetMinMaxValue(out float minValue, out float maxValue, int[] minIdx = null, int[] maxIdx = null) Parameters Type Name Description Single minValue The output minimum value of the histogram. Single maxValue The output maximum value of the histogram. Int32 [] minIdx The array of coordinates for the minimum. Int32 [] maxIdx The array of coordinates for the maximum. | Improve this Doc View Source Normalize(Double) Normalizes the histogram such that the sum of the bins is equal to factor . Declaration public void Normalize(double factor) Parameters Type Name Description Double factor Normalization factor. | Improve this Doc View Source QueryValue(Int32) Queries the value of the histogram bin. Declaration public double QueryValue(int idx0) Parameters Type Name Description Int32 idx0 The index of the bin. Returns Type Description Double The value of the specified bin. | Improve this Doc View Source QueryValue(Int32, Int32) Queries the value of the histogram bin. Declaration public double QueryValue(int idx0, int idx1) Parameters Type Name Description Int32 idx0 The first index of the bin. Int32 idx1 The second index of the bin. Returns Type Description Double The value of the specified bin. | Improve this Doc View Source QueryValue(Int32, Int32, Int32) Queries the value of the histogram bin. Declaration public double QueryValue(int idx0, int idx1, int idx2) Parameters Type Name Description Int32 idx0 The first index of the bin. Int32 idx1 The second index of the bin. Int32 idx2 The third index of the bin. Returns Type Description Double The value of the specified bin. | Improve this Doc View Source ReleaseHandle() Executes the code required to free the native Histogram handle. Declaration protected override bool ReleaseHandle() Returns Type Description Boolean true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false . | Improve this Doc View Source SetBinRanges(Single[][], Boolean) Sets the bounds of the histogram bins. Declaration public void SetBinRanges(float[][] ranges, bool uniform = true) Parameters Type Name Description Single [][] ranges Array of ranges for the histogram bins. Boolean uniform If true the histogram has evenly spaced bins and for each dimension, ranges contains its lower and upper boundaries which are then used to split the dimension into equally sized bins. Otherwise, ranges specifies for each dimension the edges of each bin. | Improve this Doc View Source Threshold(Double) Thresholds the histogram by clearing histogram bins that are below the specified threshold . Declaration public void Threshold(double threshold) Parameters Type Name Description Double threshold Threshold level."
  },
  "api/OpenCV.Net.HistogramComparison.html": {
    "href": "api/OpenCV.Net.HistogramComparison.html",
    "title": "Enum HistogramComparison",
    "keywords": "Enum HistogramComparison Specifies the available histogram comparison methods. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum HistogramComparison : int Fields Name Description Bhattacharyya Specifies that the histograms should be compared using the Bhattacharyya distance. This method only works on normalized histograms. ChiSquare Specifies that the histograms should be compared using a chi-squared statistic. Correlation Specifies that the histograms should be compared using a correlation measure. Hellinger Specifies that the histograms should be compared using the Bhattacharyya distance. This method only works on normalized histograms. Intersection Specifies that the histograms should be compared using bin intersection."
  },
  "api/OpenCV.Net.HistogramType.html": {
    "href": "api/OpenCV.Net.HistogramType.html",
    "title": "Enum HistogramType",
    "keywords": "Enum HistogramType Specifies the available histogram types. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum HistogramType : int Fields Name Description Array Specifies that histogram data is represented as a multi-dimensional dense array MatND . Sparse Specifies that histogram data is represented as a multi-dimensional sparse array SparseMat . Tree Specifies that histogram data is represented as a multi-dimensional sparse array SparseMat ."
  },
  "api/OpenCV.Net.HoughCirclesMethod.html": {
    "href": "api/OpenCV.Net.HoughCirclesMethod.html",
    "title": "Enum HoughCirclesMethod",
    "keywords": "Enum HoughCirclesMethod Specifies available Hough transform variants for circle detection. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum HoughCirclesMethod : int Fields Name Description Gradient Implements the 2-1 Hough Transform for circle detection."
  },
  "api/OpenCV.Net.HoughLinesMethod.html": {
    "href": "api/OpenCV.Net.HoughLinesMethod.html",
    "title": "Enum HoughLinesMethod",
    "keywords": "Enum HoughLinesMethod Specifies available Hough transform variants for line detection. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum HoughLinesMethod : int Fields Name Description MultiScale Multi-scale variant of the classical Hough transform. The lines are encoded the same way as Standard . Probabilistic Probabilistic Hough transform (more efficient in case the picture contains a few long linear segments). It returns line segments rather than the whole line. Each segment is represented by starting and ending points. Standard Classical or standard Hough transform. Every line is represented by two floating-point numbers rho and theta, where rho is a distance between (0,0) point and the line, and theta is the angle between x-axis and the normal to the line."
  },
  "api/OpenCV.Net.html": {
    "href": "api/OpenCV.Net.html",
    "title": "Namespace OpenCV.Net",
    "keywords": "Namespace OpenCV.Net Classes Arr Represents an arbitrary array-like data structure. Capture Represents a video capture stream. Chain Represents a Freeman chain where a polygon is specified as a sequence of steps in one of eight directions from a point origin. CompressionParameters Specifies the available image compression parameters. Contour Represents a polygonal contour. ContourScanner Represents a contour scanning process. CV This class provides wrapper methods for the OpenCV C interface native functions. CVException The exception that is thrown when OpenCV error status is set. CVHandle Represents a native handle to OpenCV structures and classes. FileNode Represents a file storage node. When XML/YAML file is read, it is first parsed and stored in the memory as a hierarchical collection of nodes. Each node can be a “leaf”, that is, contain a single number or a string, or be a collection of other nodes. FileStorage Represents a storage associated with a file on disk. Font Represents a font that can be passed to text rendering functions. Graph Represents an oriented or unoriented weighted graph. HaarClassifierCascade Represents a cascade or tree of boosted Haar stage classifiers. Histogram Represents a multi-dimensional histogram. IplConvKernel Represents a rectangular convolution kernel used for morphological operations. IplImage Represents an IPL image header. KalmanFilter Represents a Kalman filter state. LatentSvmDetector Represents a trained latent SVM detector. Mat Represents a multi-channel matrix. MatND Represents a multi-dimensional dense multi-channel array. MemStorage Represents a growing memory storage. NamedWindow Represents a window which can be used as placeholder for images and trackbars. PositObject Represents information about a 3D object model for camera pose estimation. Seq Represents a growable sequence of elements. Set Represents a collection of nodes. SparseMat Represents a multi-dimensional sparse multi-channel array. SparseNode Represents an element node in a sparse array. StereoBM Represents the block matching algorithm for computing stereo correspondence. StringHashNode Represents a unique reference for a given name. VideoWriter Represents a frame writer for a video file stream. Structs AttrList Represents a list of attributes. AvgComp Represents a structure that contains the bounding box and number of neighbors of objects detected by DetectObjects(Arr, MemStorage, Double, Int32, HaarDetectObjectFlags, Size, Size) . ConnectedComp Represents a connected component. ConvexityDefect Represents a contour convexity defect. HuMoments Represents the seven invariant Hu image moments. MemBlock Represents a memory storage block. MemStoragePos Represents a memory storage position. Moments Represents all the moments up to the third order of a polygon or rasterized shape. ObjectDetection Represents a structure that contains the bounding box and confidence level for a detected object. Point Represents a 2D point with integer coordinates (usually zero-based). Point2d Represents a 2D point with double-precision floating-point coordinates. Point2f Represents a 2D point with single-precision floating-point coordinates. Point3d Represents a 3D point with double-precision floating-point coordinates. Point3f Represents a 3D point with single-precision floating-point coordinates. Rect Represents the offset and size of a rectangle. RotatedRect Represents a possibly rotated rectangle. Scalar A container for one-,two-,three- or four-tuples of doubles. Scalar is always represented as a four-tuple. SeqSlice Represents a sequence slice. Size Represents the pixel-accurate size of a rectangle. Size2f Represents the sub-pixel accurate size of a rectangle. TermCriteria Represents a termination criteria for iterative algorithms. Enums AdaptiveThresholdMethod Specifies the available adaptive threshold methods. ButtonType Specifies the available GUI button types. CameraCalibrationFlags Specifies available operation flags for camera calibration. CaptureDomain Specifies the available camera or video capture domains. CaptureProperty Specifies the available properties of a camera or video file. CheckArrayFlags Specifies operation flags for CheckRange(CheckArrayFlags, Double, Double) . ChessboardCalibrationFlags Specifies available operation flags for finding chessboard corners. ColorConversion Specifies the color space conversion used by CvtColor(Arr, Arr, ColorConversion) . ComparisonOperation Specifies the comparison operation used to test the relation between individual array elements in Cmp(Arr, Arr, Arr, ComparisonOperation) and CmpS(Arr, Double, Arr, ComparisonOperation) . ContourApproximation Specifies the available contour approximation methods. ContourRetrieval Specifies the available contour retrieval modes. ConvertImageFlags Specifies operation flags for ConvertImage(Arr, Arr, ConvertImageFlags) . CovarianceFlags Specifies operation flags for CalcCovarMatrix(Arr[], Arr, Arr, CovarianceFlags) . Depth Specifies the available element bit depth formats for Mat and Seq instances. DiscreteTransformFlags Specifies the operation of discrete linear transforms and related functions. DistanceLabel Specifies the content of the output label array in DistTransform(Arr, Arr, DistanceType, Int32, Single[], Arr, DistanceLabel) . DistanceType Specifies the available types of distance functions. FarnebackFlowFlags Specifies available operation flags for CalcOpticalFlowFarneback(Arr, Arr, Arr, Double, Int32, Int32, Int32, Int32, Double, FarnebackFlowFlags) . FileNodeType Specifies the available types of file storage node values. FindHomographyMethod Specifies available methods for computing the homography matrix. FlipMode Specifies the mirror mode used in Flip(Arr, Arr, FlipMode) . FloodFillFlags Specifies flags for the flood fill algorithm. FontFace Specifies font face flags for instances of Font . FontStyle Specifies the available Qt font glyph styles. FontWeight Specifies the predefined font weights for Qt fonts. FundamentalMatrixMethod Specifies available methods for computing the fundamental matrix. GemmFlags Specifies operation flags for GEMM(Arr, Arr, Double, Arr, Double, Arr, GemmFlags) . HaarDetectObjectFlags Specifies available operation flags for DetectObjects(Arr, MemStorage, Double, Int32, HaarDetectObjectFlags, Size, Size) . HistogramComparison Specifies the available histogram comparison methods. HistogramType Specifies the available histogram types. HoughCirclesMethod Specifies available Hough transform variants for circle detection. HoughLinesMethod Specifies available Hough transform variants for line detection. InpaintMethod Specifies available inpainting methods. InversionMethod Specifies the inversion method for solving linear systems. IplBorder Specifies the type of border to create around a copied image. IplDepth Specifies the available pixel bit depth formats for IplImage instances. IplOrigin Specifies the available data origin for IplImage instances. KMeansFlags Specifies operation flags for the k-means algorithm. LineFlags Specifies flags for the line drawing algorithm used for rasterizing. LineType Specifies the type of connectivity used for line rasterizing. LKFlowFlags Specifies available operation flags for CalcOpticalFlowPyrLK(Arr, Arr, Arr, Arr, Point2f[], Point2f[], Size, Int32, Byte[], Single[], TermCriteria, LKFlowFlags) and CalcAffineFlowPyrLK(Arr, Arr, Arr, Arr, Point2f[], Point2f[], Single[], Size, Int32, Byte[], Single[], TermCriteria, LKFlowFlags) . LoadImageFlags Specifies the color type of a loaded image. MorphologicalOperation Specifies the type of morphological operation used by MorphologyEx(Arr, Arr, Arr, IplConvKernel, MorphologicalOperation, Int32) . MouseEvent Specifies mouse event categories. MouseEventFlags Specifies mouse event modifier flags. NormTypes Specifies flags for Norm(Arr, Arr, NormTypes, Arr) and Normalize(Arr, Arr, Double, Double, NormTypes, Arr) . PcaFlags Specifies operation flags for CalcPCA(Arr, Arr, Arr, Arr, PcaFlags) . PolygonApproximation Specifies the available polygon approximation algorithms. PyramidDecompositionFilter Specifies the type of linear filter used for pyramid up and downsampling. RandDistribution Specifies the random distribution to use for RandArr(ref UInt64, Arr, RandDistribution, Scalar, Scalar) . ReduceOperation Specifies the matrix reduction operation. SequenceElementType Specifies the most common sequence element types. SequenceFlags Specifies a set of operational flags for Seq instances. SequenceKind Specifies the kind of Seq instances. ShapeMatchingMethod Specifies the available shape comparison methods. ShapeOrientation Specifies the desired orientation of the convex hull. SmoothMethod Specifies the type of smoothing used by Smooth(Arr, Arr, SmoothMethod, Int32, Int32, Double, Double) . SortFlags Specifies operation flags for the Sort(Arr, Arr, Arr, SortFlags) method. StereoBMPreFilterType Specifies available types of stereo block matching pre-filtering. StereoBMPreset Specifies available presets of stereo block matching algorithm parameters. StereoCalibrationFlags Specifies available operation flags for stereo camera calibration. StereoRectificationFlags Specifies available operation flags for stereo rectification. StorageFlags Specifies available flags for creating FileStorage instances. StructStorageFlags Specifies type flags for writing compound structures to a FileStorage instance. StructuringElementShape Specifies the shape of the structuring element kernel. SubPixelInterpolation Specifies the interpolation method used by Resize(Arr, Arr, SubPixelInterpolation) . SvdFlags Specifies operation flags for SVD(Arr, Arr, Arr, Arr, SvdFlags) . TemplateMatchingMethod Specifies the way the template is compared with image regions in MatchTemplate(Arr, Arr, Arr, TemplateMatchingMethod) . TermCriteriaType Specifies the available termination criteria modes for iterative algorithms. ThresholdTypes Specifies the available threshold types. WarpFlags Specifies interpolation and operational flags for image warp methods. WindowFlags Specifies the available flags used to create a named window. WindowProperty Specifies the window properties that are available to query and modify. Delegates ButtonCallback Represents the method that will be called when the button changes state. MouseCallback Represents the method that will handle mouse events of a named window. OpenGLDrawCallback Represents the method that will draw OpenGL on top of the image display. TrackbarCallback Represents the method that wil be called whenever the trackbar changes value."
  },
  "api/OpenCV.Net.HuMoments.html": {
    "href": "api/OpenCV.Net.HuMoments.html",
    "title": "Struct HuMoments",
    "keywords": "Struct HuMoments Represents the seven invariant Hu image moments. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public struct HuMoments Fields | Improve this Doc View Source Hu1 The seven Hu moments invariant to image scale, rotation, and reflection except the seventh one, whose sign is changed by reflection. Declaration public double Hu1 Field Value Type Description Double | Improve this Doc View Source Hu2 The seven Hu moments invariant to image scale, rotation, and reflection except the seventh one, whose sign is changed by reflection. Declaration public double Hu2 Field Value Type Description Double | Improve this Doc View Source Hu3 The seven Hu moments invariant to image scale, rotation, and reflection except the seventh one, whose sign is changed by reflection. Declaration public double Hu3 Field Value Type Description Double | Improve this Doc View Source Hu4 The seven Hu moments invariant to image scale, rotation, and reflection except the seventh one, whose sign is changed by reflection. Declaration public double Hu4 Field Value Type Description Double | Improve this Doc View Source Hu5 The seven Hu moments invariant to image scale, rotation, and reflection except the seventh one, whose sign is changed by reflection. Declaration public double Hu5 Field Value Type Description Double | Improve this Doc View Source Hu6 The seven Hu moments invariant to image scale, rotation, and reflection except the seventh one, whose sign is changed by reflection. Declaration public double Hu6 Field Value Type Description Double | Improve this Doc View Source Hu7 The seven Hu moments invariant to image scale, rotation, and reflection except the seventh one, whose sign is changed by reflection. Declaration public double Hu7 Field Value Type Description Double"
  },
  "api/OpenCV.Net.InpaintMethod.html": {
    "href": "api/OpenCV.Net.InpaintMethod.html",
    "title": "Enum InpaintMethod",
    "keywords": "Enum InpaintMethod Specifies available inpainting methods. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum InpaintMethod : int Fields Name Description NavierStokes Specifies a Navier-Stokes based method. Telea Specifies the method by Alexandru Telea."
  },
  "api/OpenCV.Net.InversionMethod.html": {
    "href": "api/OpenCV.Net.InversionMethod.html",
    "title": "Enum InversionMethod",
    "keywords": "Enum InversionMethod Specifies the inversion method for solving linear systems. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum InversionMethod : int Fields Name Description Cholesky Cholesky decomposition. The matrix must be symmetrical and positively defined. LU Gaussian elimination with optimal pivot element chosen. Normal A non-exclusive flag meaning that the normal equations are solved instead of the original system. QR QR decomposition. The system can be over-defined and/or the input matrix can be singular. Svd Singular value decomposition (SVD) method. SvdSym SVD method for a symmetric positively-defined matrix."
  },
  "api/OpenCV.Net.IplBorder.html": {
    "href": "api/OpenCV.Net.IplBorder.html",
    "title": "Enum IplBorder",
    "keywords": "Enum IplBorder Specifies the type of border to create around a copied image. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum IplBorder : int Fields Name Description Constant Specifies that the border is filled with a fixed value. Reflect This border type is currently unsupported. Replicate Specifies that the pixels from the top and bottom rows, the left-most and right-most columns are replicated to fill the border. Wrap This border type is currently unsupported."
  },
  "api/OpenCV.Net.IplConvKernel.html": {
    "href": "api/OpenCV.Net.IplConvKernel.html",
    "title": "Class IplConvKernel",
    "keywords": "Class IplConvKernel Represents a rectangular convolution kernel used for morphological operations. Inheritance Object IplConvKernel Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public class IplConvKernel : SafeHandleZeroOrMinusOneIsInvalid Constructors | Improve this Doc View Source IplConvKernel(Int32, Int32, Int32, Int32, StructuringElementShape) Initializes a new instance of the IplConvKernel class with the specified size, anchor and shape for the structuring element. Declaration public IplConvKernel(int cols, int rows, int anchorX, int anchorY, StructuringElementShape shape) Parameters Type Name Description Int32 cols The width of the structuring element. Int32 rows The height of the structuring element. Int32 anchorX The x-coordinate of the anchor. Int32 anchorY The y-coordinate of the anchor. StructuringElementShape shape The shape of the structuring element. | Improve this Doc View Source IplConvKernel(Int32, Int32, Int32, Int32, StructuringElementShape, Int32[]) Initializes a new instance of the IplConvKernel class with the specified size, anchor, shape and optionally custom kernel values for the structuring element. Declaration public IplConvKernel(int cols, int rows, int anchorX, int anchorY, StructuringElementShape shape, int[] values) Parameters Type Name Description Int32 cols The width of the structuring element. Int32 rows The height of the structuring element. Int32 anchorX The x-coordinate of the anchor. Int32 anchorY The y-coordinate of the anchor. StructuringElementShape shape The shape of the structuring element. Int32 [] values The kernel values that specify the custom shape of the structuring element, when shape is equal to Custom . Properties | Improve this Doc View Source Anchor Gets the anchor position within the element. The default value (-1, -1) means that the anchor is at the center. Note that only the shape of a cross-shaped element depends on the anchor position. In other cases the anchor just regulates how much the result of the morphological operation is shifted. Declaration public Point Anchor { get; } Property Value Type Description Point | Improve this Doc View Source Size Gets the size of the convolution kernel. Declaration public Size Size { get; } Property Value Type Description Size Methods | Improve this Doc View Source ReleaseHandle() Executes the code required to free the native IplConvKernel handle. Declaration protected override bool ReleaseHandle() Returns Type Description Boolean true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false ."
  },
  "api/OpenCV.Net.IplDepth.html": {
    "href": "api/OpenCV.Net.IplDepth.html",
    "title": "Enum IplDepth",
    "keywords": "Enum IplDepth Specifies the available pixel bit depth formats for IplImage instances. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum IplDepth : int Fields Name Description F32 Specifies a floating point 32-bit pixel depth. F64 Specifies a floating point 64-bit pixel depth. S16 Specifies a signed 16-bit pixel depth. S32 Specifies a signed 32-bit pixel depth. S8 Specifies a signed 8-bit pixel depth. U16 Specifies an unsigned 16-bit pixel depth. U8 Specifies an unsigned 8-bit pixel depth."
  },
  "api/OpenCV.Net.IplImage.html": {
    "href": "api/OpenCV.Net.IplImage.html",
    "title": "Class IplImage",
    "keywords": "Class IplImage Represents an IPL image header. Inheritance Object CVHandle Arr IplImage Inherited Members Arr.ElementType Arr.Size Arr.GetRow(Int32) Arr.GetRows(Int32, Int32, Int32) Arr.GetCol(Int32) Arr.GetCols(Int32, Int32) Arr.GetDiag(Int32) Arr.GetDims(Int32[]) Arr.GetDimSize(Int32) Arr.Ptr(Int32) Arr.Ptr(Int32, Int32) Arr.Ptr(Int32, Int32) Arr.Ptr(Int32, Int32, Int32) Arr.Ptr(Int32, Int32, Int32) Arr.Ptr(Int32, Int32, Int32, Int32) Arr.Ptr(Int32[]) Arr.Ptr(Int32[], Int32, Boolean) Arr.Item[Int32] Arr.Item[Int32, Int32] Arr.Item[Int32, Int32, Int32] Arr.Item[Int32[]] Arr.GetReal(Int32) Arr.GetReal(Int32, Int32) Arr.GetReal(Int32, Int32, Int32) Arr.GetReal(Int32[]) Arr.SetReal(Int32, Double) Arr.SetReal(Int32, Int32, Double) Arr.SetReal(Int32, Int32, Int32, Double) Arr.SetReal(Int32[], Double) Arr.ClearND(Int32[]) Arr.GetMat(Boolean) Arr.GetImage() Arr.Reshape(Int32, Int32) Arr.SetData(IntPtr, Int32) Arr.GetRawData(IntPtr) Arr.GetRawData(IntPtr, Int32) Arr.GetRawData(IntPtr, Int32, Size) Arr.Set(Scalar, Arr) Arr.SetZero() Arr.CheckRange(CheckArrayFlags, Double, Double) Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public class IplImage : Arr Constructors | Improve this Doc View Source IplImage(Size, IplDepth, Int32) Initializes a new instance of the IplImage class with the specified size , pixel bit depth and channels per element. Declaration public IplImage(Size size, IplDepth depth, int channels) Parameters Type Name Description Size size The pixel-accurate size of the IplImage . IplDepth depth The bit depth of image pixels. Int32 channels The number of channels per pixel. | Improve this Doc View Source IplImage(Size, IplDepth, Int32, IntPtr) Initializes a new instance of the IplImage class with the specified size , pixel bit depth and channels per element. A pointer to the image raw data is provided. Declaration public IplImage(Size size, IplDepth depth, int channels, IntPtr data) Parameters Type Name Description Size size The pixel-accurate size of the IplImage . IplDepth depth The bit depth of image pixels. Int32 channels The number of channels per pixel. IntPtr data A pointer to the image raw pixel data. Properties | Improve this Doc View Source ChannelOfInterest Gets or sets the image channel of interest. Only a few functions support COI. Declaration public int ChannelOfInterest { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Channels Gets the number of channels per image pixel. Declaration public int Channels { get; } Property Value Type Description Int32 | Improve this Doc View Source Depth Gets the bit depth of image pixels. Declaration public IplDepth Depth { get; } Property Value Type Description IplDepth | Improve this Doc View Source Height Gets the height of the image in pixels. Declaration public int Height { get; } Property Value Type Description Int32 | Improve this Doc View Source ImageData Gets a pointer to the aligned image data. Declaration public IntPtr ImageData { get; } Property Value Type Description IntPtr | Improve this Doc View Source RegionOfInterest Gets or sets the image region of interest. Declaration public Rect RegionOfInterest { get; set; } Property Value Type Description Rect | Improve this Doc View Source Width Gets the width of the image in pixels. Declaration public int Width { get; } Property Value Type Description Int32 | Improve this Doc View Source WidthStep Gets the size of the aligned image row in bytes. Declaration public int WidthStep { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Clone() Creates a new IplImage that is a copy of the current instance. Declaration public IplImage Clone() Returns Type Description IplImage A new IplImage that is a copy of this instance. WidthStep may differ. | Improve this Doc View Source GetSubRect(Rect) Creates a new IplImage from a subrectangle of the current instance. No data is copied. Declaration public IplImage GetSubRect(Rect rect) Parameters Type Name Description Rect rect Zero-based coordinates of the rectangle of interest. Returns Type Description IplImage A new IplImage that corresponds to the specified rectangle of the current image. | Improve this Doc View Source ReleaseHandle() Executes the code required to free the native IplImage handle. Declaration protected override bool ReleaseHandle() Returns Type Description Boolean true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false . | Improve this Doc View Source ResetRegionOfInterest() Resets the image region and channel of interest. Declaration public void ResetRegionOfInterest() | Improve this Doc View Source ToString() Creates a representation of this IplImage instance. Declaration public override string ToString() Returns Type Description String A containing the width, height, depth and number of channels of this IplImage instance. Operators | Improve this Doc View Source Addition(IplImage, IplImage) Calculates the per-element sum of two IplImage values. Declaration public static IplImage operator +(IplImage left, IplImage right) Parameters Type Name Description IplImage left The first value to add. IplImage right The second value to add. Returns Type Description IplImage The result of adding left and right . | Improve this Doc View Source Addition(IplImage, Scalar) Calculates the per-element sum of a IplImage and a Scalar . Declaration public static IplImage operator +(IplImage left, Scalar right) Parameters Type Name Description IplImage left The image to add. Scalar right The scalar to add. Returns Type Description IplImage The result of adding left and right . | Improve this Doc View Source Addition(IplImage, Double) Calculates the per-element sum of a IplImage and a value. Declaration public static IplImage operator +(IplImage left, double right) Parameters Type Name Description IplImage left The image to add. Double right The scalar value to add. Returns Type Description IplImage The result of adding left and right . | Improve this Doc View Source Addition(Scalar, IplImage) Calculates the per-element sum of a Scalar and a IplImage . Declaration public static IplImage operator +(Scalar left, IplImage right) Parameters Type Name Description Scalar left The scalar to add. IplImage right The image to add. Returns Type Description IplImage The result of adding left and right . | Improve this Doc View Source Addition(Double, IplImage) Calculates the per-element sum of a value and a IplImage . Declaration public static IplImage operator +(double left, IplImage right) Parameters Type Name Description Double left The scalar value to add. IplImage right The image to add. Returns Type Description IplImage The result of adding left and right . | Improve this Doc View Source BitwiseAnd(IplImage, IplImage) Performs per-element bit-wise conjunction of two IplImage values. Declaration public static IplImage operator &(IplImage left, IplImage right) Parameters Type Name Description IplImage left The first image value. IplImage right The second image value. Returns Type Description IplImage The result of performing the bit-wise conjunction of left and right . | Improve this Doc View Source BitwiseAnd(IplImage, Scalar) Performs per-element bit-wise conjunction of a IplImage and a Scalar . Declaration public static IplImage operator &(IplImage left, Scalar right) Parameters Type Name Description IplImage left The image value. Scalar right The scalar value. Returns Type Description IplImage The result of performing the bit-wise conjunction of left and right . | Improve this Doc View Source BitwiseAnd(IplImage, Double) Performs per-element bit-wise conjunction of a IplImage and a value. Declaration public static IplImage operator &(IplImage left, double right) Parameters Type Name Description IplImage left The image value. Double right The scalar value. Returns Type Description IplImage The result of performing the bit-wise conjunction of left and right . | Improve this Doc View Source BitwiseAnd(Scalar, IplImage) Performs per-element bit-wise conjunction of a Scalar and a IplImage . Declaration public static IplImage operator &(Scalar left, IplImage right) Parameters Type Name Description Scalar left The scalar value. IplImage right The image value. Returns Type Description IplImage The result of performing the bit-wise conjunction of left and right . | Improve this Doc View Source BitwiseAnd(Double, IplImage) Performs per-element bit-wise conjunction of a value and a IplImage . Declaration public static IplImage operator &(double left, IplImage right) Parameters Type Name Description Double left The scalar value. IplImage right The image value. Returns Type Description IplImage The result of performing the bit-wise conjunction of left and right . | Improve this Doc View Source BitwiseOr(IplImage, IplImage) Performs per-element bit-wise disjunction of two IplImage values. Declaration public static IplImage operator |(IplImage left, IplImage right) Parameters Type Name Description IplImage left The first image value. IplImage right The second image value. Returns Type Description IplImage The result of performing the bit-wise disjunction of left and right . | Improve this Doc View Source BitwiseOr(IplImage, Scalar) Performs per-element bit-wise disjunction of a IplImage and a Scalar . Declaration public static IplImage operator |(IplImage left, Scalar right) Parameters Type Name Description IplImage left The image value. Scalar right The scalar value. Returns Type Description IplImage The result of performing the bit-wise disjunction of left and right . | Improve this Doc View Source BitwiseOr(IplImage, Double) Performs per-element bit-wise disjunction of a IplImage and a value. Declaration public static IplImage operator |(IplImage left, double right) Parameters Type Name Description IplImage left The image value. Double right The scalar value. Returns Type Description IplImage The result of performing the bit-wise disjunction of left and right . | Improve this Doc View Source BitwiseOr(Scalar, IplImage) Performs per-element bit-wise disjunction of a Scalar and a IplImage . Declaration public static IplImage operator |(Scalar left, IplImage right) Parameters Type Name Description Scalar left The scalar value. IplImage right The image value. Returns Type Description IplImage The result of performing the bit-wise disjunction of left and right . | Improve this Doc View Source BitwiseOr(Double, IplImage) Performs per-element bit-wise disjunction of a value and a IplImage . Declaration public static IplImage operator |(double left, IplImage right) Parameters Type Name Description Double left The scalar value. IplImage right The image value. Returns Type Description IplImage The result of performing the bit-wise disjunction of left and right . | Improve this Doc View Source Division(IplImage, IplImage) Calculates the per-element division of two IplImage values. Declaration public static IplImage operator /(IplImage left, IplImage right) Parameters Type Name Description IplImage left The dividend. IplImage right The divisor. Returns Type Description IplImage The result of dividing left by right . | Improve this Doc View Source Division(IplImage, Double) Calculates the per-element division of a IplImage by a scalar value. Declaration public static IplImage operator /(IplImage left, double right) Parameters Type Name Description IplImage left The image dividend. Double right The scalar divisor. Returns Type Description IplImage The result of dividing left by right . | Improve this Doc View Source Division(Double, IplImage) Calculates the per-element division of a scalar value by a IplImage . Declaration public static IplImage operator /(double left, IplImage right) Parameters Type Name Description Double left The scalar dividend. IplImage right The image divisor. Returns Type Description IplImage The result of dividing left by right . | Improve this Doc View Source ExclusiveOr(IplImage, IplImage) Performs per-element bit-wise \"exclusive or\" operation on two IplImage values. Declaration public static IplImage operator ^(IplImage left, IplImage right) Parameters Type Name Description IplImage left The first image value. IplImage right The second image value. Returns Type Description IplImage The result of performing the bit-wise \"exclusive or\" operation of left and right . | Improve this Doc View Source ExclusiveOr(IplImage, Scalar) Performs per-element bit-wise \"exclusive or\" operation of a IplImage and a Scalar . Declaration public static IplImage operator ^(IplImage left, Scalar right) Parameters Type Name Description IplImage left The image value. Scalar right The scalar value. Returns Type Description IplImage The result of performing the bit-wise \"exclusive or\" operation of left and right . | Improve this Doc View Source ExclusiveOr(IplImage, Double) Performs per-element bit-wise \"exclusive or\" operation of a IplImage and a value. Declaration public static IplImage operator ^(IplImage left, double right) Parameters Type Name Description IplImage left The image value. Double right The scalar value. Returns Type Description IplImage The result of performing the bit-wise \"exclusive or\" operation of left and right . | Improve this Doc View Source ExclusiveOr(Scalar, IplImage) Performs per-element bit-wise \"exclusive or\" operation of a Scalar and a IplImage . Declaration public static IplImage operator ^(Scalar left, IplImage right) Parameters Type Name Description Scalar left The scalar value. IplImage right The image value. Returns Type Description IplImage The result of performing the bit-wise \"exclusive or\" operation of left and right . | Improve this Doc View Source ExclusiveOr(Double, IplImage) Performs per-element bit-wise \"exclusive or\" operation of a value and a IplImage . Declaration public static IplImage operator ^(double left, IplImage right) Parameters Type Name Description Double left The scalar value. IplImage right The image value. Returns Type Description IplImage The result of performing the bit-wise \"exclusive or\" operation of left and right . | Improve this Doc View Source Explicit(IplImage to Mat) Converts a IplImage value to a Mat . Declaration public static explicit operator Mat(IplImage image) Parameters Type Name Description IplImage image The image to convert. Returns Type Description Mat A Mat value of the same size and element type. | Improve this Doc View Source Multiply(IplImage, IplImage) Calculates the per-element product of two IplImage values. Declaration public static IplImage operator *(IplImage left, IplImage right) Parameters Type Name Description IplImage left The first value to multiply. IplImage right The second value to multiply. Returns Type Description IplImage The result of multiplying left by right . | Improve this Doc View Source Multiply(IplImage, Double) Calculates the per-element product of a IplImage by a scalar value. Declaration public static IplImage operator *(IplImage left, double right) Parameters Type Name Description IplImage left The image to multiply. Double right The scalar value to multiply. Returns Type Description IplImage The result of multiplying left by right . | Improve this Doc View Source Multiply(Double, IplImage) Calculates the per-element product of a scalar value by a IplImage . Declaration public static IplImage operator *(double left, IplImage right) Parameters Type Name Description Double left The scalar value to multiply. IplImage right The image to multiply. Returns Type Description IplImage The result of multiplying left by right . | Improve this Doc View Source OnesComplement(IplImage) Performs per-element bit-wise inversion of the specified IplImage value. Declaration public static IplImage operator ~(IplImage image) Parameters Type Name Description IplImage image The image to invert. Returns Type Description IplImage The result of bitwise inverting image . | Improve this Doc View Source Subtraction(IplImage, IplImage) Calculates the per-element difference between two IplImage values. Declaration public static IplImage operator -(IplImage left, IplImage right) Parameters Type Name Description IplImage left The minuend. IplImage right The subtrahend. Returns Type Description IplImage The result of subtracting right from left . | Improve this Doc View Source Subtraction(IplImage, Scalar) Calculates the per-element difference between a IplImage and a Scalar . Declaration public static IplImage operator -(IplImage left, Scalar right) Parameters Type Name Description IplImage left The image minuend. Scalar right The scalar subtrahend. Returns Type Description IplImage The result of subtracting right from left . | Improve this Doc View Source Subtraction(IplImage, Double) Calculates the per-element difference between a IplImage and a value. Declaration public static IplImage operator -(IplImage left, double right) Parameters Type Name Description IplImage left The image minuend. Double right The scalar subtrahend. Returns Type Description IplImage The result of subtracting right from left . | Improve this Doc View Source Subtraction(Scalar, IplImage) Subtracts every element of the specified IplImage value from a Scalar . Declaration public static IplImage operator -(Scalar left, IplImage right) Parameters Type Name Description Scalar left The scalar minuend. IplImage right The image subtrahend. Returns Type Description IplImage The result of subtracting right from left . | Improve this Doc View Source Subtraction(Double, IplImage) Subtracts every element of the specified IplImage value from a value. Declaration public static IplImage operator -(double left, IplImage right) Parameters Type Name Description Double left The scalar minuend. IplImage right The image subtrahend. Returns Type Description IplImage The result of subtracting right from left . | Improve this Doc View Source UnaryNegation(IplImage) Negates the specified IplImage value. Declaration public static IplImage operator -(IplImage image) Parameters Type Name Description IplImage image The image to negate. Returns Type Description IplImage The result of image multiplied by negative one (-1). | Improve this Doc View Source UnaryPlus(IplImage) Returns the IplImage value (the sign is unchanged). Declaration public static IplImage operator +(IplImage image) Parameters Type Name Description IplImage image The image to return. Returns Type Description IplImage The image image ."
  },
  "api/OpenCV.Net.IplOrigin.html": {
    "href": "api/OpenCV.Net.IplOrigin.html",
    "title": "Enum IplOrigin",
    "keywords": "Enum IplOrigin Specifies the available data origin for IplImage instances. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum IplOrigin : int Fields Name Description BottomLeft Specifies a bottom-right reference coordinate system (Y increases upwards). TopLeft Specifies a top-left reference coordinate system (Y increases downwards)."
  },
  "api/OpenCV.Net.KalmanFilter.html": {
    "href": "api/OpenCV.Net.KalmanFilter.html",
    "title": "Class KalmanFilter",
    "keywords": "Class KalmanFilter Represents a Kalman filter state. Inheritance Object CVHandle KalmanFilter Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public class KalmanFilter : CVHandle Constructors | Improve this Doc View Source KalmanFilter(Int32, Int32, Int32) Initializes a new instance of the KalmanFilter class with the specified dimensionality. Declaration public KalmanFilter(int dynamParams, int measureParams, int controlParams) Parameters Type Name Description Int32 dynamParams Dimensionality of the state vector. Int32 measureParams Dimensionality of the measurement vector. Int32 controlParams Dimensionality of the control vector. Properties | Improve this Doc View Source ControlMatrix Gets the control matrix (B). Not used if there is no control. Declaration public Mat ControlMatrix { get; } Property Value Type Description Mat | Improve this Doc View Source ErrorCovariancePosterior Gets the posterior error estimate covariance matrix (P(k)): P(k) = (I - K(k) * H) * P'(k). Declaration public Mat ErrorCovariancePosterior { get; } Property Value Type Description Mat | Improve this Doc View Source ErrorCovariancePrior Gets the prior error estimate covariance matrix (P'(k)): P'(k) = A * P(k - 1) * At + Q. Declaration public Mat ErrorCovariancePrior { get; } Property Value Type Description Mat | Improve this Doc View Source Gain Gets the Kalman gain matrix (K(k)): K(k) = P'(k) * Ht * inv(H * P'(k) * Ht + R). Declaration public Mat Gain { get; } Property Value Type Description Mat | Improve this Doc View Source MeasurementMatrix Gets the measurement matrix (H). Declaration public Mat MeasurementMatrix { get; } Property Value Type Description Mat | Improve this Doc View Source MeasurementNoiseCovariance Gets the measurement noise covariance matrix (R). Declaration public Mat MeasurementNoiseCovariance { get; } Property Value Type Description Mat | Improve this Doc View Source ProcessNoiseCovariance Gets the process noise covariance matrix (Q). Declaration public Mat ProcessNoiseCovariance { get; } Property Value Type Description Mat | Improve this Doc View Source StateCorrected Gets the corrected state vector (x(k)): x(k) = x'(k) + K(k) * (z(k) - H * x'(k)) Declaration public Mat StateCorrected { get; } Property Value Type Description Mat | Improve this Doc View Source StatePredicted Gets the predicted state vector (x'(k)): x'(k) = A * x(k - 1) + B * u(k). Declaration public Mat StatePredicted { get; } Property Value Type Description Mat | Improve this Doc View Source TransitionMatrix Gets the state transition matrix (A). Declaration public Mat TransitionMatrix { get; } Property Value Type Description Mat Methods | Improve this Doc View Source Correct(Mat) Adjusts the model state. Declaration public Mat Correct(Mat measurement) Parameters Type Name Description Mat measurement The measurement vector z(k). Returns Type Description Mat The adjusted state estimate. | Improve this Doc View Source Predict() Estimates the subsequent model state. Declaration public Mat Predict() Returns Type Description Mat The estimated state vector. | Improve this Doc View Source Predict(Mat) Estimates the subsequent model state. Declaration public Mat Predict(Mat control) Parameters Type Name Description Mat control The control vector u(k) or null if there is no control. Returns Type Description Mat The estimated state vector. | Improve this Doc View Source ReleaseHandle() Executes the code required to free the native KalmanFilter handle. Declaration protected override bool ReleaseHandle() Returns Type Description Boolean true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false ."
  },
  "api/OpenCV.Net.KMeansFlags.html": {
    "href": "api/OpenCV.Net.KMeansFlags.html",
    "title": "Enum KMeansFlags",
    "keywords": "Enum KMeansFlags Specifies operation flags for the k-means algorithm. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum KMeansFlags : int Fields Name Description None Specifies that no operation flags are active. UseInitialLabels Specifies that during the first attempt the user-supplied labels should be used instead of computing them from the initial centers. For the second and further attempts, use the random or semi-random centers."
  },
  "api/OpenCV.Net.LatentSvmDetector.html": {
    "href": "api/OpenCV.Net.LatentSvmDetector.html",
    "title": "Class LatentSvmDetector",
    "keywords": "Class LatentSvmDetector Represents a trained latent SVM detector. Inheritance Object CVHandle LatentSvmDetector Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public class LatentSvmDetector : CVHandle Methods | Improve this Doc View Source DetectObjects(IplImage, MemStorage, Single, Int32) Find rectangular regions in the given image that are likely to contain objects and corresponding confidence levels. Declaration public Seq DetectObjects(IplImage image, MemStorage storage, float overlapThreshold = 0.5F, int numThreads = null) Parameters Type Name Description IplImage image The input image on which to detect objects. MemStorage storage Memory storage to store the resultant sequence of the object candidate rectangles. Single overlapThreshold Threshold for the non-maximum suppression algorithm. Int32 numThreads Number of threads used in parallel version of the algorithm. Returns Type Description Seq A sequence of detected objects of type ObjectDetection . | Improve this Doc View Source Load(String) Loads trained detector from a file. Declaration public static LatentSvmDetector Load(string fileName) Parameters Type Name Description String fileName Name of the file containing the description of a trained detector. Returns Type Description LatentSvmDetector A newly created instance of the LatentSvmDetector class. | Improve this Doc View Source ReleaseHandle() Executes the code required to free the native LatentSvmDetector handle. Declaration protected override bool ReleaseHandle() Returns Type Description Boolean true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false ."
  },
  "api/OpenCV.Net.LineFlags.html": {
    "href": "api/OpenCV.Net.LineFlags.html",
    "title": "Enum LineFlags",
    "keywords": "Enum LineFlags Specifies flags for the line drawing algorithm used for rasterizing. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum LineFlags : int Fields Name Description AntiAliased Specifies anti-aliased lines drawn using gaussian filtering. Connected4 Specifies the 4-connected Bresenham algorithm. Connected8 Specifies the 8-connected Bresenham algorithm."
  },
  "api/OpenCV.Net.LineType.html": {
    "href": "api/OpenCV.Net.LineType.html",
    "title": "Enum LineType",
    "keywords": "Enum LineType Specifies the type of connectivity used for line rasterizing. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum LineType : int Fields Name Description Connected4 Specifies the 4-connected Bresenham algorithm. Connected8 Specifies the 8-connected Bresenham algorithm."
  },
  "api/OpenCV.Net.LKFlowFlags.html": {
    "href": "api/OpenCV.Net.LKFlowFlags.html",
    "title": "Enum LKFlowFlags",
    "keywords": "Enum LKFlowFlags Specifies available operation flags for CalcOpticalFlowPyrLK(Arr, Arr, Arr, Arr, Point2f[], Point2f[], Size, Int32, Byte[], Single[], TermCriteria, LKFlowFlags) and CalcAffineFlowPyrLK(Arr, Arr, Arr, Arr, Point2f[], Point2f[], Single[], Size, Int32, Byte[], Single[], TermCriteria, LKFlowFlags) . Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum LKFlowFlags : int Fields Name Description GetMinEigenVals Specifies that output error array will contain the minimum eigenvalues of detected features. InitialGuesses Specifies that output array contains initial coordinate estimates of the features. None Specifies that no operation flags are active. PyrAReady Specifies that the pyramid for the first frame was precalculated before the call. PyrBReady Specifies that the pyramid for the second frame was precalculated before the call."
  },
  "api/OpenCV.Net.LoadImageFlags.html": {
    "href": "api/OpenCV.Net.LoadImageFlags.html",
    "title": "Enum LoadImageFlags",
    "keywords": "Enum LoadImageFlags Specifies the color type of a loaded image. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum LoadImageFlags : int Fields Name Description AnyColor Specifies that the image can be color or not. Unless AnyDepth is specified, the image will be converted to 8-bit. AnyDepth Specifies that the image can be either 16-bit or 32-bit when the input has the corresponding depth. Otherwise, convert it to 8-bit. Color Specifies that the image is 8-bit color. Grayscale Specifies that the image is 8-bit grayscale. Unchanged Specifies that the image is 8-bit, color or not. Overrides all other flags."
  },
  "api/OpenCV.Net.Mat.html": {
    "href": "api/OpenCV.Net.Mat.html",
    "title": "Class Mat",
    "keywords": "Class Mat Represents a multi-channel matrix. Inheritance Object CVHandle Arr Mat Inherited Members Arr.ElementType Arr.Size Arr.GetSubRect(Rect) Arr.GetRow(Int32) Arr.GetRows(Int32, Int32, Int32) Arr.GetCol(Int32) Arr.GetCols(Int32, Int32) Arr.GetDiag(Int32) Arr.GetDims(Int32[]) Arr.GetDimSize(Int32) Arr.Ptr(Int32) Arr.Ptr(Int32, Int32) Arr.Ptr(Int32, Int32) Arr.Ptr(Int32, Int32, Int32) Arr.Ptr(Int32, Int32, Int32) Arr.Ptr(Int32, Int32, Int32, Int32) Arr.Ptr(Int32[]) Arr.Ptr(Int32[], Int32, Boolean) Arr.Item[Int32] Arr.Item[Int32, Int32] Arr.Item[Int32, Int32, Int32] Arr.Item[Int32[]] Arr.GetReal(Int32) Arr.GetReal(Int32, Int32) Arr.GetReal(Int32, Int32, Int32) Arr.GetReal(Int32[]) Arr.SetReal(Int32, Double) Arr.SetReal(Int32, Int32, Double) Arr.SetReal(Int32, Int32, Int32, Double) Arr.SetReal(Int32[], Double) Arr.ClearND(Int32[]) Arr.GetMat(Boolean) Arr.GetImage() Arr.Reshape(Int32, Int32) Arr.SetData(IntPtr, Int32) Arr.GetRawData(IntPtr) Arr.GetRawData(IntPtr, Int32) Arr.GetRawData(IntPtr, Int32, Size) Arr.Set(Scalar, Arr) Arr.SetZero() Arr.CheckRange(CheckArrayFlags, Double, Double) Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public class Mat : Arr Constructors | Improve this Doc View Source Mat(Size, Depth, Int32) Initializes a new instance of the Mat class with the specified size , element bit depth and channels per element. Declaration public Mat(Size size, Depth depth, int channels) Parameters Type Name Description Size size The pixel-accurate size of the Mat . Depth depth The bit depth of matrix elements. Int32 channels The number of channels per element. | Improve this Doc View Source Mat(Size, Depth, Int32, IntPtr, Int32) Initializes a new instance of the Mat class with the specified size , element bit depth and channels per element. A pointer to the matrix raw data is provided as well as the optional full row length step size in bytes. Declaration public Mat(Size size, Depth depth, int channels, IntPtr data, int step = null) Parameters Type Name Description Size size The pixel-accurate size of the Mat . Depth depth The bit depth of matrix elements. Int32 channels The number of channels per matrix element. IntPtr data A pointer to the matrix raw element data. Int32 step The full row length in bytes. | Improve this Doc View Source Mat(Int32, Int32, Depth, Int32) Initializes a new instance of the Mat class with the specified number of rows and cols , element bit depth and channels per element. Declaration public Mat(int rows, int cols, Depth depth, int channels) Parameters Type Name Description Int32 rows The number of rows in the matrix. Int32 cols The number of columns in the matrix. Depth depth The bit depth of matrix elements. Int32 channels The number of channels per element. | Improve this Doc View Source Mat(Int32, Int32, Depth, Int32, IntPtr, Int32) Initializes a new instance of the Mat class with the specified number of rows and cols , element bit depth and channels per element. A pointer to the matrix raw data is provided as well as the optional full row length step size in bytes. Declaration public Mat(int rows, int cols, Depth depth, int channels, IntPtr data, int step = null) Parameters Type Name Description Int32 rows The number of rows in the matrix. Int32 cols The number of columns in the matrix. Depth depth The bit depth of matrix elements. Int32 channels The number of channels per matrix element. IntPtr data A pointer to the matrix raw element data. Int32 step The full row length in bytes. Fields | Improve this Doc View Source AutoStep A constant passed to the Mat constructor which specifies that no padding exists between subsequent rows of the matrix. Declaration public const int AutoStep = null Field Value Type Description Int32 Properties | Improve this Doc View Source Channels Gets the number of channels per matrix element. Declaration public int Channels { get; } Property Value Type Description Int32 | Improve this Doc View Source Cols Gets the number of columns in the matrix. Declaration public int Cols { get; } Property Value Type Description Int32 | Improve this Doc View Source Data Gets a pointer to the aligned matrix data. Declaration public IntPtr Data { get; } Property Value Type Description IntPtr | Improve this Doc View Source Depth Gets the bit depth of matrix elements. Declaration public Depth Depth { get; } Property Value Type Description Depth | Improve this Doc View Source ElementSize Gets the size of each matrix element in bytes. Declaration public int ElementSize { get; } Property Value Type Description Int32 | Improve this Doc View Source Rows Gets the number of rows in the matrix. Declaration public int Rows { get; } Property Value Type Description Int32 | Improve this Doc View Source Step Gets the full row length in bytes. Declaration public int Step { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Clone() Creates a new Mat that is a copy of the current instance. Declaration public Mat Clone() Returns Type Description Mat A new Mat that is a copy of this instance. Step may differ. | Improve this Doc View Source CreateMatHeader(Byte[]) Initializes a new instance of the Mat class that is a wrapper header for the specified data . The reference to data will be pinned in the garbage collector until the matrix header is released. Declaration public static Mat CreateMatHeader(byte[] data) Parameters Type Name Description Byte [] data The array to be wrapped. Returns Type Description Mat A new Mat instance that is a wrapper header around data . | Improve this Doc View Source CreateMatHeader(Byte[,]) Initializes a new instance of the Mat class that is a wrapper header for the specified data . The reference to data will be pinned in the garbage collector until the matrix header is released. Declaration public static Mat CreateMatHeader(byte[, ] data) Parameters Type Name Description Byte [,] data The array to be wrapped. Returns Type Description Mat A new Mat instance that is a wrapper header around data . | Improve this Doc View Source CreateMatHeader(Double[]) Initializes a new instance of the Mat class that is a wrapper header for the specified data . The reference to data will be pinned in the garbage collector until the matrix header is released. Declaration public static Mat CreateMatHeader(double[] data) Parameters Type Name Description Double [] data The array to be wrapped. Returns Type Description Mat A new Mat instance that is a wrapper header around data . | Improve this Doc View Source CreateMatHeader(Double[,]) Initializes a new instance of the Mat class that is a wrapper header for the specified data . The reference to data will be pinned in the garbage collector until the matrix header is released. Declaration public static Mat CreateMatHeader(double[, ] data) Parameters Type Name Description Double [,] data The array to be wrapped. Returns Type Description Mat A new Mat instance that is a wrapper header around data . | Improve this Doc View Source CreateMatHeader(Int16[]) Initializes a new instance of the Mat class that is a wrapper header for the specified data . The reference to data will be pinned in the garbage collector until the matrix header is released. Declaration public static Mat CreateMatHeader(short[] data) Parameters Type Name Description Int16 [] data The array to be wrapped. Returns Type Description Mat A new Mat instance that is a wrapper header around data . | Improve this Doc View Source CreateMatHeader(Int16[,]) Initializes a new instance of the Mat class that is a wrapper header for the specified data . The reference to data will be pinned in the garbage collector until the matrix header is released. Declaration public static Mat CreateMatHeader(short[, ] data) Parameters Type Name Description Int16 [,] data The array to be wrapped. Returns Type Description Mat A new Mat instance that is a wrapper header around data . | Improve this Doc View Source CreateMatHeader(Int32[]) Initializes a new instance of the Mat class that is a wrapper header for the specified data . The reference to data will be pinned in the garbage collector until the matrix header is released. Declaration public static Mat CreateMatHeader(int[] data) Parameters Type Name Description Int32 [] data The array to be wrapped. Returns Type Description Mat A new Mat instance that is a wrapper header around data . | Improve this Doc View Source CreateMatHeader(Int32[,]) Initializes a new instance of the Mat class that is a wrapper header for the specified data . The reference to data will be pinned in the garbage collector until the matrix header is released. Declaration public static Mat CreateMatHeader(int[, ] data) Parameters Type Name Description Int32 [,] data The array to be wrapped. Returns Type Description Mat A new Mat instance that is a wrapper header around data . | Improve this Doc View Source CreateMatHeader(Single[]) Initializes a new instance of the Mat class that is a wrapper header for the specified data . The reference to data will be pinned in the garbage collector until the matrix header is released. Declaration public static Mat CreateMatHeader(float[] data) Parameters Type Name Description Single [] data The array to be wrapped. Returns Type Description Mat A new Mat instance that is a wrapper header around data . | Improve this Doc View Source CreateMatHeader(Single[,]) Initializes a new instance of the Mat class that is a wrapper header for the specified data . The reference to data will be pinned in the garbage collector until the matrix header is released. Declaration public static Mat CreateMatHeader(float[, ] data) Parameters Type Name Description Single [,] data The array to be wrapped. Returns Type Description Mat A new Mat instance that is a wrapper header around data . | Improve this Doc View Source CreateMatHeader(UInt16[]) Initializes a new instance of the Mat class that is a wrapper header for the specified data . The reference to data will be pinned in the garbage collector until the matrix header is released. Declaration public static Mat CreateMatHeader(ushort[] data) Parameters Type Name Description UInt16 [] data The array to be wrapped. Returns Type Description Mat A new Mat instance that is a wrapper header around data . | Improve this Doc View Source CreateMatHeader(UInt16[,]) Initializes a new instance of the Mat class that is a wrapper header for the specified data . The reference to data will be pinned in the garbage collector until the matrix header is released. Declaration public static Mat CreateMatHeader(ushort[, ] data) Parameters Type Name Description UInt16 [,] data The array to be wrapped. Returns Type Description Mat A new Mat instance that is a wrapper header around data . | Improve this Doc View Source CreateMatHeader<TData>(TData[], Int32, Int32, Depth, Int32) Initializes a new instance of the Mat class that is a wrapper header around data with the specified number of rows and cols , element bit depth and channels per element. The reference to data will be pinned in the garbage collector until the matrix header is released. Declaration public static Mat CreateMatHeader<TData>(TData[] data, int rows, int cols, Depth depth, int channels) where TData : struct Parameters Type Name Description TData[] data The array to be wrapped. Int32 rows The number of rows in the matrix. Int32 cols The number of columns in the matrix. Depth depth The bit depth of matrix elements. Int32 channels The number of channels per element. Returns Type Description Mat A new Mat instance that is a wrapper header around data with the specified number of rows and cols , element bit depth and channels per element. Type Parameters Name Description TData The type of elements in the data array. | Improve this Doc View Source Eye(Size, Depth, Int32) Initializes a new Mat with ones on the main diagonal and zeros elsewhere. The matrix will have the specified size , element bit depth and channels per element. Declaration public static Mat Eye(Size size, Depth depth, int channels) Parameters Type Name Description Size size The pixel-accurate size of the Mat . Depth depth The bit depth of matrix elements. Int32 channels The number of channels per matrix element. Returns Type Description Mat A new Mat instance with ones on the main diagonal and zeros elsewhere. | Improve this Doc View Source Eye(Int32, Int32, Depth, Int32) Initializes a new Mat with ones on the main diagonal and zeros elsewhere. The matrix will have the specified number of rows and cols , element bit depth and channels per element. Declaration public static Mat Eye(int rows, int cols, Depth depth, int channels) Parameters Type Name Description Int32 rows The number of rows in the matrix. Int32 cols The number of columns in the matrix. Depth depth The bit depth of matrix elements. Int32 channels The number of channels per matrix element. Returns Type Description Mat A new Mat instance with ones on the main diagonal and zeros elsewhere. | Improve this Doc View Source FromArray(Byte[]) Initializes a new instance of the Mat class that is a copy of the specified managed array data . Declaration public static Mat FromArray(byte[] data) Parameters Type Name Description Byte [] data The array that is to be converted to a Mat . Returns Type Description Mat A new Mat instance that is a copy of the data array. | Improve this Doc View Source FromArray(Byte[,]) Initializes a new instance of the Mat class that is a copy of the specified managed array data . Declaration public static Mat FromArray(byte[, ] data) Parameters Type Name Description Byte [,] data The array that is to be converted to a Mat . Returns Type Description Mat A new Mat instance that is a copy of the data array. | Improve this Doc View Source FromArray(Double[]) Initializes a new instance of the Mat class that is a copy of the specified managed array data . Declaration public static Mat FromArray(double[] data) Parameters Type Name Description Double [] data The array that is to be converted to a Mat . Returns Type Description Mat A new Mat instance that is a copy of the data array. | Improve this Doc View Source FromArray(Double[,]) Initializes a new instance of the Mat class that is a copy of the specified managed array data . Declaration public static Mat FromArray(double[, ] data) Parameters Type Name Description Double [,] data The array that is to be converted to a Mat . Returns Type Description Mat A new Mat instance that is a copy of the data array. | Improve this Doc View Source FromArray(Int16[]) Initializes a new instance of the Mat class that is a copy of the specified managed array data . Declaration public static Mat FromArray(short[] data) Parameters Type Name Description Int16 [] data The array that is to be converted to a Mat . Returns Type Description Mat A new Mat instance that is a copy of the data array. | Improve this Doc View Source FromArray(Int16[,]) Initializes a new instance of the Mat class that is a copy of the specified managed array data . Declaration public static Mat FromArray(short[, ] data) Parameters Type Name Description Int16 [,] data The array that is to be converted to a Mat . Returns Type Description Mat A new Mat instance that is a copy of the data array. | Improve this Doc View Source FromArray(Int32[]) Initializes a new instance of the Mat class that is a copy of the specified managed array data . Declaration public static Mat FromArray(int[] data) Parameters Type Name Description Int32 [] data The array that is to be converted to a Mat . Returns Type Description Mat A new Mat instance that is a copy of the data array. | Improve this Doc View Source FromArray(Int32[,]) Initializes a new instance of the Mat class that is a copy of the specified managed array data . Declaration public static Mat FromArray(int[, ] data) Parameters Type Name Description Int32 [,] data The array that is to be converted to a Mat . Returns Type Description Mat A new Mat instance that is a copy of the data array. | Improve this Doc View Source FromArray(Single[]) Initializes a new instance of the Mat class that is a copy of the specified managed array data . Declaration public static Mat FromArray(float[] data) Parameters Type Name Description Single [] data The array that is to be converted to a Mat . Returns Type Description Mat A new Mat instance that is a copy of the data array. | Improve this Doc View Source FromArray(Single[,]) Initializes a new instance of the Mat class that is a copy of the specified managed array data . Declaration public static Mat FromArray(float[, ] data) Parameters Type Name Description Single [,] data The array that is to be converted to a Mat . Returns Type Description Mat A new Mat instance that is a copy of the data array. | Improve this Doc View Source FromArray(UInt16[]) Initializes a new instance of the Mat class that is a copy of the specified managed array data . Declaration public static Mat FromArray(ushort[] data) Parameters Type Name Description UInt16 [] data The array that is to be converted to a Mat . Returns Type Description Mat A new Mat instance that is a copy of the data array. | Improve this Doc View Source FromArray(UInt16[,]) Initializes a new instance of the Mat class that is a copy of the specified managed array data . Declaration public static Mat FromArray(ushort[, ] data) Parameters Type Name Description UInt16 [,] data The array that is to be converted to a Mat . Returns Type Description Mat A new Mat instance that is a copy of the data array. | Improve this Doc View Source FromArray<TData>(TData[], Int32, Int32, Depth, Int32) Initializes a new instance of the Mat class that is a copy of the data array with the specified number of rows and cols , element bit depth and channels per element. Declaration public static Mat FromArray<TData>(TData[] data, int rows, int cols, Depth depth, int channels) where TData : struct Parameters Type Name Description TData[] data The array to be wrapped. Int32 rows The number of rows in the matrix. Int32 cols The number of columns in the matrix. Depth depth The bit depth of matrix elements. Int32 channels The number of channels per element. Returns Type Description Mat A new Mat instance that is a copy of the data array with the specified number of rows and cols , element bit depth and channels per element. Type Parameters Name Description TData The type of elements in the data array. | Improve this Doc View Source Ones(Size, Depth, Int32) Initializes a new Mat with all elements set to one and the specified size , element bit depth and channels per element. Declaration public static Mat Ones(Size size, Depth depth, int channels) Parameters Type Name Description Size size The pixel-accurate size of the Mat . Depth depth The bit depth of matrix elements. Int32 channels The number of channels per matrix element. Returns Type Description Mat A new Mat instance with all its elements set to one. | Improve this Doc View Source Ones(Int32, Int32, Depth, Int32) Initializes a new Mat with all elements set to one and the specified number of rows and cols , element bit depth and channels per element. Declaration public static Mat Ones(int rows, int cols, Depth depth, int channels) Parameters Type Name Description Int32 rows The number of rows in the matrix. Int32 cols The number of columns in the matrix. Depth depth The bit depth of matrix elements. Int32 channels The number of channels per matrix element. Returns Type Description Mat A new Mat instance with all its elements set to one. | Improve this Doc View Source ReleaseHandle() Executes the code required to free the native Mat handle. Declaration protected override bool ReleaseHandle() Returns Type Description Boolean true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false . | Improve this Doc View Source ToString() Creates a representation of this Mat instance. Declaration public override string ToString() Returns Type Description String A containing the rows, columns, depth and number of channels of this Mat instance. | Improve this Doc View Source Zeros(Size, Depth, Int32) Initializes a new Mat with all elements set to zero and the specified size , element bit depth and channels per element. Declaration public static Mat Zeros(Size size, Depth depth, int channels) Parameters Type Name Description Size size The pixel-accurate size of the Mat . Depth depth The bit depth of matrix elements. Int32 channels The number of channels per matrix element. Returns Type Description Mat A new Mat instance with all its elements set to zero. | Improve this Doc View Source Zeros(Int32, Int32, Depth, Int32) Initializes a new Mat with all elements set to zero and the specified number of rows and cols , element bit depth and channels per element. Declaration public static Mat Zeros(int rows, int cols, Depth depth, int channels) Parameters Type Name Description Int32 rows The number of rows in the matrix. Int32 cols The number of columns in the matrix. Depth depth The bit depth of matrix elements. Int32 channels The number of channels per matrix element. Returns Type Description Mat A new Mat instance with all its elements set to zero. Operators | Improve this Doc View Source Addition(Mat, Mat) Calculates the per-element sum of two Mat values. Declaration public static Mat operator +(Mat left, Mat right) Parameters Type Name Description Mat left The first value to add. Mat right The second value to add. Returns Type Description Mat The result of adding left and right . | Improve this Doc View Source Addition(Mat, Scalar) Calculates the per-element sum of a Mat and a Scalar . Declaration public static Mat operator +(Mat left, Scalar right) Parameters Type Name Description Mat left The matrix to add. Scalar right The scalar to add. Returns Type Description Mat The result of adding left and right . | Improve this Doc View Source Addition(Mat, Double) Calculates the per-element sum of a Mat and a value. Declaration public static Mat operator +(Mat left, double right) Parameters Type Name Description Mat left The matrix to add. Double right The scalar value to add. Returns Type Description Mat The result of adding left and right . | Improve this Doc View Source Addition(Scalar, Mat) Calculates the per-element sum of a Scalar and a Mat . Declaration public static Mat operator +(Scalar left, Mat right) Parameters Type Name Description Scalar left The scalar to add. Mat right The matrix to add. Returns Type Description Mat The result of adding left and right . | Improve this Doc View Source Addition(Double, Mat) Calculates the per-element sum of a value and a Mat . Declaration public static Mat operator +(double left, Mat right) Parameters Type Name Description Double left The scalar value to add. Mat right The matrix to add. Returns Type Description Mat The result of adding left and right . | Improve this Doc View Source BitwiseAnd(Mat, Mat) Performs per-element bit-wise conjunction of two Mat values. Declaration public static Mat operator &(Mat left, Mat right) Parameters Type Name Description Mat left The first matrix value. Mat right The second matrix value. Returns Type Description Mat The result of performing the bit-wise conjunction of left and right . | Improve this Doc View Source BitwiseAnd(Mat, Scalar) Performs per-element bit-wise conjunction of a Mat and a Scalar . Declaration public static Mat operator &(Mat left, Scalar right) Parameters Type Name Description Mat left The matrix value. Scalar right The scalar value. Returns Type Description Mat The result of performing the bit-wise conjunction of left and right . | Improve this Doc View Source BitwiseAnd(Mat, Double) Performs per-element bit-wise conjunction of a Mat and a value. Declaration public static Mat operator &(Mat left, double right) Parameters Type Name Description Mat left The matrix value. Double right The scalar value. Returns Type Description Mat The result of performing the bit-wise conjunction of left and right . | Improve this Doc View Source BitwiseAnd(Scalar, Mat) Performs per-element bit-wise conjunction of a Scalar and a Mat . Declaration public static Mat operator &(Scalar left, Mat right) Parameters Type Name Description Scalar left The scalar value. Mat right The matrix value. Returns Type Description Mat The result of performing the bit-wise conjunction of left and right . | Improve this Doc View Source BitwiseAnd(Double, Mat) Performs per-element bit-wise conjunction of a value and a Mat . Declaration public static Mat operator &(double left, Mat right) Parameters Type Name Description Double left The scalar value. Mat right The matrix value. Returns Type Description Mat The result of performing the bit-wise conjunction of left and right . | Improve this Doc View Source BitwiseOr(Mat, Mat) Performs per-element bit-wise disjunction of two Mat values. Declaration public static Mat operator |(Mat left, Mat right) Parameters Type Name Description Mat left The first matrix value. Mat right The second matrix value. Returns Type Description Mat The result of performing the bit-wise disjunction of left and right . | Improve this Doc View Source BitwiseOr(Mat, Scalar) Performs per-element bit-wise disjunction of a Mat and a Scalar . Declaration public static Mat operator |(Mat left, Scalar right) Parameters Type Name Description Mat left The matrix value. Scalar right The scalar value. Returns Type Description Mat The result of performing the bit-wise disjunction of left and right . | Improve this Doc View Source BitwiseOr(Mat, Double) Performs per-element bit-wise disjunction of a Mat and a value. Declaration public static Mat operator |(Mat left, double right) Parameters Type Name Description Mat left The matrix value. Double right The scalar value. Returns Type Description Mat The result of performing the bit-wise disjunction of left and right . | Improve this Doc View Source BitwiseOr(Scalar, Mat) Performs per-element bit-wise disjunction of a Scalar and a Mat . Declaration public static Mat operator |(Scalar left, Mat right) Parameters Type Name Description Scalar left The scalar value. Mat right The matrix value. Returns Type Description Mat The result of performing the bit-wise disjunction of left and right . | Improve this Doc View Source BitwiseOr(Double, Mat) Performs per-element bit-wise disjunction of a value and a Mat . Declaration public static Mat operator |(double left, Mat right) Parameters Type Name Description Double left The scalar value. Mat right The matrix value. Returns Type Description Mat The result of performing the bit-wise disjunction of left and right . | Improve this Doc View Source Division(Mat, Mat) Calculates the per-element division of two Mat values. Declaration public static Mat operator /(Mat left, Mat right) Parameters Type Name Description Mat left The dividend. Mat right The divisor. Returns Type Description Mat The result of dividing left by right . | Improve this Doc View Source Division(Mat, Double) Calculates the per-element division of a Mat by a scalar value. Declaration public static Mat operator /(Mat left, double right) Parameters Type Name Description Mat left The matrix dividend. Double right The scalar divisor. Returns Type Description Mat The result of dividing left by right . | Improve this Doc View Source Division(Double, Mat) Calculates the per-element division of a scalar value by a Mat . Declaration public static Mat operator /(double left, Mat right) Parameters Type Name Description Double left The scalar dividend. Mat right The matrix divisor. Returns Type Description Mat The result of dividing left by right . | Improve this Doc View Source ExclusiveOr(Mat, Mat) Performs per-element bit-wise \"exclusive or\" operation on two Mat values. Declaration public static Mat operator ^(Mat left, Mat right) Parameters Type Name Description Mat left The first matrix value. Mat right The second matrix value. Returns Type Description Mat The result of performing the bit-wise \"exclusive or\" operation of left and right . | Improve this Doc View Source ExclusiveOr(Mat, Scalar) Performs per-element bit-wise \"exclusive or\" operation of a Mat and a Scalar . Declaration public static Mat operator ^(Mat left, Scalar right) Parameters Type Name Description Mat left The matrix value. Scalar right The scalar value. Returns Type Description Mat The result of performing the bit-wise \"exclusive or\" operation of left and right . | Improve this Doc View Source ExclusiveOr(Mat, Double) Performs per-element bit-wise \"exclusive or\" operation of a Mat and a value. Declaration public static Mat operator ^(Mat left, double right) Parameters Type Name Description Mat left The matrix value. Double right The scalar value. Returns Type Description Mat The result of performing the bit-wise \"exclusive or\" operation of left and right . | Improve this Doc View Source ExclusiveOr(Scalar, Mat) Performs per-element bit-wise \"exclusive or\" operation of a Scalar and a Mat . Declaration public static Mat operator ^(Scalar left, Mat right) Parameters Type Name Description Scalar left The scalar value. Mat right The matrix value. Returns Type Description Mat The result of performing the bit-wise \"exclusive or\" operation of left and right . | Improve this Doc View Source ExclusiveOr(Double, Mat) Performs per-element bit-wise \"exclusive or\" operation of a value and a Mat . Declaration public static Mat operator ^(double left, Mat right) Parameters Type Name Description Double left The scalar value. Mat right The matrix value. Returns Type Description Mat The result of performing the bit-wise \"exclusive or\" operation of left and right . | Improve this Doc View Source Explicit(Mat to IplImage) Converts a Mat value to a IplImage . Declaration public static explicit operator IplImage(Mat mat) Parameters Type Name Description Mat mat The matrix to convert. Returns Type Description IplImage A IplImage value of the same size and element type. | Improve this Doc View Source Multiply(Mat, Mat) Calculates the per-element product of two Mat values. Declaration public static Mat operator *(Mat left, Mat right) Parameters Type Name Description Mat left The first value to multiply. Mat right The second value to multiply. Returns Type Description Mat The result of multiplying left by right . | Improve this Doc View Source Multiply(Mat, Double) Calculates the per-element product of a Mat by a scalar value. Declaration public static Mat operator *(Mat left, double right) Parameters Type Name Description Mat left The matrix to multiply. Double right The scalar value to multiply. Returns Type Description Mat The result of multiplying left by right . | Improve this Doc View Source Multiply(Double, Mat) Calculates the per-element product of a scalar value by a Mat . Declaration public static Mat operator *(double left, Mat right) Parameters Type Name Description Double left The scalar value to multiply. Mat right The matrix to multiply. Returns Type Description Mat The result of multiplying left by right . | Improve this Doc View Source OnesComplement(Mat) Performs per-element bit-wise inversion of the specified Mat value. Declaration public static Mat operator ~(Mat mat) Parameters Type Name Description Mat mat The matrix to invert. Returns Type Description Mat The result of bitwise inverting mat . | Improve this Doc View Source Subtraction(Mat, Mat) Calculates the per-element difference between two Mat values. Declaration public static Mat operator -(Mat left, Mat right) Parameters Type Name Description Mat left The minuend. Mat right The subtrahend. Returns Type Description Mat The result of subtracting right from left . | Improve this Doc View Source Subtraction(Mat, Scalar) Calculates the per-element difference between a Mat and a Scalar . Declaration public static Mat operator -(Mat left, Scalar right) Parameters Type Name Description Mat left The matrix minuend. Scalar right The scalar subtrahend. Returns Type Description Mat The result of subtracting right from left . | Improve this Doc View Source Subtraction(Mat, Double) Calculates the per-element difference between a Mat and a value. Declaration public static Mat operator -(Mat left, double right) Parameters Type Name Description Mat left The matrix minuend. Double right The scalar subtrahend. Returns Type Description Mat The result of subtracting right from left . | Improve this Doc View Source Subtraction(Scalar, Mat) Subtracts every element of the specified Mat value from a Scalar . Declaration public static Mat operator -(Scalar left, Mat right) Parameters Type Name Description Scalar left The scalar minuend. Mat right The matrix subtrahend. Returns Type Description Mat The result of subtracting right from left . | Improve this Doc View Source Subtraction(Double, Mat) Subtracts every element of the specified Mat value from a value. Declaration public static Mat operator -(double left, Mat right) Parameters Type Name Description Double left The scalar minuend. Mat right The matrix subtrahend. Returns Type Description Mat The result of subtracting right from left . | Improve this Doc View Source UnaryNegation(Mat) Negates the specified Mat value. Declaration public static Mat operator -(Mat mat) Parameters Type Name Description Mat mat The matrix to negate. Returns Type Description Mat The result of mat multiplied by negative one (-1). | Improve this Doc View Source UnaryPlus(Mat) Returns the Mat value (the sign is unchanged). Declaration public static Mat operator +(Mat mat) Parameters Type Name Description Mat mat The matrix to return. Returns Type Description Mat The matrix mat ."
  },
  "api/OpenCV.Net.MatND.html": {
    "href": "api/OpenCV.Net.MatND.html",
    "title": "Class MatND",
    "keywords": "Class MatND Represents a multi-dimensional dense multi-channel array. Inheritance Object CVHandle Arr MatND Inherited Members Arr.ElementType Arr.Size Arr.GetSubRect(Rect) Arr.GetRow(Int32) Arr.GetRows(Int32, Int32, Int32) Arr.GetCol(Int32) Arr.GetCols(Int32, Int32) Arr.GetDiag(Int32) Arr.GetDims(Int32[]) Arr.GetDimSize(Int32) Arr.Ptr(Int32) Arr.Ptr(Int32, Int32) Arr.Ptr(Int32, Int32) Arr.Ptr(Int32, Int32, Int32) Arr.Ptr(Int32, Int32, Int32) Arr.Ptr(Int32, Int32, Int32, Int32) Arr.Ptr(Int32[]) Arr.Ptr(Int32[], Int32, Boolean) Arr.Item[Int32] Arr.Item[Int32, Int32] Arr.Item[Int32, Int32, Int32] Arr.Item[Int32[]] Arr.GetReal(Int32) Arr.GetReal(Int32, Int32) Arr.GetReal(Int32, Int32, Int32) Arr.GetReal(Int32[]) Arr.SetReal(Int32, Double) Arr.SetReal(Int32, Int32, Double) Arr.SetReal(Int32, Int32, Int32, Double) Arr.SetReal(Int32[], Double) Arr.ClearND(Int32[]) Arr.GetMat(Boolean) Arr.GetImage() Arr.Reshape(Int32, Int32) Arr.SetData(IntPtr, Int32) Arr.GetRawData(IntPtr) Arr.GetRawData(IntPtr, Int32) Arr.GetRawData(IntPtr, Int32, Size) Arr.Set(Scalar, Arr) Arr.SetZero() Arr.CheckRange(CheckArrayFlags, Double, Double) Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public class MatND : Arr Constructors | Improve this Doc View Source MatND(Int32[], Depth, Int32) Initializes a new instance of the MatND class with the specified dimension sizes, element bit depth and channels per element. Declaration public MatND(int[] dimSizes, Depth depth, int channels) Parameters Type Name Description Int32 [] dimSizes The size of each of the multi-dimensional array dimensions. Depth depth The bit depth of matrix elements. Int32 channels The number of channels per element. | Improve this Doc View Source MatND(Int32[], Depth, Int32, IntPtr) Initializes a new instance of the MatND class with the specified dimension sizes, element bit depth and channels per element. A pointer to the matrix raw element data is provided. Declaration public MatND(int[] dimSizes, Depth depth, int channels, IntPtr data) Parameters Type Name Description Int32 [] dimSizes The size of each of the multi-dimensional array dimensions. Depth depth The bit depth of matrix elements. Int32 channels The number of channels per element. IntPtr data A pointer to the matrix raw element data. Properties | Improve this Doc View Source Channels Gets the number of channels per matrix element. Declaration public int Channels { get; } Property Value Type Description Int32 | Improve this Doc View Source Depth Gets the bit depth of matrix elements. Declaration public Depth Depth { get; } Property Value Type Description Depth | Improve this Doc View Source ElementSize Gets the size of each matrix element in bytes. Declaration public int ElementSize { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Clone() Creates a new MatND that is a copy of the current instance. Declaration public MatND Clone() Returns Type Description MatND A new MatND that is a copy of this instance. | Improve this Doc View Source ReleaseHandle() Executes the code required to free the native MatND handle. Declaration protected override bool ReleaseHandle() Returns Type Description Boolean true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false ."
  },
  "api/OpenCV.Net.MemBlock.html": {
    "href": "api/OpenCV.Net.MemBlock.html",
    "title": "Struct MemBlock",
    "keywords": "Struct MemBlock Represents a memory storage block. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public struct MemBlock Properties | Improve this Doc View Source Next Gets the next memory storage block. Declaration public MemBlock Next { get; } Property Value Type Description MemBlock | Improve this Doc View Source Prev Gets the previous memory storage block. Declaration public MemBlock Prev { get; } Property Value Type Description MemBlock"
  },
  "api/OpenCV.Net.MemStorage.html": {
    "href": "api/OpenCV.Net.MemStorage.html",
    "title": "Class MemStorage",
    "keywords": "Class MemStorage Represents a growing memory storage. Inheritance Object CVHandle MemStorage Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public class MemStorage : CVHandle Constructors | Improve this Doc View Source MemStorage() Initializes a new instance of the MemStorage class. Declaration public MemStorage() | Improve this Doc View Source MemStorage(MemStorage) Initializes a new instance of the MemStorage class that will borrow its memory blocks from the specified parent storage. Declaration public MemStorage(MemStorage parent) Parameters Type Name Description MemStorage parent The parent memory storage. | Improve this Doc View Source MemStorage(Int32) Initializes a new instance of the MemStorage class with the specified blockSize . Declaration public MemStorage(int blockSize) Parameters Type Name Description Int32 blockSize The size of storage blocks, in bytes. Methods | Improve this Doc View Source Alloc(UIntPtr) Allocates a memory buffer in a storage block. Declaration public IntPtr Alloc(UIntPtr size) Parameters Type Name Description UIntPtr size The size of the memory block, in bytes. Returns Type Description IntPtr A pointer to the newly allocated memory block. | Improve this Doc View Source AllocString(String) Allocates a text string in a storage block. Declaration public IntPtr AllocString(string value) Parameters Type Name Description String value The string to be copied to the storage. Returns Type Description IntPtr The pointer to the copy of the string in storage. | Improve this Doc View Source Clear() Clears the memory storage. If the storage has a parent, the method returns all memory blocks to the parent. Declaration public void Clear() | Improve this Doc View Source ReleaseHandle() Executes the code required to free the native MemStorage handle. Declaration protected override bool ReleaseHandle() Returns Type Description Boolean true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false . | Improve this Doc View Source RestorePosition(MemStoragePos) Restores the memory storage position. Declaration public void RestorePosition(MemStoragePos pos) Parameters Type Name Description MemStoragePos pos The new position of the storage top. | Improve this Doc View Source SavePosition() Saves the memory storage position. Declaration public MemStoragePos SavePosition() Returns Type Description MemStoragePos The current position of the storage top."
  },
  "api/OpenCV.Net.MemStoragePos.html": {
    "href": "api/OpenCV.Net.MemStoragePos.html",
    "title": "Struct MemStoragePos",
    "keywords": "Struct MemStoragePos Represents a memory storage position. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public struct MemStoragePos Properties | Improve this Doc View Source FreeSpace Gets the number of free bytes at the position. Declaration public int FreeSpace { get; } Property Value Type Description Int32 | Improve this Doc View Source Top Gets the memory block at the top of the position. Declaration public MemBlock Top { get; } Property Value Type Description MemBlock"
  },
  "api/OpenCV.Net.Moments.html": {
    "href": "api/OpenCV.Net.Moments.html",
    "title": "Struct Moments",
    "keywords": "Struct Moments Represents all the moments up to the third order of a polygon or rasterized shape. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public struct Moments Constructors | Improve this Doc View Source Moments(CVHandle, Boolean) Initializes a new instance of the Moments structure from the specified polygon or rasterized shape. Declaration public Moments(CVHandle arr, bool binary = false) Parameters Type Name Description CVHandle arr The handle to the polygon ( Seq ) or rasterized shape ( IplImage ) from which to compute the moments. Boolean binary If true , all non-zero image pixels are treated as one. Used for images only. Fields | Improve this Doc View Source InvSqrtM00 The inverse of the square root of the first spatial moment. Declaration public double InvSqrtM00 Field Value Type Description Double | Improve this Doc View Source M00 The spatial moments of the polygon or rasterized shape. Declaration public double M00 Field Value Type Description Double | Improve this Doc View Source M01 The spatial moments of the polygon or rasterized shape. Declaration public double M01 Field Value Type Description Double | Improve this Doc View Source M02 The spatial moments of the polygon or rasterized shape. Declaration public double M02 Field Value Type Description Double | Improve this Doc View Source M03 The spatial moments of the polygon or rasterized shape. Declaration public double M03 Field Value Type Description Double | Improve this Doc View Source M10 The spatial moments of the polygon or rasterized shape. Declaration public double M10 Field Value Type Description Double | Improve this Doc View Source M11 The spatial moments of the polygon or rasterized shape. Declaration public double M11 Field Value Type Description Double | Improve this Doc View Source M12 The spatial moments of the polygon or rasterized shape. Declaration public double M12 Field Value Type Description Double | Improve this Doc View Source M20 The spatial moments of the polygon or rasterized shape. Declaration public double M20 Field Value Type Description Double | Improve this Doc View Source M21 The spatial moments of the polygon or rasterized shape. Declaration public double M21 Field Value Type Description Double | Improve this Doc View Source M30 The spatial moments of the polygon or rasterized shape. Declaration public double M30 Field Value Type Description Double | Improve this Doc View Source Mu02 The central moments of the polygon or rasterized shape. Declaration public double Mu02 Field Value Type Description Double | Improve this Doc View Source Mu03 The central moments of the polygon or rasterized shape. Declaration public double Mu03 Field Value Type Description Double | Improve this Doc View Source Mu11 The central moments of the polygon or rasterized shape. Declaration public double Mu11 Field Value Type Description Double | Improve this Doc View Source Mu12 The central moments of the polygon or rasterized shape. Declaration public double Mu12 Field Value Type Description Double | Improve this Doc View Source Mu20 The central moments of the polygon or rasterized shape. Declaration public double Mu20 Field Value Type Description Double | Improve this Doc View Source Mu21 The central moments of the polygon or rasterized shape. Declaration public double Mu21 Field Value Type Description Double | Improve this Doc View Source Mu30 The central moments of the polygon or rasterized shape. Declaration public double Mu30 Field Value Type Description Double Methods | Improve this Doc View Source GetCentralMoment(Int32, Int32) Gets the central moment with the specified xOrder and yOrder . Declaration public double GetCentralMoment(int xOrder, int yOrder) Parameters Type Name Description Int32 xOrder The x-order of the retrieved moment. Int32 yOrder The y-order of the retrieved moment. Returns Type Description Double The central moment with the specified xOrder and yOrder . | Improve this Doc View Source GetHuMoments() Computes the seven Hu moments invariant to image scale, rotation, and reflection except the seventh one, whose sign is changed by reflection. Declaration public HuMoments GetHuMoments() Returns Type Description HuMoments An instance of HuMoments containing the seven Hu moments. | Improve this Doc View Source GetNormalizedCentralMoment(Int32, Int32) Gets the normalized central moment with the specified xOrder and yOrder . Declaration public double GetNormalizedCentralMoment(int xOrder, int yOrder) Parameters Type Name Description Int32 xOrder The x-order of the retrieved moment. Int32 yOrder The y-order of the retrieved moment. Returns Type Description Double The normalized central moment with the specified xOrder and yOrder . | Improve this Doc View Source GetSpatialMoment(Int32, Int32) Gets the spatial moment with the specified xOrder and yOrder . Declaration public double GetSpatialMoment(int xOrder, int yOrder) Parameters Type Name Description Int32 xOrder The x-order of the retrieved moment. Int32 yOrder The y-order of the retrieved moment. Returns Type Description Double The spatial moment with the specified xOrder and yOrder ."
  },
  "api/OpenCV.Net.MorphologicalOperation.html": {
    "href": "api/OpenCV.Net.MorphologicalOperation.html",
    "title": "Enum MorphologicalOperation",
    "keywords": "Enum MorphologicalOperation Specifies the type of morphological operation used by MorphologyEx(Arr, Arr, Arr, IplConvKernel, MorphologicalOperation, Int32) . Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum MorphologicalOperation : int Fields Name Description BlackHat Specifies a morphological operation obtained by subtracting the input image from the result of the Close operator. Close Specifies a morphological operation performed by first dilating and then eroding the image. Dilate Specifies the primitive dilation morphological operation. Erode Specifies the primitive erosion morphological operation. Gradient Specifies a morphological operation obtained by subtracting the result of the Erode operator from the result of the Dilate operator. Open Specifies a morphological operation performed by first eroding and then dilating the image. TopHat Specifies a morphological operation obtained by subtracting the result of the Open operator from the input image."
  },
  "api/OpenCV.Net.MouseCallback.html": {
    "href": "api/OpenCV.Net.MouseCallback.html",
    "title": "Delegate MouseCallback",
    "keywords": "Delegate MouseCallback Represents the method that will handle mouse events of a named window. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public delegate void MouseCallback(MouseEvent evt, int x, int y, MouseEventFlags flags); Parameters Type Name Description MouseEvent evt The mouse event category. Int32 x The x-coordinate of the mouse during the generating mouse event. Int32 y The y-coordinate of the mouse during the generating mouse event. MouseEventFlags flags The mouse event modifier flags."
  },
  "api/OpenCV.Net.MouseEvent.html": {
    "href": "api/OpenCV.Net.MouseEvent.html",
    "title": "Enum MouseEvent",
    "keywords": "Enum MouseEvent Specifies mouse event categories. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum MouseEvent : int Fields Name Description LButtonDblClk Specifies that the event was triggered by double cliking with the left mouse button. LButtonDown Specifies that the event was triggered by depressing the left mouse button. LButtonUp Specifies that the event was triggered by releasing the left mouse button. MButtonDblClk Specifies that the event was triggered by double cliking with the middle mouse button. MButtonDown Specifies that the event was triggered by depressing the middle mouse button. MButtonUp Specifies that the event was triggered by releasing the middle mouse button. MouseMove Specifies that the event was triggered by mouse movement. RButtonDblClk Specifies that the event was triggered by double cliking with the right mouse button. RButtonDown Specifies that the event was triggered by depressing the right mouse button. RButtonUp Specifies that the event was triggered by releasing the right mouse button."
  },
  "api/OpenCV.Net.MouseEventFlags.html": {
    "href": "api/OpenCV.Net.MouseEventFlags.html",
    "title": "Enum MouseEventFlags",
    "keywords": "Enum MouseEventFlags Specifies mouse event modifier flags. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum MouseEventFlags : int Fields Name Description AltKey Specifies that the ALT key is depressed. CtrlKey Specifies that the CTRL key is depressed. LButton Specifies that the left mouse button is depressed. MButton Specifies that the middle mouse button is depressed. RButton Specifies that the right mouse button is depressed. ShiftKey Specifies that the SHIFT key is depressed."
  },
  "api/OpenCV.Net.NamedWindow.html": {
    "href": "api/OpenCV.Net.NamedWindow.html",
    "title": "Class NamedWindow",
    "keywords": "Class NamedWindow Represents a window which can be used as placeholder for images and trackbars. Inheritance Object NamedWindow Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public sealed class NamedWindow : IDisposable Constructors | Improve this Doc View Source NamedWindow(IntPtr) Initializes a new instance of the NamedWindow class from the specified native window handle. Declaration public NamedWindow(IntPtr handle) Parameters Type Name Description IntPtr handle The platform specific native window handle used to retrieve the window name. | Improve this Doc View Source NamedWindow(String, WindowFlags) Initializes a new instance of the NamedWindow class with the specified name. Declaration public NamedWindow(string name, WindowFlags flags = default(WindowFlags)) Parameters Type Name Description String name The name of the window in the window caption. WindowFlags flags The flags of the window. Properties | Improve this Doc View Source Handle Gets the platform specific native window handle. Declaration public IntPtr Handle { get; } Property Value Type Description IntPtr | Improve this Doc View Source Name Gets the name of the window. Declaration public string Name { get; } Property Value Type Description String Methods | Improve this Doc View Source CreateTrackbar(String, ref Int32, Int32, TrackbarCallback) Creates a trackbar and attaches it to the window. Declaration public void CreateTrackbar(string trackbarName, ref int value, int count, TrackbarCallback onChanged = null) Parameters Type Name Description String trackbarName Name of the created trackbar. Int32 value A reference to an integer value that specifies the position of the slider. Int32 count Maximal position of the slider. Minimal position is always 0. TrackbarCallback onChanged The callback method that will be called every time the slider changes position. | Improve this Doc View Source DestroyAllWindows() Destroys all of the HighGUI windows. Declaration public static void DestroyAllWindows() | Improve this Doc View Source DisplayOverlay(String, Int32) Displays text on the window’s image as an overlay for delayMs milliseconds. This is not editing the image’s data. The text is displayed on the top of the image. Declaration public void DisplayOverlay(string text, int delayMs = 0) Parameters Type Name Description String text Overlay text to write on the window’s image. Int32 delayMs Delay to display the overlay text. If this method is called before the previous overlay text times out, the timer is restarted and the text updated. If this value is zero, the text never disappears. | Improve this Doc View Source DisplayStatusBar(String, Int32) Displays text on the window’s status bar for delayMs milliseconds. Declaration public void DisplayStatusBar(string text, int delayMs = 0) Parameters Type Name Description String text Text to write on the window’s status bar. Int32 delayMs Delay to display the text. If this method is called before the previous text times out, the timer is restarted and the text updated. If this value is zero, the text never disappears. | Improve this Doc View Source Dispose() Releases all resources used by the NamedWindow . Declaration public void Dispose() | Improve this Doc View Source Finalize() Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection. Declaration protected void Finalize() | Improve this Doc View Source GetProperty(WindowProperty) Gets the parameters of the window. Declaration public WindowFlags GetProperty(WindowProperty propId) Parameters Type Name Description WindowProperty propId The identifier of the property to retrieve. Returns Type Description WindowFlags The value of the window property. | Improve this Doc View Source GetTrackbarPos(String) Returns the trackbar position. Declaration public int GetTrackbarPos(string trackbarName) Parameters Type Name Description String trackbarName The name of the trackbar. Returns Type Description Int32 The current position of the specified trackbar. | Improve this Doc View Source LoadWindowParameters() Loads parameters of the window such as size, location, flags, etc. Declaration public void LoadWindowParameters() | Improve this Doc View Source Move(Int32, Int32) Sets the position of the window. Declaration public void Move(int x, int y) Parameters Type Name Description Int32 x The new x-coordinate of the top-left corner. Int32 y The new y-coordinate of the top-left corner. | Improve this Doc View Source Resize(Int32, Int32) Sets the window size. Declaration public void Resize(int width, int height) Parameters Type Name Description Int32 width The new width. Int32 height The new height. | Improve this Doc View Source SaveWindowParameters() Saves parameters of the window such as size, location, flags, etc. Declaration public void SaveWindowParameters() | Improve this Doc View Source SetMouseCallback(MouseCallback) Assigns a callback for mouse events. Declaration public void SetMouseCallback(MouseCallback onMouse) Parameters Type Name Description MouseCallback onMouse The callback method that will handle mouse events of this named window. | Improve this Doc View Source SetOpenGLContext() Makes the GL context current. Used only for windows with OpenGL support. Declaration public void SetOpenGLContext() | Improve this Doc View Source SetOpenGLDrawCallback(OpenGLDrawCallback) Assigns a callback to draw OpenGL on top of the image display. Used only for windows with OpenGL support. Declaration public void SetOpenGLDrawCallback(OpenGLDrawCallback callback) Parameters Type Name Description OpenGLDrawCallback callback The callback method that will be called every frame. | Improve this Doc View Source SetProperty(WindowProperty, WindowFlags) Change the parameters of the window dynamically. Declaration public void SetProperty(WindowProperty propId, WindowFlags propValue) Parameters Type Name Description WindowProperty propId The identifier of the property to edit. WindowFlags propValue The new value of the window property. | Improve this Doc View Source SetTrackbarPos(String, Int32) Sets the trackbar position. Declaration public void SetTrackbarPos(string trackbarName, int pos) Parameters Type Name Description String trackbarName The name of the trackbar. Int32 pos The new trackbar position. | Improve this Doc View Source ShowImage(Arr) Displays the image in the specified window. Declaration public void ShowImage(Arr image) Parameters Type Name Description Arr image The image to be shown. | Improve this Doc View Source Update() Updates the window. Used only for windows with OpenGL support. Declaration public void Update()"
  },
  "api/OpenCV.Net.NormTypes.html": {
    "href": "api/OpenCV.Net.NormTypes.html",
    "title": "Enum NormTypes",
    "keywords": "Enum NormTypes Specifies flags for Norm(Arr, Arr, NormTypes, Arr) and Normalize(Arr, Arr, Double, Double, NormTypes, Arr) . Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum NormTypes : int Fields Name Description C Specifies the elementwise max norm. Diff Specifies that a difference norm should be computed. DiffC Specifies a difference elementwise max norm. DiffL1 Specifies a difference L1 norm. DiffL2 Specifies a difference L2 norm. Hamming Specifies a Hamming distance norm. Hamming2 Specifies a Hamming2 norm. L1 Specifies the L1 or Manhattan norm. L2 Specifies the L2 or Euclidean norm. L2Sqr Specifies a squared L2 norm. MinMax Specifies that a range normalization should be computed. NormMask The bitmask used to extract the norm type. Relative Specifies that a relative difference norm should be computed. RelativeC Specifies a relative difference elementwise max norm. RelativeL1 Specifies a relative difference L1 norm. RelativeL2 Specifies a relative difference L2 norm."
  },
  "api/OpenCV.Net.ObjectDetection.html": {
    "href": "api/OpenCV.Net.ObjectDetection.html",
    "title": "Struct ObjectDetection",
    "keywords": "Struct ObjectDetection Represents a structure that contains the bounding box and confidence level for a detected object. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public struct ObjectDetection Fields | Improve this Doc View Source Rect The bounding box for the detected object. Declaration public Rect Rect Field Value Type Description Rect | Improve this Doc View Source Score The detection confidence level. Declaration public float Score Field Value Type Description Single"
  },
  "api/OpenCV.Net.OpenGLDrawCallback.html": {
    "href": "api/OpenCV.Net.OpenGLDrawCallback.html",
    "title": "Delegate OpenGLDrawCallback",
    "keywords": "Delegate OpenGLDrawCallback Represents the method that will draw OpenGL on top of the image display. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public delegate void OpenGLDrawCallback();"
  },
  "api/OpenCV.Net.PcaFlags.html": {
    "href": "api/OpenCV.Net.PcaFlags.html",
    "title": "Enum PcaFlags",
    "keywords": "Enum PcaFlags Specifies operation flags for CalcPCA(Arr, Arr, Arr, Arr, PcaFlags) . Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum PcaFlags : int Fields Name Description DataAsCol Specifies whether input vectors are stored as columns of the input matrix. DataAsRow Specifies whether input vectors are stored as rows of the input matrix. UseAvg Specifies whether the precomputed average is passed as a parameter."
  },
  "api/OpenCV.Net.Point.html": {
    "href": "api/OpenCV.Net.Point.html",
    "title": "Struct Point",
    "keywords": "Struct Point Represents a 2D point with integer coordinates (usually zero-based). Implements IEquatable < Point > Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public struct Point : IEquatable<Point> Constructors | Improve this Doc View Source Point(Point2f) Initializes a new instance of the Point structure from the specified Point2f structure. Declaration public Point(Point2f point) Parameters Type Name Description Point2f point The Point2f used to initialize this instance by rounding. | Improve this Doc View Source Point(Int32, Int32) Initializes a new instance of the Point structure from the specified coordinates. Declaration public Point(int x, int y) Parameters Type Name Description Int32 x The x-coordinate of the point. Int32 y The y-coordinate of the point. Fields | Improve this Doc View Source X The x-coordinate of the point. Declaration public int X Field Value Type Description Int32 | Improve this Doc View Source Y The y-coordinate of the point. Declaration public int Y Field Value Type Description Int32 Properties | Improve this Doc View Source Zero Returns a Point that has X and Y values set to zero. Declaration public static Point Zero { get; } Property Value Type Description Point Methods | Improve this Doc View Source Equals(Point) Returns a value indicating whether this instance has the same coordinates as a specified Point structure. Declaration public bool Equals(Point other) Parameters Type Name Description Point other The Point structure to compare to this instance. Returns Type Description Boolean true if other has the same X and Y coordinates as this instance; otherwise, false . | Improve this Doc View Source Equals(Object) Tests to see whether the specified object is a Point structure with the same coordinates as this Point structure. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The to test. Returns Type Description Boolean true if obj is a Point and has the same X and Y coordinates as this Point ; otherwise, false . | Improve this Doc View Source GetHashCode() Returns a hash code for this Point structure. Declaration public override int GetHashCode() Returns Type Description Int32 An integer value that specifies a hash value for this Point structure. | Improve this Doc View Source ToString() Creates a representation of this Point structure. Declaration public override string ToString() Returns Type Description String A containing the X and Y values of this Point structure. Operators | Improve this Doc View Source Addition(Point, Point) Adds two Point structures. Declaration public static Point operator +(Point left, Point right) Parameters Type Name Description Point left The Point structure on the left of the addition operator. Point right The Point structure on the right of the addition operator. Returns Type Description Point The Point that is the result of adding the left and right points. | Improve this Doc View Source Equality(Point, Point) Tests whether two Point structures are equal. Declaration public static bool operator ==(Point left, Point right) Parameters Type Name Description Point left The Point structure on the left of the equality operator. Point right The Point structure on the right of the equality operator. Returns Type Description Boolean true if left and right have equal X and Y coordinates; otherwise, false . | Improve this Doc View Source Inequality(Point, Point) Tests whether two Point structures are different. Declaration public static bool operator !=(Point left, Point right) Parameters Type Name Description Point left The Point structure on the left of the inequality operator. Point right The Point structure on the right of the inequality operator. Returns Type Description Boolean true if left and right differ either in X or Y coordinates; false if left and right are equal. | Improve this Doc View Source Multiply(Point, Int32) Multiplies a Point structure by an integer scalar. Declaration public static Point operator *(Point point, int scalar) Parameters Type Name Description Point point The Point structure to multiply by the scalar . Int32 scalar The scalar by which to multiply the point . Returns Type Description Point The Point that is the result of multiplying point by scalar . | Improve this Doc View Source Multiply(Int32, Point) Multiplies a Point structure by an integer scalar. Declaration public static Point operator *(int scalar, Point point) Parameters Type Name Description Int32 scalar The scalar by which to multiply the point . Point point The Point structure to multiply by the scalar . Returns Type Description Point The Point that is the result of multiplying point by scalar . | Improve this Doc View Source Subtraction(Point, Point) Subtracts two Point structures. Declaration public static Point operator -(Point left, Point right) Parameters Type Name Description Point left The Point structure on the left of the subtraction operator. Point right The Point structure on the right of the subtraction operator. Returns Type Description Point The Point that is the result of subtracting the left and right points. | Improve this Doc View Source UnaryNegation(Point) Returns the inversion with respect to the origin of the specified Point structure. Declaration public static Point operator -(Point point) Parameters Type Name Description Point point The Point structure for which to compute the inversion. Returns Type Description Point The Point that is the result of inverting point with respect to the origin. Implements IEquatable<>"
  },
  "api/OpenCV.Net.Point2d.html": {
    "href": "api/OpenCV.Net.Point2d.html",
    "title": "Struct Point2d",
    "keywords": "Struct Point2d Represents a 2D point with double-precision floating-point coordinates. Implements IEquatable < Point2d > Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public struct Point2d : IEquatable<Point2d> Constructors | Improve this Doc View Source Point2d(Point) Initializes a new instance of the Point2d structure from the specified Point structure. Declaration public Point2d(Point point) Parameters Type Name Description Point point The Point used to initialize this instance. | Improve this Doc View Source Point2d(Double, Double) Initializes a new instance of the Point2d structure from the specified coordinates. Declaration public Point2d(double x, double y) Parameters Type Name Description Double x The x-coordinate of the point. Double y The y-coordinate of the point. Fields | Improve this Doc View Source X The x-coordinate of the point. Declaration public double X Field Value Type Description Double | Improve this Doc View Source Y The y-coordinate of the point. Declaration public double Y Field Value Type Description Double Properties | Improve this Doc View Source Zero Returns a Point2d that has X and Y values set to zero. Declaration public static Point2d Zero { get; } Property Value Type Description Point2d Methods | Improve this Doc View Source Equals(Point2d) Returns a value indicating whether this instance has the same coordinates as a specified Point2d structure. Declaration public bool Equals(Point2d other) Parameters Type Name Description Point2d other The Point2d structure to compare to this instance. Returns Type Description Boolean true if other has the same X and Y coordinates as this instance; otherwise, false . | Improve this Doc View Source Equals(Object) Tests to see whether the specified object is a Point2d structure with the same coordinates as this Point2d structure. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The to test. Returns Type Description Boolean true if obj is a Point2d and has the same X and Y coordinates as this Point2d ; otherwise, false . | Improve this Doc View Source GetHashCode() Returns a hash code for this Point2d structure. Declaration public override int GetHashCode() Returns Type Description Int32 An integer value that specifies a hash value for this Point2d structure. | Improve this Doc View Source ToString() Creates a representation of this Point2d structure. Declaration public override string ToString() Returns Type Description String A containing the X and Y values of this Point2d structure. Operators | Improve this Doc View Source Addition(Point2d, Point2d) Adds two Point2d structures. Declaration public static Point2d operator +(Point2d left, Point2d right) Parameters Type Name Description Point2d left The Point2d structure on the left of the addition operator. Point2d right The Point2d structure on the right of the addition operator. Returns Type Description Point2d The Point2d that is the result of adding the left and right points. | Improve this Doc View Source Equality(Point2d, Point2d) Tests whether two Point2d structures are equal. Declaration public static bool operator ==(Point2d left, Point2d right) Parameters Type Name Description Point2d left The Point2d structure on the left of the equality operator. Point2d right The Point2d structure on the right of the equality operator. Returns Type Description Boolean true if left and right have equal X and Y coordinates; otherwise, false . | Improve this Doc View Source Inequality(Point2d, Point2d) Tests whether two Point2d structures are different. Declaration public static bool operator !=(Point2d left, Point2d right) Parameters Type Name Description Point2d left The Point2d structure on the left of the inequality operator. Point2d right The Point2d structure on the right of the inequality operator. Returns Type Description Boolean true if left and right differ either in X or Y coordinates; false if left and right are equal. | Improve this Doc View Source Multiply(Point2d, Single) Multiplies a Point2d structure by an integer scalar. Declaration public static Point2d operator *(Point2d point, float scalar) Parameters Type Name Description Point2d point The Point2d structure to multiply by the scalar . Single scalar The scalar by which to multiply the point . Returns Type Description Point2d The Point2d that is the result of multiplying point by scalar . | Improve this Doc View Source Multiply(Single, Point2d) Multiplies a Point2d structure by an integer scalar. Declaration public static Point2d operator *(float scalar, Point2d point) Parameters Type Name Description Single scalar The scalar by which to multiply the point . Point2d point The Point2d structure to multiply by the scalar . Returns Type Description Point2d The Point2d that is the result of multiplying point by scalar . | Improve this Doc View Source Subtraction(Point2d, Point2d) Subtracts two Point2d structures. Declaration public static Point2d operator -(Point2d left, Point2d right) Parameters Type Name Description Point2d left The Point2d structure on the left of the subtraction operator. Point2d right The Point2d structure on the right of the subtraction operator. Returns Type Description Point2d The Point2d that is the result of subtracting the left and right points. | Improve this Doc View Source UnaryNegation(Point2d) Returns the inversion with respect to the origin of the specified Point2d structure. Declaration public static Point2d operator -(Point2d point) Parameters Type Name Description Point2d point The Point2d structure for which to compute the inversion. Returns Type Description Point2d The Point2d that is the result of inverting point with respect to the origin. Implements IEquatable<>"
  },
  "api/OpenCV.Net.Point2f.html": {
    "href": "api/OpenCV.Net.Point2f.html",
    "title": "Struct Point2f",
    "keywords": "Struct Point2f Represents a 2D point with single-precision floating-point coordinates. Implements IEquatable < Point2f > Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public struct Point2f : IEquatable<Point2f> Constructors | Improve this Doc View Source Point2f(Point) Initializes a new instance of the Point2f structure from the specified Point structure. Declaration public Point2f(Point point) Parameters Type Name Description Point point The Point used to initialize this instance. | Improve this Doc View Source Point2f(Single, Single) Initializes a new instance of the Point2f structure from the specified coordinates. Declaration public Point2f(float x, float y) Parameters Type Name Description Single x The x-coordinate of the point. Single y The y-coordinate of the point. Fields | Improve this Doc View Source X The x-coordinate of the point. Declaration public float X Field Value Type Description Single | Improve this Doc View Source Y The y-coordinate of the point. Declaration public float Y Field Value Type Description Single Properties | Improve this Doc View Source Zero Returns a Point2f that has X and Y values set to zero. Declaration public static Point2f Zero { get; } Property Value Type Description Point2f Methods | Improve this Doc View Source Equals(Point2f) Returns a value indicating whether this instance has the same coordinates as a specified Point2f structure. Declaration public bool Equals(Point2f other) Parameters Type Name Description Point2f other The Point2f structure to compare to this instance. Returns Type Description Boolean true if other has the same X and Y coordinates as this instance; otherwise, false . | Improve this Doc View Source Equals(Object) Tests to see whether the specified object is a Point2f structure with the same coordinates as this Point2f structure. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The to test. Returns Type Description Boolean true if obj is a Point2f and has the same X and Y coordinates as this Point2f ; otherwise, false . | Improve this Doc View Source GetHashCode() Returns a hash code for this Point2f structure. Declaration public override int GetHashCode() Returns Type Description Int32 An integer value that specifies a hash value for this Point2f structure. | Improve this Doc View Source ToString() Creates a representation of this Point2f structure. Declaration public override string ToString() Returns Type Description String A containing the X and Y values of this Point2f structure. Operators | Improve this Doc View Source Addition(Point2f, Point2f) Adds two Point2f structures. Declaration public static Point2f operator +(Point2f left, Point2f right) Parameters Type Name Description Point2f left The Point2f structure on the left of the addition operator. Point2f right The Point2f structure on the right of the addition operator. Returns Type Description Point2f The Point2f that is the result of adding the left and right points. | Improve this Doc View Source Equality(Point2f, Point2f) Tests whether two Point2f structures are equal. Declaration public static bool operator ==(Point2f left, Point2f right) Parameters Type Name Description Point2f left The Point2f structure on the left of the equality operator. Point2f right The Point2f structure on the right of the equality operator. Returns Type Description Boolean true if left and right have equal X and Y coordinates; otherwise, false . | Improve this Doc View Source Inequality(Point2f, Point2f) Tests whether two Point2f structures are different. Declaration public static bool operator !=(Point2f left, Point2f right) Parameters Type Name Description Point2f left The Point2f structure on the left of the inequality operator. Point2f right The Point2f structure on the right of the inequality operator. Returns Type Description Boolean true if left and right differ either in X or Y coordinates; false if left and right are equal. | Improve this Doc View Source Multiply(Point2f, Single) Multiplies a Point2f structure by an integer scalar. Declaration public static Point2f operator *(Point2f point, float scalar) Parameters Type Name Description Point2f point The Point2f structure to multiply by the scalar . Single scalar The scalar by which to multiply the point . Returns Type Description Point2f The Point2f that is the result of multiplying point by scalar . | Improve this Doc View Source Multiply(Single, Point2f) Multiplies a Point2f structure by an integer scalar. Declaration public static Point2f operator *(float scalar, Point2f point) Parameters Type Name Description Single scalar The scalar by which to multiply the point . Point2f point The Point2f structure to multiply by the scalar . Returns Type Description Point2f The Point2f that is the result of multiplying point by scalar . | Improve this Doc View Source Subtraction(Point2f, Point2f) Subtracts two Point2f structures. Declaration public static Point2f operator -(Point2f left, Point2f right) Parameters Type Name Description Point2f left The Point2f structure on the left of the subtraction operator. Point2f right The Point2f structure on the right of the subtraction operator. Returns Type Description Point2f The Point2f that is the result of subtracting the left and right points. | Improve this Doc View Source UnaryNegation(Point2f) Returns the inversion with respect to the origin of the specified Point2f structure. Declaration public static Point2f operator -(Point2f point) Parameters Type Name Description Point2f point The Point2f structure for which to compute the inversion. Returns Type Description Point2f The Point2f that is the result of inverting point with respect to the origin. Implements IEquatable<>"
  },
  "api/OpenCV.Net.Point3d.html": {
    "href": "api/OpenCV.Net.Point3d.html",
    "title": "Struct Point3d",
    "keywords": "Struct Point3d Represents a 3D point with double-precision floating-point coordinates. Implements IEquatable < Point3d > Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public struct Point3d : IEquatable<Point3d> Constructors | Improve this Doc View Source Point3d(Double, Double, Double) Initializes a new instance of the Point3d structure from the specified coordinates. Declaration public Point3d(double x, double y, double z) Parameters Type Name Description Double x The x-coordinate of the point. Double y The y-coordinate of the point. Double z The z-coordinate of the point. Fields | Improve this Doc View Source X The x-coordinate of the point. Declaration public double X Field Value Type Description Double | Improve this Doc View Source Y The y-coordinate of the point. Declaration public double Y Field Value Type Description Double | Improve this Doc View Source Z The z-coordinate of the point. Declaration public double Z Field Value Type Description Double Properties | Improve this Doc View Source Zero Returns a Point3d that has X , Y and Z values set to zero. Declaration public static Point3d Zero { get; } Property Value Type Description Point3d Methods | Improve this Doc View Source Equals(Point3d) Returns a value indicating whether this instance has the same coordinates as a specified Point3d structure. Declaration public bool Equals(Point3d other) Parameters Type Name Description Point3d other The Point3d structure to compare to this instance. Returns Type Description Boolean true if other has the same X, Y and Z coordinates as this instance; otherwise, false . | Improve this Doc View Source Equals(Object) Tests to see whether the specified object is a Point3d structure with the same coordinates as this Point3d structure. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The to test. Returns Type Description Boolean true if obj is a Point3d and has the same X, Y and Z coordinates as this Point3d ; otherwise, false . | Improve this Doc View Source GetHashCode() Returns a hash code for this Point3d structure. Declaration public override int GetHashCode() Returns Type Description Int32 An integer value that specifies a hash value for this Point3d structure. | Improve this Doc View Source ToString() Creates a representation of this Point3d structure. Declaration public override string ToString() Returns Type Description String A containing the X , Y and Z values of this Point3d structure. Operators | Improve this Doc View Source Addition(Point3d, Point3d) Adds two Point3d structures. Declaration public static Point3d operator +(Point3d left, Point3d right) Parameters Type Name Description Point3d left The Point3d structure on the left of the addition operator. Point3d right The Point3d structure on the right of the addition operator. Returns Type Description Point3d The Point3d that is the result of adding the left and right points. | Improve this Doc View Source Equality(Point3d, Point3d) Tests whether two Point3d structures are equal. Declaration public static bool operator ==(Point3d left, Point3d right) Parameters Type Name Description Point3d left The Point3d structure on the left of the equality operator. Point3d right The Point3d structure on the right of the equality operator. Returns Type Description Boolean true if left and right have equal X, Y and Z coordinates; otherwise, false . | Improve this Doc View Source Inequality(Point3d, Point3d) Tests whether two Point3d structures are different. Declaration public static bool operator !=(Point3d left, Point3d right) Parameters Type Name Description Point3d left The Point3d structure on the left of the inequality operator. Point3d right The Point3d structure on the right of the inequality operator. Returns Type Description Boolean true if left and right differ in X, Y or Z coordinates; false if left and right are equal. | Improve this Doc View Source Multiply(Point3d, Single) Multiplies a Point3d structure by an integer scalar. Declaration public static Point3d operator *(Point3d point, float scalar) Parameters Type Name Description Point3d point The Point3d structure to multiply by the scalar . Single scalar The scalar by which to multiply the point . Returns Type Description Point3d The Point3d that is the result of multiplying point by scalar . | Improve this Doc View Source Multiply(Single, Point3d) Multiplies a Point3d structure by an integer scalar. Declaration public static Point3d operator *(float scalar, Point3d point) Parameters Type Name Description Single scalar The scalar by which to multiply the point . Point3d point The Point3d structure to multiply by the scalar . Returns Type Description Point3d The Point3d that is the result of multiplying point by scalar . | Improve this Doc View Source Subtraction(Point3d, Point3d) Subtracts two Point3d structures. Declaration public static Point3d operator -(Point3d left, Point3d right) Parameters Type Name Description Point3d left The Point3d structure on the left of the subtraction operator. Point3d right The Point3d structure on the right of the subtraction operator. Returns Type Description Point3d The Point3d that is the result of subtracting the left and right points. | Improve this Doc View Source UnaryNegation(Point3d) Returns the inversion with respect to the origin of the specified Point3d structure. Declaration public static Point3d operator -(Point3d point) Parameters Type Name Description Point3d point The Point3d structure for which to compute the inversion. Returns Type Description Point3d The Point3d that is the result of inverting point with respect to the origin. Implements IEquatable<>"
  },
  "api/OpenCV.Net.Point3f.html": {
    "href": "api/OpenCV.Net.Point3f.html",
    "title": "Struct Point3f",
    "keywords": "Struct Point3f Represents a 3D point with single-precision floating-point coordinates. Implements IEquatable < Point3f > Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public struct Point3f : IEquatable<Point3f> Constructors | Improve this Doc View Source Point3f(Single, Single, Single) Initializes a new instance of the Point3f structure from the specified coordinates. Declaration public Point3f(float x, float y, float z) Parameters Type Name Description Single x The x-coordinate of the point. Single y The y-coordinate of the point. Single z The z-coordinate of the point. Fields | Improve this Doc View Source X The x-coordinate of the point. Declaration public float X Field Value Type Description Single | Improve this Doc View Source Y The y-coordinate of the point. Declaration public float Y Field Value Type Description Single | Improve this Doc View Source Z The z-coordinate of the point. Declaration public float Z Field Value Type Description Single Properties | Improve this Doc View Source Zero Returns a Point3f that has X , Y and Z values set to zero. Declaration public static Point3f Zero { get; } Property Value Type Description Point3f Methods | Improve this Doc View Source Equals(Point3f) Returns a value indicating whether this instance has the same coordinates as a specified Point3f structure. Declaration public bool Equals(Point3f other) Parameters Type Name Description Point3f other The Point3f structure to compare to this instance. Returns Type Description Boolean true if other has the same X, Y and Z coordinates as this instance; otherwise, false . | Improve this Doc View Source Equals(Object) Tests to see whether the specified object is a Point3f structure with the same coordinates as this Point3f structure. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The to test. Returns Type Description Boolean true if obj is a Point3f and has the same X, Y and Z coordinates as this Point3f ; otherwise, false . | Improve this Doc View Source GetHashCode() Returns a hash code for this Point3f structure. Declaration public override int GetHashCode() Returns Type Description Int32 An integer value that specifies a hash value for this Point3f structure. | Improve this Doc View Source ToString() Creates a representation of this Point3f structure. Declaration public override string ToString() Returns Type Description String A containing the X , Y and Z values of this Point3f structure. Operators | Improve this Doc View Source Addition(Point3f, Point3f) Adds two Point3f structures. Declaration public static Point3f operator +(Point3f left, Point3f right) Parameters Type Name Description Point3f left The Point3f structure on the left of the addition operator. Point3f right The Point3f structure on the right of the addition operator. Returns Type Description Point3f The Point3f that is the result of adding the left and right points. | Improve this Doc View Source Equality(Point3f, Point3f) Tests whether two Point3f structures are equal. Declaration public static bool operator ==(Point3f left, Point3f right) Parameters Type Name Description Point3f left The Point3f structure on the left of the equality operator. Point3f right The Point3f structure on the right of the equality operator. Returns Type Description Boolean true if left and right have equal X, Y and Z coordinates; otherwise, false . | Improve this Doc View Source Inequality(Point3f, Point3f) Tests whether two Point3f structures are different. Declaration public static bool operator !=(Point3f left, Point3f right) Parameters Type Name Description Point3f left The Point3f structure on the left of the inequality operator. Point3f right The Point3f structure on the right of the inequality operator. Returns Type Description Boolean true if left and right differ in X, Y or Z coordinates; false if left and right are equal. | Improve this Doc View Source Multiply(Point3f, Single) Multiplies a Point3f structure by an integer scalar. Declaration public static Point3f operator *(Point3f point, float scalar) Parameters Type Name Description Point3f point The Point3f structure to multiply by the scalar . Single scalar The scalar by which to multiply the point . Returns Type Description Point3f The Point3f that is the result of multiplying point by scalar . | Improve this Doc View Source Multiply(Single, Point3f) Multiplies a Point3f structure by an integer scalar. Declaration public static Point3f operator *(float scalar, Point3f point) Parameters Type Name Description Single scalar The scalar by which to multiply the point . Point3f point The Point3f structure to multiply by the scalar . Returns Type Description Point3f The Point3f that is the result of multiplying point by scalar . | Improve this Doc View Source Subtraction(Point3f, Point3f) Subtracts two Point3f structures. Declaration public static Point3f operator -(Point3f left, Point3f right) Parameters Type Name Description Point3f left The Point3f structure on the left of the subtraction operator. Point3f right The Point3f structure on the right of the subtraction operator. Returns Type Description Point3f The Point3f that is the result of subtracting the left and right points. | Improve this Doc View Source UnaryNegation(Point3f) Returns the inversion with respect to the origin of the specified Point3f structure. Declaration public static Point3f operator -(Point3f point) Parameters Type Name Description Point3f point The Point3f structure for which to compute the inversion. Returns Type Description Point3f The Point3f that is the result of inverting point with respect to the origin. Implements IEquatable<>"
  },
  "api/OpenCV.Net.PolygonApproximation.html": {
    "href": "api/OpenCV.Net.PolygonApproximation.html",
    "title": "Enum PolygonApproximation",
    "keywords": "Enum PolygonApproximation Specifies the available polygon approximation algorithms. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum PolygonApproximation : int Fields Name Description DouglasPeucker Specifies that the Douglas-Peucker polygon approximation algorithm should be used."
  },
  "api/OpenCV.Net.PositObject.html": {
    "href": "api/OpenCV.Net.PositObject.html",
    "title": "Class PositObject",
    "keywords": "Class PositObject Represents information about a 3D object model for camera pose estimation. Inheritance Object PositObject Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public class PositObject : SafeHandleZeroOrMinusOneIsInvalid Constructors | Improve this Doc View Source PositObject(Point3f[]) Initializes a new instance of the PositObject class with the specified 3D object model points. Declaration public PositObject(Point3f[] points) Parameters Type Name Description Point3f [] points The points representing the vertices of the 3D model. Methods | Improve this Doc View Source POSIT(Point2f[], Double, TermCriteria, Single[], Single[]) Implements the POSIT algorithm. Declaration public void POSIT(Point2f[] imagePoints, double focalLength, TermCriteria criteria, float[] rotationMatrix, float[] translationVector) Parameters Type Name Description Point2f [] imagePoints Pointer to the object point projections on the 2D image plane. Double focalLength Focal length of the camera used. TermCriteria criteria Termination criteria of the iterative POSIT algorithm. Single [] rotationMatrix The output rotation matrix representing the estimated pose. Single [] translationVector The output translation vector representing the estimated pose. | Improve this Doc View Source ReleaseHandle() Executes the code required to free the native PositObject handle. Declaration protected override bool ReleaseHandle() Returns Type Description Boolean true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false ."
  },
  "api/OpenCV.Net.PyramidDecompositionFilter.html": {
    "href": "api/OpenCV.Net.PyramidDecompositionFilter.html",
    "title": "Enum PyramidDecompositionFilter",
    "keywords": "Enum PyramidDecompositionFilter Specifies the type of linear filter used for pyramid up and downsampling. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum PyramidDecompositionFilter : int Fields Name Description Gaussian5x5 Specifies a 5x5 gaussian filter."
  },
  "api/OpenCV.Net.RandDistribution.html": {
    "href": "api/OpenCV.Net.RandDistribution.html",
    "title": "Enum RandDistribution",
    "keywords": "Enum RandDistribution Specifies the random distribution to use for RandArr(ref UInt64, Arr, RandDistribution, Scalar, Scalar) . Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum RandDistribution : int Fields Name Description Normal Specifies that a normal (gaussian) distribution should be used. Uniform Specifies that a uniform distribution should be used."
  },
  "api/OpenCV.Net.Rect.html": {
    "href": "api/OpenCV.Net.Rect.html",
    "title": "Struct Rect",
    "keywords": "Struct Rect Represents the offset and size of a rectangle. Implements IEquatable < Rect > Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public struct Rect : IEquatable<Rect> Constructors | Improve this Doc View Source Rect(Int32, Int32, Int32, Int32) Initializes a new instance of the Rect structure from the specified offset and dimensions. Declaration public Rect(int x, int y, int width, int height) Parameters Type Name Description Int32 x The x-coordinate of the top-left corner. Int32 y The y-coordinate of the top-left corner (or bottom-left depending on image origin). Int32 width The width of the rectangle. Int32 height The height of the rectangle. Fields | Improve this Doc View Source Height The height of the rectangle. Declaration public int Height Field Value Type Description Int32 | Improve this Doc View Source Width The width of the rectangle. Declaration public int Width Field Value Type Description Int32 | Improve this Doc View Source X The x-coordinate of the top-left corner. Declaration public int X Field Value Type Description Int32 | Improve this Doc View Source Y The y-coordinate of the top-left corner (or bottom-left depending on image origin). Declaration public int Y Field Value Type Description Int32 Methods | Improve this Doc View Source Equals(Rect) Returns a value indicating whether this instance has the same offset and size as a specified Rect structure. Declaration public bool Equals(Rect other) Parameters Type Name Description Rect other The Rect structure to compare to this instance. Returns Type Description Boolean true if other has the same offset and size as this instance; otherwise, false . | Improve this Doc View Source Equals(Object) Tests to see whether the specified object is a Rect structure with the same offset and size as this Rect structure. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The to test. Returns Type Description Boolean true if obj is a Rect and has the same offset and size as this Rect ; otherwise, false . | Improve this Doc View Source GetHashCode() Returns a hash code for this Rect structure. Declaration public override int GetHashCode() Returns Type Description Int32 An integer value that specifies a hash value for this Rect structure. | Improve this Doc View Source ToString() Creates a representation of this Rect structure. Declaration public override string ToString() Returns Type Description String A containing the X and Y offset as well as the Width and Height of this Rect structure. Operators | Improve this Doc View Source Equality(Rect, Rect) Tests whether two Rect structures are equal. Declaration public static bool operator ==(Rect left, Rect right) Parameters Type Name Description Rect left The Rect structure on the left of the equality operator. Rect right The Rect structure on the right of the equality operator. Returns Type Description Boolean true if left and right have equal offset and size; otherwise, false . | Improve this Doc View Source Inequality(Rect, Rect) Tests whether two Rect structures are different. Declaration public static bool operator !=(Rect left, Rect right) Parameters Type Name Description Rect left The Rect structure on the left of the inequality operator. Rect right The Rect structure on the right of the inequality operator. Returns Type Description Boolean true if left and right differ in offset or size; false if left and right are equal. Implements IEquatable<>"
  },
  "api/OpenCV.Net.ReduceOperation.html": {
    "href": "api/OpenCV.Net.ReduceOperation.html",
    "title": "Enum ReduceOperation",
    "keywords": "Enum ReduceOperation Specifies the matrix reduction operation. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum ReduceOperation : int Fields Name Description Avg Specifies that the output is the mean vector of all of the matrix rows/columns. Max Specifies that the output is the maximum (column/row-wise) of all of the matrix rows/columns. Min Specifies that the output is the minimum (column/row-wise) of all of the matrix rows/columns. Sum Specifies that the output is the sum of all the matrix rows/columns."
  },
  "api/OpenCV.Net.RotatedRect.html": {
    "href": "api/OpenCV.Net.RotatedRect.html",
    "title": "Struct RotatedRect",
    "keywords": "Struct RotatedRect Represents a possibly rotated rectangle. Implements IEquatable < RotatedRect > Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public struct RotatedRect : IEquatable<RotatedRect> Constructors | Improve this Doc View Source RotatedRect(Point2f, Size2f, Single) Initializes a new instance of the RotatedRect structure with the specified center, size and rotation angle. Declaration public RotatedRect(Point2f center, Size2f size, float angle) Parameters Type Name Description Point2f center The coordinates of the mass center of the rectangle. Size2f size The size of the rectangle. Single angle The rotation angle of the rectangle in degrees. Fields | Improve this Doc View Source Angle The rotation angle of the rectangle in degrees. Declaration public float Angle Field Value Type Description Single | Improve this Doc View Source Center The mass center of the rectangle. Declaration public Point2f Center Field Value Type Description Point2f | Improve this Doc View Source Size The size of the rectangle. Declaration public Size2f Size Field Value Type Description Size2f Methods | Improve this Doc View Source Equals(RotatedRect) Returns a value indicating whether this instance has the same center, size and rotation angle as a specified RotatedRect structure. Declaration public bool Equals(RotatedRect other) Parameters Type Name Description RotatedRect other The RotatedRect structure to compare to this instance. Returns Type Description Boolean true if other has the same center, size and rotation angle as this instance; otherwise, false . | Improve this Doc View Source Equals(Object) Tests to see whether the specified object is a RotatedRect structure with the same center, size and rotation angle as this RotatedRect structure. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The to test. Returns Type Description Boolean true if obj is a RotatedRect and has the same center, size and rotation angle as this RotatedRect ; otherwise, false . | Improve this Doc View Source GetHashCode() Returns a hash code for this RotatedRect structure. Declaration public override int GetHashCode() Returns Type Description Int32 An integer value that specifies a hash value for this RotatedRect structure. | Improve this Doc View Source ToString() Creates a representation of this RotatedRect structure. Declaration public override string ToString() Returns Type Description String A containing the center, size and rotation angle of this RotatedRect structure. Operators | Improve this Doc View Source Equality(RotatedRect, RotatedRect) Tests whether two RotatedRect structures are equal. Declaration public static bool operator ==(RotatedRect left, RotatedRect right) Parameters Type Name Description RotatedRect left The RotatedRect structure on the left of the equality operator. RotatedRect right The RotatedRect structure on the right of the equality operator. Returns Type Description Boolean true if left and right have equal center, size and rotation angle; otherwise, false . | Improve this Doc View Source Inequality(RotatedRect, RotatedRect) Tests whether two RotatedRect structures are different. Declaration public static bool operator !=(RotatedRect left, RotatedRect right) Parameters Type Name Description RotatedRect left The RotatedRect structure on the left of the inequality operator. RotatedRect right The RotatedRect structure on the right of the inequality operator. Returns Type Description Boolean true if left and right differ in center, size or rotation angle; false if left and right are equal. Implements IEquatable<>"
  },
  "api/OpenCV.Net.Scalar.html": {
    "href": "api/OpenCV.Net.Scalar.html",
    "title": "Struct Scalar",
    "keywords": "Struct Scalar A container for one-,two-,three- or four-tuples of doubles. Scalar is always represented as a four-tuple. Implements IEquatable < Scalar > Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public struct Scalar : IEquatable<Scalar> Constructors | Improve this Doc View Source Scalar(Double, Double, Double, Double) Initializes a new instance of the Scalar structure from the specified values. Declaration public Scalar(double val0, double val1 = null, double val2 = null, double val3 = null) Parameters Type Name Description Double val0 The first value of the scalar tuple. Double val1 The optional second value of the scalar tuple. Double val2 The optional third value of the scalar tuple. Double val3 The optional fourth value of the scalar tuple. Fields | Improve this Doc View Source Val0 The first value of the scalar tuple. Declaration public double Val0 Field Value Type Description Double | Improve this Doc View Source Val1 The second value of the scalar tuple. Declaration public double Val1 Field Value Type Description Double | Improve this Doc View Source Val2 The third value of the scalar tuple. Declaration public double Val2 Field Value Type Description Double | Improve this Doc View Source Val3 The fourth value of the scalar tuple. Declaration public double Val3 Field Value Type Description Double Methods | Improve this Doc View Source All(Double) Initializes a new Scalar instance where all the values of the tuple are initialized to the same scalar value. Declaration public static Scalar All(double val0123) Parameters Type Name Description Double val0123 The scalar value from which to initialize all tuple scalars. Returns Type Description Scalar A new Scalar instance where all the values of the tuple are initialized to the specified scalar value. | Improve this Doc View Source Equals(Scalar) Returns a value indicating whether this instance has the same tuple values as a specified Scalar structure. Declaration public bool Equals(Scalar other) Parameters Type Name Description Scalar other The Scalar structure to compare to this instance. Returns Type Description Boolean true if other has the same Val0, Val1, Val2 and Val3 values as this instance; otherwise, false . | Improve this Doc View Source Equals(Object) Tests to see whether the specified object is a Scalar structure with the same tuple values as this Scalar structure. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The to test. Returns Type Description Boolean true if obj is a Scalar and has the same Val0, Val1, Val2 and Val3 values as this Scalar ; otherwise, false . | Improve this Doc View Source GetHashCode() Returns a hash code for this Scalar structure. Declaration public override int GetHashCode() Returns Type Description Int32 An integer value that specifies a hash value for this Scalar structure. | Improve this Doc View Source PackedColor(Double, Int32) Initializes a new Scalar instance from a packed color value. Declaration public static Scalar PackedColor(double color, int arrayType) Parameters Type Name Description Double color The packed color value. Int32 arrayType The type of array elements. If the depth of the elements is not 8-bit, the first channels of the returned Scalar are set to the same value as color . Returns Type Description Scalar A new Scalar instance where the values of the tuple are initialized to represent the unpacked color. | Improve this Doc View Source Real(Double) Initializes a new Scalar instance representing a single scalar value. Declaration public static Scalar Real(double val0) Parameters Type Name Description Double val0 The scalar value. Returns Type Description Scalar A new Scalar instance representing a single scalar value. | Improve this Doc View Source Rgb(Double, Double, Double) Initializes a new Scalar instance representing a color pixel value. Declaration public static Scalar Rgb(double r, double g, double b) Parameters Type Name Description Double r The red component of the color. Double g The green component of the color. Double b The blue component of the color. Returns Type Description Scalar A new Scalar instance where the values of the tuple are initialized to the specified color components. | Improve this Doc View Source ToString() Creates a representation of this Scalar structure. Declaration public override string ToString() Returns Type Description String A containing the four tuple values of this Scalar structure. Operators | Improve this Doc View Source Equality(Scalar, Scalar) Tests whether two Scalar structures are equal. Declaration public static bool operator ==(Scalar left, Scalar right) Parameters Type Name Description Scalar left The Scalar structure on the left of the equality operator. Scalar right The Scalar structure on the right of the equality operator. Returns Type Description Boolean true if left and right have equal Val0, Val1, Val2 and Val3 values; otherwise, false . | Improve this Doc View Source Inequality(Scalar, Scalar) Tests whether two Scalar structures are different. Declaration public static bool operator !=(Scalar left, Scalar right) Parameters Type Name Description Scalar left The Scalar structure on the left of the inequality operator. Scalar right The Scalar structure on the right of the inequality operator. Returns Type Description Boolean true if left and right differ in Val0, Val1, Val2 or Val3 values; false if left and right are equal. Implements IEquatable<>"
  },
  "api/OpenCV.Net.Seq.html": {
    "href": "api/OpenCV.Net.Seq.html",
    "title": "Class Seq",
    "keywords": "Class Seq Represents a growable sequence of elements. Inheritance Object CVHandle Seq Chain Contour Set Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public class Seq : CVHandle Constructors | Improve this Doc View Source Seq(Depth, Int32, MemStorage) Initializes a new instance of the Seq class with the specified element bit depth and channels per element. Memory for the sequence will be allocated from the provided storage . Declaration public Seq(Depth depth, int channels, MemStorage storage) Parameters Type Name Description Depth depth The bit depth of sequence elements. Int32 channels The number of channels per sequence element. MemStorage storage The memory storage used to grow the sequence. | Improve this Doc View Source Seq(Depth, Int32, SequenceKind, MemStorage) Initializes a new instance of the Seq class with the specified element bit depth , channels per element and sequence kind . Memory for the sequence will be allocated from the provided storage . Declaration public Seq(Depth depth, int channels, SequenceKind kind, MemStorage storage) Parameters Type Name Description Depth depth The bit depth of sequence elements. Int32 channels The number of channels per sequence element. SequenceKind kind The kind of sequence to create. MemStorage storage The memory storage used to grow the sequence. | Improve this Doc View Source Seq(Depth, Int32, SequenceKind, SequenceFlags, MemStorage) Initializes a new instance of the Seq class with the specified element bit depth , channels per element, sequence kind and operational flags . Memory for the sequence will be allocated from the provided storage . Declaration public Seq(Depth depth, int channels, SequenceKind kind, SequenceFlags flags, MemStorage storage) Parameters Type Name Description Depth depth The bit depth of sequence elements. Int32 channels The number of channels per sequence element. SequenceKind kind The kind of sequence to create. SequenceFlags flags The operational flags for the sequence. MemStorage storage The memory storage used to grow the sequence. | Improve this Doc View Source Seq(SequenceElementType, MemStorage) Initializes a new instance of the Seq class from a specified common element type. Memory for the sequence will be allocated from the provided storage . Declaration public Seq(SequenceElementType elementType, MemStorage storage) Parameters Type Name Description SequenceElementType elementType The type of elements in the sequence. MemStorage storage The memory storage used to grow the sequence. | Improve this Doc View Source Seq(SequenceElementType, SequenceKind, MemStorage) Initializes a new instance of the Seq class with the specified common element type and sequence kind . Memory for the sequence will be allocated from the provided storage . Declaration public Seq(SequenceElementType elementType, SequenceKind kind, MemStorage storage) Parameters Type Name Description SequenceElementType elementType The type of elements in the sequence. SequenceKind kind The kind of sequence to create. MemStorage storage The memory storage used to grow the sequence. | Improve this Doc View Source Seq(SequenceElementType, SequenceKind, SequenceFlags, MemStorage) Initializes a new instance of the Seq class with the specified common element type, sequence kind and operational flags . Memory for the sequence will be allocated from the provided storage . Declaration public Seq(SequenceElementType elementType, SequenceKind kind, SequenceFlags flags, MemStorage storage) Parameters Type Name Description SequenceElementType elementType The type of elements in the sequence. SequenceKind kind The kind of sequence to create. SequenceFlags flags The operational flags for the sequence. MemStorage storage The memory storage used to grow the sequence. Properties | Improve this Doc View Source Count Gets the total number of elements in the sequence. Declaration public int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source ElementSize Gets the size of a sequence element in bytes. Declaration public int ElementSize { get; } Property Value Type Description Int32 | Improve this Doc View Source HeaderSize Gets the size of the Seq header, in bytes. Declaration public static int HeaderSize { get; } Property Value Type Description Int32 | Improve this Doc View Source HNext Gets the next sequence on the same hierarchical level. Declaration public Seq HNext { get; set; } Property Value Type Description Seq | Improve this Doc View Source HPrev Gets the previous sequence on the same hierarchical level. Declaration public Seq HPrev { get; set; } Property Value Type Description Seq | Improve this Doc View Source Kind Gets a SequenceKind value indicating the kind of the sequence. Declaration public SequenceKind Kind { get; } Property Value Type Description SequenceKind | Improve this Doc View Source Storage Gets the MemStorage where the sequence is stored. Declaration public MemStorage Storage { get; } Property Value Type Description MemStorage | Improve this Doc View Source VNext Gets the first child of the sequence in the hierarchy. Declaration public Seq VNext { get; set; } Property Value Type Description Seq | Improve this Doc View Source VPrev Gets the parent of the sequence in the hierarchy. Declaration public Seq VPrev { get; set; } Property Value Type Description Seq Methods | Improve this Doc View Source Clear() Removes all elements from the sequence. Declaration public virtual void Clear() | Improve this Doc View Source Clone(MemStorage) Creates a copy of the sequence. Declaration public Seq Clone(MemStorage storage = null) Parameters Type Name Description MemStorage storage The destination MemStorage instance on which to store the new sequence. If storage is null , the same memory storage of this sequence is used. Returns Type Description Seq A new Seq instance that is a copy of this sequence. | Improve this Doc View Source CopyTo<TElement>(TElement[]) Copies all the elements of the sequence to a compatible one-dimensional array. Declaration public void CopyTo<TElement>(TElement[] array) where TElement : struct Parameters Type Name Description TElement[] array The array on which to store sequence elements. Type Parameters Name Description TElement The type of the elements in the sequence. | Improve this Doc View Source CopyTo<TElement>(TElement[], SeqSlice) Copies part of the sequence elements to a compatible one-dimensional array. Declaration public void CopyTo<TElement>(TElement[] array, SeqSlice slice) where TElement : struct Parameters Type Name Description TElement[] array The array on which to store sequence elements. SeqSlice slice The portion of the sequence to copy to the array. Type Parameters Name Description TElement The type of the elements in the sequence. | Improve this Doc View Source GetElement(Int32) Gets the pointer to the element at the specified index. Declaration public IntPtr GetElement(int index) Parameters Type Name Description Int32 index The index of the element to retrieve. Returns Type Description IntPtr A pointer to the element at the specified index . | Improve this Doc View Source GetElementIndex(IntPtr) Gets the index of the specified element. Declaration public int GetElementIndex(IntPtr element) Parameters Type Name Description IntPtr element A pointer to the sequence element. Returns Type Description Int32 The index of the specified element , or -1 if it is not found. | Improve this Doc View Source Insert(Int32, Arr) Inserts an array in the middle of the sequence. Declaration public void Insert(int index, Arr array) Parameters Type Name Description Int32 index The index at which to insert the array. Arr array The inserted array. | Improve this Doc View Source Insert(Int32, Seq) Inserts a sequence in the middle of this sequence. Declaration public void Insert(int index, Seq sequence) Parameters Type Name Description Int32 index The index at which to insert the sequence. Seq sequence The inserted sequence. | Improve this Doc View Source Insert<TElement>(Int32, TElement) Inserts an element in the middle of the sequence. Declaration public void Insert<TElement>(int index, TElement element) where TElement : struct Parameters Type Name Description Int32 index The index before which the element is inserted. TElement element The inserted element. Type Parameters Name Description TElement The type of the elements in the sequence. | Improve this Doc View Source Invert() Reverses the order of sequence elements. Declaration public void Invert() | Improve this Doc View Source Partition<TElement>(MemStorage, out Seq, Func<TElement, TElement, Boolean>) Splits a sequence into equivalence classes. Declaration public int Partition<TElement>(MemStorage storage, out Seq labels, Func<TElement, TElement, bool> equalityComparison) Parameters Type Name Description MemStorage storage The storage block to store the sequence of equivalence classes. Seq labels When the method returns, contains the sequence of zero-based labels of sequence elements. Func <TElement, TElement, Boolean > equalityComparison The relation function that should return true if the two particular sequence elements are from the same class, and false otherwise. The partitioning algorithm uses the transitive closure of the relation function as an equivalence critria Returns Type Description Int32 The number of equivalence classes. Type Parameters Name Description TElement The type of the elements in the sequence. | Improve this Doc View Source Pop() Removes an element from the end of the sequence. Declaration public void Pop() | Improve this Doc View Source Pop<TElement>(out TElement) Removes an element from the end of the sequence. Declaration public void Pop<TElement>(out TElement element) where TElement : struct Parameters Type Name Description TElement element When the method returns, contains the element that was removed from the end of the sequence. Type Parameters Name Description TElement The type of the elements in the sequence. | Improve this Doc View Source Pop<TElement>(TElement[]) Removes several elements from the end of the sequence. Declaration public void Pop<TElement>(TElement[] elements) where TElement : struct Parameters Type Name Description TElement[] elements The array that will contain the removed elements. Type Parameters Name Description TElement The type of the elements in the sequence. | Improve this Doc View Source PopFront() Removes an element from the beginning of the sequence. Declaration public void PopFront() | Improve this Doc View Source PopFront<TElement>(out TElement) Removes an element from the beginning of the sequence. Declaration public void PopFront<TElement>(out TElement element) where TElement : struct Parameters Type Name Description TElement element When the method returns, contains the element that was removed from the beginning of the sequence. Type Parameters Name Description TElement The type of the elements in the sequence. | Improve this Doc View Source PopFront<TElement>(TElement[]) Removes several elements from the beginning of the sequence. Declaration public void PopFront<TElement>(TElement[] elements) where TElement : struct Parameters Type Name Description TElement[] elements The array that will contain the removed elements. Type Parameters Name Description TElement The type of the elements in the sequence. | Improve this Doc View Source Push() Allocates space for one more element at the end of the sequence. Declaration public void Push() | Improve this Doc View Source Push<TElement>(TElement[]) Adds one or more elements to the end of the sequence. Declaration public void Push<TElement>(params TElement[] elements) where TElement : struct Parameters Type Name Description TElement[] elements The array of elements to add to the end of the sequence. Type Parameters Name Description TElement The type of the elements in the sequence. | Improve this Doc View Source PushFront() Allocates space for one more element at the beginning of the sequence. Declaration public void PushFront() | Improve this Doc View Source PushFront<TElement>(TElement[]) Adds one or more elements to the beginning of the sequence. Declaration public void PushFront<TElement>(params TElement[] elements) where TElement : struct Parameters Type Name Description TElement[] elements The array of elements to add to the beginning of the sequence. Type Parameters Name Description TElement The type of the elements in the sequence. | Improve this Doc View Source ReleaseHandle() Executes the code required to free the native Seq handle. Declaration protected override bool ReleaseHandle() Returns Type Description Boolean true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false . | Improve this Doc View Source Remove(SeqSlice) Removes a sequence slice. Declaration public void Remove(SeqSlice slice) Parameters Type Name Description SeqSlice slice The part of the sequence to remove. | Improve this Doc View Source Remove(Int32) Removes an element from the middle of the sequence. Declaration public void Remove(int index) Parameters Type Name Description Int32 index The index of the removed element. | Improve this Doc View Source Search<TElement>(TElement, Comparison<TElement>, Boolean) Searches for an element in a sequence. Declaration public int Search<TElement>(TElement element, Comparison<TElement> comparison, bool isSorted) where TElement : struct Parameters Type Name Description TElement element The element to look for. Comparison <TElement> comparison The comparison function that returns negative, zero or positive value depending on the relationships among the elements. Boolean isSorted A value indicating whether the sequence is sorted or not. Returns Type Description Int32 The index of the element in the sequence, or -1 if it is not found. Type Parameters Name Description TElement The type of the elements in the sequence. | Improve this Doc View Source SetBlockSize(Int32) Sets the sequence block size. Declaration public void SetBlockSize(int blockSize) Parameters Type Name Description Int32 blockSize The memory block size by which to grow the sequence when free space has run out. | Improve this Doc View Source Slice(SeqSlice, MemStorage, Boolean) Makes a separate header for a sequence slice. Declaration public Seq Slice(SeqSlice slice, MemStorage storage = null, bool copyData = false) Parameters Type Name Description SeqSlice slice The part of the sequence to be extracted. MemStorage storage The storage block that will store the new sequence. Boolean copyData A value indicating whether to copy the elements of the extracted slice. Returns Type Description Seq A new Seq instance containing the elements in the specified slice . | Improve this Doc View Source Sort<TElement>(Comparison<TElement>) Sorts sequence elements using the specified comparison function. Declaration public void Sort<TElement>(Comparison<TElement> comparison) where TElement : struct Parameters Type Name Description Comparison <TElement> comparison The comparison function that returns negative, zero or positive value depending on the relationships among the elements. Type Parameters Name Description TElement The type of the elements in the sequence. | Improve this Doc View Source ToArray<TElement>() Copies the elements of the sequence to a new array. Declaration public TElement[] ToArray<TElement>() where TElement : struct Returns Type Description TElement[] A new array instance containing all the elements in the sequence. Type Parameters Name Description TElement The type of the elements in the sequence."
  },
  "api/OpenCV.Net.SeqSlice.html": {
    "href": "api/OpenCV.Net.SeqSlice.html",
    "title": "Struct SeqSlice",
    "keywords": "Struct SeqSlice Represents a sequence slice. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public struct SeqSlice Constructors | Improve this Doc View Source SeqSlice(Int32, Int32) Initializes a new instance of the SeqSlice structure from the specified start and end indices. Declaration public SeqSlice(int start, int end) Parameters Type Name Description Int32 start The inclusive start index of the slice. Int32 end The exclusive end index boundary of the slice. Fields | Improve this Doc View Source EndIndex The exclusive end index boundary of the slice. Declaration public int EndIndex Field Value Type Description Int32 | Improve this Doc View Source StartIndex The inclusive start index of the slice. Declaration public int StartIndex Field Value Type Description Int32 | Improve this Doc View Source WholeSeqEndIndex An index value that represents the end of the whole sequence. Declaration public const int WholeSeqEndIndex = null Field Value Type Description Int32 Properties | Improve this Doc View Source WholeSeq Returns a SeqSlice that is set to encompass the whole sequence. Declaration public static SeqSlice WholeSeq { get; } Property Value Type Description SeqSlice Methods | Improve this Doc View Source SliceLength(Seq) Calculates the number of elements in the slice for a specified sequence. Declaration public int SliceLength(Seq seq) Parameters Type Name Description Seq seq The sequence on which to compute the slice length. Returns Type Description Int32 The number of elements in the slice for the specified sequence."
  },
  "api/OpenCV.Net.SequenceElementType.html": {
    "href": "api/OpenCV.Net.SequenceElementType.html",
    "title": "Enum SequenceElementType",
    "keywords": "Enum SequenceElementType Specifies the most common sequence element types. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum SequenceElementType : int Fields Name Description Code Specifies a freeman code element. ConnectedComponent Specifies a connected component. Generic Specifies an undefined type of sequence element. GraphEdge Specifies an edge of a graph. GraphVertex Specifies a vertex of a graph. Index Specifies an index of an element of some other sequence. Point Specifies a point in 2D space. Point3D Specifies a point in 3D space. Pointer Specifies a pointer type of sequence element. PointPointer Specifies a pointer to an element of another sequence. TreeVertex Specifies a vertex of a binary tree."
  },
  "api/OpenCV.Net.SequenceFlags.html": {
    "href": "api/OpenCV.Net.SequenceFlags.html",
    "title": "Enum SequenceFlags",
    "keywords": "Enum SequenceFlags Specifies a set of operational flags for Seq instances. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum SequenceFlags : int Fields Name Description Closed Specifies that the geometrical curve is closed. Convex Specifies that the geometrical curve is convex. Hole Specifies that the geometrical curve represents a hole. Oriented Specifies that a graph type sequence is oriented. Simple Specifies a simple sequence of elements."
  },
  "api/OpenCV.Net.SequenceKind.html": {
    "href": "api/OpenCV.Net.SequenceKind.html",
    "title": "Enum SequenceKind",
    "keywords": "Enum SequenceKind Specifies the kind of Seq instances. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum SequenceKind : int Fields Name Description BinaryTree Specifies a binary tree of elements. Curve Specifies a sequence of elements that represents a geometrical curve. Generic Specifies a generic array of elements. Graph Specifies a graph of elements. Subdiv2D Specifies a set of planar subdivisions."
  },
  "api/OpenCV.Net.Set.html": {
    "href": "api/OpenCV.Net.Set.html",
    "title": "Class Set",
    "keywords": "Class Set Represents a collection of nodes. Inheritance Object CVHandle Seq Set Graph Inherited Members Seq.Storage Seq.Kind Seq.ElementSize Seq.Count Seq.HPrev Seq.HNext Seq.VPrev Seq.VNext Seq.SetBlockSize(Int32) Seq.Push() Seq.Push<TElement>(TElement[]) Seq.PushFront() Seq.PushFront<TElement>(TElement[]) Seq.Pop() Seq.Pop<TElement>(TElement) Seq.Pop<TElement>(TElement[]) Seq.PopFront() Seq.PopFront<TElement>(TElement) Seq.PopFront<TElement>(TElement[]) Seq.Insert<TElement>(Int32, TElement) Seq.Insert(Int32, Seq) Seq.Insert(Int32, Arr) Seq.Remove(Int32) Seq.Remove(SeqSlice) Seq.GetElement(Int32) Seq.GetElementIndex(IntPtr) Seq.CopyTo<TElement>(TElement[]) Seq.CopyTo<TElement>(TElement[], SeqSlice) Seq.ToArray<TElement>() Seq.Slice(SeqSlice, MemStorage, Boolean) Seq.Clone(MemStorage) Seq.Sort<TElement>(Comparison<TElement>) Seq.Search<TElement>(TElement, Comparison<TElement>, Boolean) Seq.Invert() Seq.Partition<TElement>(MemStorage, Seq, Func<TElement, TElement, Boolean>) Seq.ReleaseHandle() Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public class Set : Seq Properties | Improve this Doc View Source HeaderSize Gets the size of the Set header, in bytes. Declaration public static int HeaderSize { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Clear() Removes all elements from the set. Declaration public override void Clear() Overrides Seq.Clear()"
  },
  "api/OpenCV.Net.ShapeMatchingMethod.html": {
    "href": "api/OpenCV.Net.ShapeMatchingMethod.html",
    "title": "Enum ShapeMatchingMethod",
    "keywords": "Enum ShapeMatchingMethod Specifies the available shape comparison methods. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum ShapeMatchingMethod : int Fields Name Description MatchI1 Specifies that the match should be computed as I2(A,B) = sum{i}(|1/miA - 1/miB|). mi = sign(hi).log(hi) where hi is the ith Hu moment. MatchI2 Specifies that the match should be computed as I2(A,B) = sum{i}(|miA - miB|). mi = sign(hi).log(hi) where hi is the ith Hu moment. MatchI3 Specifies that the match should be computed as I2(A,B) = sum{i}(|miA - miB| / |miA|). mi = sign(hi).log(hi) where hi is the ith Hu moment."
  },
  "api/OpenCV.Net.ShapeOrientation.html": {
    "href": "api/OpenCV.Net.ShapeOrientation.html",
    "title": "Enum ShapeOrientation",
    "keywords": "Enum ShapeOrientation Specifies the desired orientation of the convex hull. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum ShapeOrientation : int Fields Name Description Clockwise Specifies that the convex hull should be oriented clockwise. CounterClockwise Specifies that the convex hull should be oriented counterclockwise."
  },
  "api/OpenCV.Net.Size.html": {
    "href": "api/OpenCV.Net.Size.html",
    "title": "Struct Size",
    "keywords": "Struct Size Represents the pixel-accurate size of a rectangle. Implements IEquatable < Size > Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public struct Size : IEquatable<Size> Constructors | Improve this Doc View Source Size(Int32, Int32) Initializes a new instance of the Size structure from the specified dimensions. Declaration public Size(int width, int height) Parameters Type Name Description Int32 width The width of the rectangle. Int32 height The height of the rectangle. Fields | Improve this Doc View Source Height The height of the rectangle. Declaration public int Height Field Value Type Description Int32 | Improve this Doc View Source Width The width of the rectangle. Declaration public int Width Field Value Type Description Int32 Properties | Improve this Doc View Source Zero Returns a Size that has Width and Height values set to zero. Declaration public static Size Zero { get; } Property Value Type Description Size Methods | Improve this Doc View Source Equals(Size) Returns a value indicating whether this instance has the same dimensions as a specified Size structure. Declaration public bool Equals(Size other) Parameters Type Name Description Size other The Size structure to compare to this instance. Returns Type Description Boolean true if other has the same width and height as this instance; otherwise, false . | Improve this Doc View Source Equals(Object) Tests to see whether the specified object is a Size structure with the same dimensions as this Size structure. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The to test. Returns Type Description Boolean true if obj is a Size and has the same width and height as this Size ; otherwise, false . | Improve this Doc View Source GetHashCode() Returns a hash code for this Size structure. Declaration public override int GetHashCode() Returns Type Description Int32 An integer value that specifies a hash value for this Size structure. | Improve this Doc View Source ToString() Creates a representation of this Size structure. Declaration public override string ToString() Returns Type Description String A containing the Width and Height values of this Size structure. Operators | Improve this Doc View Source Equality(Size, Size) Tests whether two Size structures are equal. Declaration public static bool operator ==(Size left, Size right) Parameters Type Name Description Size left The Size structure on the left of the equality operator. Size right The Size structure on the right of the equality operator. Returns Type Description Boolean true if left and right have equal width and height; otherwise, false . | Improve this Doc View Source Inequality(Size, Size) Tests whether two Size structures are different. Declaration public static bool operator !=(Size left, Size right) Parameters Type Name Description Size left The Size structure on the left of the inequality operator. Size right The Size structure on the right of the inequality operator. Returns Type Description Boolean true if left and right differ either in width or height; false if left and right are equal. Implements IEquatable<>"
  },
  "api/OpenCV.Net.Size2f.html": {
    "href": "api/OpenCV.Net.Size2f.html",
    "title": "Struct Size2f",
    "keywords": "Struct Size2f Represents the sub-pixel accurate size of a rectangle. Implements IEquatable < Size2f > Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public struct Size2f : IEquatable<Size2f> Constructors | Improve this Doc View Source Size2f(Single, Single) Initializes a new instance of the Size2f structure from the specified dimensions. Declaration public Size2f(float width, float height) Parameters Type Name Description Single width The width of the rectangle. Single height The height of the rectangle. Fields | Improve this Doc View Source Height The height of the rectangle. Declaration public float Height Field Value Type Description Single | Improve this Doc View Source Width The width of the rectangle. Declaration public float Width Field Value Type Description Single Methods | Improve this Doc View Source Equals(Size2f) Returns a value indicating whether this instance has the same dimensions as a specified Size2f structure. Declaration public bool Equals(Size2f other) Parameters Type Name Description Size2f other The Size2f structure to compare to this instance. Returns Type Description Boolean true if other has the same width and height as this instance; otherwise, false . | Improve this Doc View Source Equals(Object) Tests to see whether the specified object is a Size2f structure with the same dimensions as this Size2f structure. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The to test. Returns Type Description Boolean true if obj is a Size2f and has the same width and height as this Size2f ; otherwise, false . | Improve this Doc View Source GetHashCode() Returns a hash code for this Size2f structure. Declaration public override int GetHashCode() Returns Type Description Int32 An integer value that specifies a hash value for this Size2f structure. | Improve this Doc View Source ToString() Creates a representation of this Size2f structure. Declaration public override string ToString() Returns Type Description String A containing the Width and Height values of this Size2f structure. Operators | Improve this Doc View Source Equality(Size2f, Size2f) Tests whether two Size2f structures are equal. Declaration public static bool operator ==(Size2f left, Size2f right) Parameters Type Name Description Size2f left The Size2f structure on the left of the equality operator. Size2f right The Size2f structure on the right of the equality operator. Returns Type Description Boolean true if left and right have equal width and height; otherwise, false . | Improve this Doc View Source Inequality(Size2f, Size2f) Tests whether two Size2f structures are different. Declaration public static bool operator !=(Size2f left, Size2f right) Parameters Type Name Description Size2f left The Size2f structure on the left of the inequality operator. Size2f right The Size2f structure on the right of the inequality operator. Returns Type Description Boolean true if left and right differ either in width or height; false if left and right are equal. Implements IEquatable<>"
  },
  "api/OpenCV.Net.SmoothMethod.html": {
    "href": "api/OpenCV.Net.SmoothMethod.html",
    "title": "Enum SmoothMethod",
    "keywords": "Enum SmoothMethod Specifies the type of smoothing used by Smooth(Arr, Arr, SmoothMethod, Int32, Int32, Double, Double) . Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum SmoothMethod : int Fields Name Description Bilateral Specifies a bilateral filter with a size1 x size2 square aperture, color sigma = sigma1 and spatial sigma = sigma2. Blur Specifies a linear convolution with size1 x size2 box kernel (all 1’s) with subsequent scaling by 1 / (size1 x size2). BlurNoScale Specifies a linear convolution with size1 x size2 box kernel (all 1’s). If you want to smooth different pixels with different-size box kernels, you can use the integral image that is computed using Integral(Arr, Arr, Arr, Arr) . Gaussian Specifies a linear convolution with a size1 x size2 Gaussian kernel. Median Specifies a median filter with a size1 x size2 square aperture."
  },
  "api/OpenCV.Net.SortFlags.html": {
    "href": "api/OpenCV.Net.SortFlags.html",
    "title": "Enum SortFlags",
    "keywords": "Enum SortFlags Specifies operation flags for the Sort(Arr, Arr, Arr, SortFlags) method. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum SortFlags : int Fields Name Description Ascending Specifies that the method should sort in ascending order. Descending Specifies that the method should sort in descending order. EveryColumn Specifies that the method should sort every column. EveryRow Specifies that the method should sort every row."
  },
  "api/OpenCV.Net.SparseMat.html": {
    "href": "api/OpenCV.Net.SparseMat.html",
    "title": "Class SparseMat",
    "keywords": "Class SparseMat Represents a multi-dimensional sparse multi-channel array. Inheritance Object CVHandle Arr SparseMat Inherited Members Arr.ElementType Arr.Size Arr.GetSubRect(Rect) Arr.GetRow(Int32) Arr.GetRows(Int32, Int32, Int32) Arr.GetCol(Int32) Arr.GetCols(Int32, Int32) Arr.GetDiag(Int32) Arr.GetDims(Int32[]) Arr.GetDimSize(Int32) Arr.Ptr(Int32) Arr.Ptr(Int32, Int32) Arr.Ptr(Int32, Int32) Arr.Ptr(Int32, Int32, Int32) Arr.Ptr(Int32, Int32, Int32) Arr.Ptr(Int32, Int32, Int32, Int32) Arr.Ptr(Int32[]) Arr.Ptr(Int32[], Int32, Boolean) Arr.Item[Int32] Arr.Item[Int32, Int32] Arr.Item[Int32, Int32, Int32] Arr.Item[Int32[]] Arr.GetReal(Int32) Arr.GetReal(Int32, Int32) Arr.GetReal(Int32, Int32, Int32) Arr.GetReal(Int32[]) Arr.SetReal(Int32, Double) Arr.SetReal(Int32, Int32, Double) Arr.SetReal(Int32, Int32, Int32, Double) Arr.SetReal(Int32[], Double) Arr.ClearND(Int32[]) Arr.GetMat(Boolean) Arr.GetImage() Arr.Reshape(Int32, Int32) Arr.SetData(IntPtr, Int32) Arr.GetRawData(IntPtr) Arr.GetRawData(IntPtr, Int32) Arr.GetRawData(IntPtr, Int32, Size) Arr.Set(Scalar, Arr) Arr.SetZero() Arr.CheckRange(CheckArrayFlags, Double, Double) Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public class SparseMat : Arr Constructors | Improve this Doc View Source SparseMat(Int32[], Depth, Int32) Initializes a new instance of the SparseMat class with the specified dimension sizes, element bit depth and channels per element. Declaration public SparseMat(int[] dimSizes, Depth depth, int channels) Parameters Type Name Description Int32 [] dimSizes The size of each of the multi-dimensional array dimensions. Depth depth The bit depth of matrix elements. Int32 channels The number of channels per element. Properties | Improve this Doc View Source Channels Gets the number of channels per matrix element. Declaration public int Channels { get; } Property Value Type Description Int32 | Improve this Doc View Source Depth Gets the bit depth of matrix elements. Declaration public Depth Depth { get; } Property Value Type Description Depth | Improve this Doc View Source ElementSize Gets the size of each matrix element in bytes. Declaration public int ElementSize { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Clone() Creates a new SparseMat that is a copy of the current instance. Declaration public SparseMat Clone() Returns Type Description SparseMat A new SparseMat that is a copy of this instance. | Improve this Doc View Source GetSparseNodes() Returns an that supports iteration over the element nodes of the sparse array. Declaration public IEnumerable<SparseNode> GetSparseNodes() Returns Type Description IEnumerable < SparseNode > An that supports iteration over the element nodes of the sparse array. | Improve this Doc View Source ReleaseHandle() Executes the code required to free the native SparseMat handle. Declaration protected override bool ReleaseHandle() Returns Type Description Boolean true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false ."
  },
  "api/OpenCV.Net.SparseNode.html": {
    "href": "api/OpenCV.Net.SparseNode.html",
    "title": "Class SparseNode",
    "keywords": "Class SparseNode Represents an element node in a sparse array. Inheritance Object CVHandle SparseNode Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public class SparseNode : CVHandle Properties | Improve this Doc View Source Index Gets the multi-dimensional index of the node in the sparse array. Declaration public int[] Index { get; } Property Value Type Description Int32 [] | Improve this Doc View Source Value Gets the value of the node. Declaration public Scalar Value { get; } Property Value Type Description Scalar Methods | Improve this Doc View Source ReleaseHandle() Executes the code required to free the native SparseNode handle. Declaration protected override bool ReleaseHandle() Returns Type Description Boolean true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false ."
  },
  "api/OpenCV.Net.StereoBM.html": {
    "href": "api/OpenCV.Net.StereoBM.html",
    "title": "Class StereoBM",
    "keywords": "Class StereoBM Represents the block matching algorithm for computing stereo correspondence. Inheritance Object StereoBM Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public class StereoBM : SafeHandleZeroOrMinusOneIsInvalid Constructors | Improve this Doc View Source StereoBM(StereoBMPreset, Int32) Initializes a new instance of the StereoBM class with the specified parameter preset and numberOfDisparities . Declaration public StereoBM(StereoBMPreset preset = default(StereoBMPreset), int numberOfDisparities = 0) Parameters Type Name Description StereoBMPreset preset Specifies the whole set of algorithm parameters. Int32 numberOfDisparities The disparity search range. For each pixel algorithm will find the best disparity from 0 (default minimum disparity) to numberOfDisparities . The search range can then be shifted by changing the minimum disparity. Properties | Improve this Doc View Source Disparity12MaxDiff Gets or sets the maximum allowed difference between the explicitly computed left-to-right disparity map and the implicitly computed right-to-left disparity. If for some pixel the difference is larger than the specified threshold, the disparity at the pixel is invalidated. By default this parameter is set to (-1), which means that the left-right check is not performed. Declaration public int Disparity12MaxDiff { get; set; } Property Value Type Description Int32 | Improve this Doc View Source MinDisparity Gets or sets the minimum disparity (can be negative). Declaration public int MinDisparity { get; set; } Property Value Type Description Int32 | Improve this Doc View Source NumberOfDisparities Gets or sets the difference between the maximum disparity and minimum disparity. Declaration public int NumberOfDisparities { get; set; } Property Value Type Description Int32 | Improve this Doc View Source PreFilterCap Gets or sets the cap for pre-filtering. The output is clipped to be within [-PreFilterCap,PreFilterCap]. Declaration public int PreFilterCap { get; set; } Property Value Type Description Int32 | Improve this Doc View Source PreFilterSize Gets or sets the pre-filter averaging window size. Must be odd. Declaration public int PreFilterSize { get; set; } Property Value Type Description Int32 | Improve this Doc View Source PreFilterType Gets or sets the block matching pre-filter type. Declaration public StereoBMPreFilterType PreFilterType { get; set; } Property Value Type Description StereoBMPreFilterType | Improve this Doc View Source Roi1 Gets or sets the clipping ROI for the left image. Declaration public Rect Roi1 { get; set; } Property Value Type Description Rect | Improve this Doc View Source Roi2 Gets or sets the clipping ROI for the right image. Declaration public Rect Roi2 { get; set; } Property Value Type Description Rect | Improve this Doc View Source SadWindowSize Gets or sets the Sum of Absolute Differences window size. Must be odd. Declaration public int SadWindowSize { get; set; } Property Value Type Description Int32 | Improve this Doc View Source SpeckleRange Gets or sets the acceptable range of variation in window. Declaration public int SpeckleRange { get; set; } Property Value Type Description Int32 | Improve this Doc View Source SpeckleWindowSize Gets or sets the size of the disparity variation window. Declaration public int SpeckleWindowSize { get; set; } Property Value Type Description Int32 | Improve this Doc View Source TextureThreshold Gets or sets the texture threshold. The disparity is only computed for pixels with textured enough neighborhood. Declaration public int TextureThreshold { get; set; } Property Value Type Description Int32 | Improve this Doc View Source TrySmallerWindows Gets or sets a value indicating whether to use smaller windows. The results may be more accurate, at the expense of slower processing. Declaration public bool TrySmallerWindows { get; set; } Property Value Type Description Boolean | Improve this Doc View Source UniquenessRatio Gets or sets the uniqueness ratio. The computed computed disparity d* should only be accepted if SAD(d) >= SAD(d*) (1 + uniquenessRatio/100) for any d != d +/-1 within the search range. Declaration public int UniquenessRatio { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source FindStereoCorrespondence(Arr, Arr, Arr) Computes the disparity map using block matching algorithm. Declaration public void FindStereoCorrespondence(Arr left, Arr right, Arr disparity) Parameters Type Name Description Arr left The left single-channel, 8-bit image. Arr right The right image of the same size and the same type. Arr disparity The output single-channel 16-bit signed, or 32-bit floating-point disparity map of the same size as input images. In the first case the computed disparities are represented as fixed-point numbers with 4 fractional bits (i.e. the computed disparity values are multiplied by 16 and rounded to integers). | Improve this Doc View Source ReleaseHandle() Executes the code required to free the native StereoBM handle. Declaration protected override bool ReleaseHandle() Returns Type Description Boolean true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false ."
  },
  "api/OpenCV.Net.StereoBMPreFilterType.html": {
    "href": "api/OpenCV.Net.StereoBMPreFilterType.html",
    "title": "Enum StereoBMPreFilterType",
    "keywords": "Enum StereoBMPreFilterType Specifies available types of stereo block matching pre-filtering. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum StereoBMPreFilterType : int Fields Name Description NormalizedResponse Specifies that no pre-filter is used and the output is just the normalized response. XSobel Specifies the x-sobel pre-filter."
  },
  "api/OpenCV.Net.StereoBMPreset.html": {
    "href": "api/OpenCV.Net.StereoBMPreset.html",
    "title": "Enum StereoBMPreset",
    "keywords": "Enum StereoBMPreset Specifies available presets of stereo block matching algorithm parameters. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum StereoBMPreset : int Fields Name Description Basic Specifies parameters suitable for general cameras. FishEye Specifies parameters suitable for wide-angle cameras. Narrow Specifies parameters suitable for narrow-angle cameras."
  },
  "api/OpenCV.Net.StereoCalibrationFlags.html": {
    "href": "api/OpenCV.Net.StereoCalibrationFlags.html",
    "title": "Enum StereoCalibrationFlags",
    "keywords": "Enum StereoCalibrationFlags Specifies available operation flags for stereo camera calibration. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum StereoCalibrationFlags : int Fields Name Description FixAspectRatio Specifies that the function considers only fy as a free parameter. The ratio fx/fy stays the same as in the input camera matrix . When UseIntrinsicGuess is not set, the actual input values of fx and fy are ignored; only their ratio is computed and used further. FixFocalLength Specifies that the focal length (fx, fy) is not changed during the optimization. FixIntrinsic Specifies that the camera matrix and distortion coefficients should not be changed, so that only R, T, E and F matrices are estimated. FixK1 Specifies that the k1 radial distortion coefficient is not changed during the optimization. If UseIntrinsicGuess is set, the coefficient from the supplied coefficients matrix is used. Otherwise, it is set to 0. FixK2 Specifies that the k2 radial distortion coefficient is not changed during the optimization. If UseIntrinsicGuess is set, the coefficient from the supplied coefficients matrix is used. Otherwise, it is set to 0. FixK3 Specifies that the k3 radial distortion coefficient is not changed during the optimization. If UseIntrinsicGuess is set, the coefficient from the supplied coefficients matrix is used. Otherwise, it is set to 0. FixK4 Specifies that the k4 radial distortion coefficient is not changed during the optimization. If UseIntrinsicGuess is set, the coefficient from the supplied coefficients matrix is used. Otherwise, it is set to 0. FixK5 Specifies that the k5 radial distortion coefficient is not changed during the optimization. If UseIntrinsicGuess is set, the coefficient from the supplied coefficients matrix is used. Otherwise, it is set to 0. FixK6 Specifies that the k6 radial distortion coefficient is not changed during the optimization. If UseIntrinsicGuess is set, the coefficient from the supplied coefficients matrix is used. Otherwise, it is set to 0. FixPrincipalPoint Specifies that the principal point is not changed during the global optimization. It stays at the center or at a different location specified when UseIntrinsicGuess is set too. None Specifies that no operation flags are active. RationalModel Coefficients k4, k5, and k6 are enabled. To provide the backward compatibility, this extra flag should be explicitly specified to make the calibration function use the rational model and return 8 coefficients. If the flag is not set, the function computes and returns only 5 distortion coefficients. SameFocalLength Specifies the constraint that both cameras should have the same focal length (fx, fy). UseIntrinsicGuess Specifies that some or all of the intrinsic parameters should be optimized according to the specified flags. Initial values are provided by the user. ZeroTangentialDistortion Specifies that tangential distortion coefficients (p1, p2) are set to zeros and stay zero."
  },
  "api/OpenCV.Net.StereoRectificationFlags.html": {
    "href": "api/OpenCV.Net.StereoRectificationFlags.html",
    "title": "Enum StereoRectificationFlags",
    "keywords": "Enum StereoRectificationFlags Specifies available operation flags for stereo rectification. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum StereoRectificationFlags : int Fields Name Description None Specifies that no operation flags are active. ZeroDisparity Specifies that the function makes the principal points of each camera have the same pixel coordinates in the rectified views."
  },
  "api/OpenCV.Net.StorageFlags.html": {
    "href": "api/OpenCV.Net.StorageFlags.html",
    "title": "Enum StorageFlags",
    "keywords": "Enum StorageFlags Specifies available flags for creating FileStorage instances. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum StorageFlags : int Fields Name Description Append Specifies that the file should be open for appending. FormatAuto Specifies that the file format should be automatically determined. FormatXml Specifies that the XML file format should be used. FormatYaml Specifies that the YAML file format should be used. Memory Specifies that all data in the file should be read or that write operations should target internal memory buffers. Read Specifies that the file should be open for reading. Write Specifies that the file should be open for writing."
  },
  "api/OpenCV.Net.StringHashNode.html": {
    "href": "api/OpenCV.Net.StringHashNode.html",
    "title": "Class StringHashNode",
    "keywords": "Class StringHashNode Represents a unique reference for a given name. Inheritance Object CVHandle StringHashNode Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public class StringHashNode : CVHandle Properties | Improve this Doc View Source HashVal Gets the hash code value of the name. Declaration public uint HashVal { get; } Property Value Type Description UInt32 | Improve this Doc View Source Str Gets the string representation of the name. Declaration public string Str { get; } Property Value Type Description String Methods | Improve this Doc View Source ReleaseHandle() Executes the code required to free the native StringHashNode handle. Declaration protected override bool ReleaseHandle() Returns Type Description Boolean true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false ."
  },
  "api/OpenCV.Net.StructStorageFlags.html": {
    "href": "api/OpenCV.Net.StructStorageFlags.html",
    "title": "Enum StructStorageFlags",
    "keywords": "Enum StructStorageFlags Specifies type flags for writing compound structures to a FileStorage instance. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum StructStorageFlags : int Fields Name Description Flow Specifies that the structure is written as a flow (not as a block), which is more compact. This is an optional flag that is used only for YAML streams. Map Specifies that the written structure is a map, that is, all its elements have names. Seq Specifies that the written structure is a sequence, that is, its elements do not have a name."
  },
  "api/OpenCV.Net.StructuringElementShape.html": {
    "href": "api/OpenCV.Net.StructuringElementShape.html",
    "title": "Enum StructuringElementShape",
    "keywords": "Enum StructuringElementShape Specifies the shape of the structuring element kernel. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum StructuringElementShape : int Fields Name Description Cross Specifies a cross-shaped structuring element. Custom Specifies a user-defined structuring element. In this case the kernel values are passed explicitly to the constructor method. Ellipse Specifies an elliptical structuring element. Rectangle Specifies a rectangular structuring element."
  },
  "api/OpenCV.Net.SubPixelInterpolation.html": {
    "href": "api/OpenCV.Net.SubPixelInterpolation.html",
    "title": "Enum SubPixelInterpolation",
    "keywords": "Enum SubPixelInterpolation Specifies the interpolation method used by Resize(Arr, Arr, SubPixelInterpolation) . Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum SubPixelInterpolation : int Fields Name Description Area Specifies resampling using pixel area relation. It may be a preferred method for image decimation, as it gives moire’-free results. Similar to NearestNeighbor when image is zoomed. Cubic Specifies a bicubic interpolation over a 4x4 pixel neighborhood. Lanczos4 Specifies a Lanczos interpolation over an 8x8 pixel neighborhood. Linear Specifies a bilinear interpolation. NearestNeighbor Specifies a nearest-neighbor interpolation."
  },
  "api/OpenCV.Net.SvdFlags.html": {
    "href": "api/OpenCV.Net.SvdFlags.html",
    "title": "Enum SvdFlags",
    "keywords": "Enum SvdFlags Specifies operation flags for SVD(Arr, Arr, Arr, Arr, SvdFlags) . Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum SvdFlags : int Fields Name Description ModifyA Specifies that matrix A can be modified in order to speed up the processing. None Specifies that no operation flags are active. TransposeU Specifies that the output matrix U is transposed to speed up the processing. TransposeV Specifies that the output matrix V is transposed to speed up the processing."
  },
  "api/OpenCV.Net.TemplateMatchingMethod.html": {
    "href": "api/OpenCV.Net.TemplateMatchingMethod.html",
    "title": "Enum TemplateMatchingMethod",
    "keywords": "Enum TemplateMatchingMethod Specifies the way the template is compared with image regions in MatchTemplate(Arr, Arr, Arr, TemplateMatchingMethod) . Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum TemplateMatchingMethod : int Fields Name Description CorrelationCoefficient Specifies that the correlaton coefficient between region and template will be used. CorrelationCoefficientNormed Specifies that the normed correlaton coefficient between region and template will be used. CrossCorrelation Specifies that the cross correlation between region and template will be used. CrossCorrelationNormed Specifies that the normed cross correlation between region and template will be used. SquareDifference Specifies that the sum of squared differences between region and template will be used. SquareDifferenceNormed Specifies that the normed sum of squared differences between region and template will be used."
  },
  "api/OpenCV.Net.TermCriteria.html": {
    "href": "api/OpenCV.Net.TermCriteria.html",
    "title": "Struct TermCriteria",
    "keywords": "Struct TermCriteria Represents a termination criteria for iterative algorithms. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public struct TermCriteria Constructors | Improve this Doc View Source TermCriteria(TermCriteriaType, Int32, Double) Initializes a new instance of the TermCriteria structure with the specified termination mode, maximum number of iterations and required accuracy. Declaration public TermCriteria(TermCriteriaType type, int maxIter, double epsilon) Parameters Type Name Description TermCriteriaType type The particular combination of criteria to use. Int32 maxIter The maximum number of iterations. Double epsilon The minimum required accuracy. Fields | Improve this Doc View Source Epsilon The minimum required accuracy. Declaration public double Epsilon Field Value Type Description Double | Improve this Doc View Source MaxIter The maximum number of iterations. Declaration public int MaxIter Field Value Type Description Int32 | Improve this Doc View Source Type Specifies the particular combination of criteria to use. Declaration public TermCriteriaType Type Field Value Type Description TermCriteriaType"
  },
  "api/OpenCV.Net.TermCriteriaType.html": {
    "href": "api/OpenCV.Net.TermCriteriaType.html",
    "title": "Enum TermCriteriaType",
    "keywords": "Enum TermCriteriaType Specifies the available termination criteria modes for iterative algorithms. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum TermCriteriaType : int Fields Name Description Epsilon Specifies that a minimum required accuracy criteria should be used. MaxIter Specifies that a maximum number of iterations criteria should be used. None Specifies that no termination criteria should be used."
  },
  "api/OpenCV.Net.ThresholdTypes.html": {
    "href": "api/OpenCV.Net.ThresholdTypes.html",
    "title": "Enum ThresholdTypes",
    "keywords": "Enum ThresholdTypes Specifies the available threshold types. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum ThresholdTypes : int Fields Name Description Binary Specifies that all values above threshold should be set to a fixed max value while all other values should be set to 0. BinaryInv Specifies that all values above threshold should be set to 0 while all other values should be set to a fixed max value. Otsu Specifies that the Otsu algorithm should be used to choose the optimal threshold value. Combine the flag with one of the other values. ToZero Specifies that all values above threshold should be left as they are while all other values should be set to 0. ToZeroInv Specifies that all values above threshold should be set to 0 while all other values should be left as they are. Truncate Specifies that all values above threshold should be set to the threshold value while all other values should be left as they are."
  },
  "api/OpenCV.Net.TrackbarCallback.html": {
    "href": "api/OpenCV.Net.TrackbarCallback.html",
    "title": "Delegate TrackbarCallback",
    "keywords": "Delegate TrackbarCallback Represents the method that wil be called whenever the trackbar changes value. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public delegate void TrackbarCallback(int pos); Parameters Type Name Description Int32 pos The new position of the trackbar."
  },
  "api/OpenCV.Net.VideoWriter.html": {
    "href": "api/OpenCV.Net.VideoWriter.html",
    "title": "Class VideoWriter",
    "keywords": "Class VideoWriter Represents a frame writer for a video file stream. Inheritance Object VideoWriter Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public sealed class VideoWriter : SafeHandleZeroOrMinusOneIsInvalid Constructors | Improve this Doc View Source VideoWriter(String, Int32, Double, Size) Initializes a new instance of the VideoWriter class with the specified fileName , codec and format parameters. Declaration public VideoWriter(string fileName, int fourCC, double fps, Size frameSize) Parameters Type Name Description String fileName Name of the output video file. Int32 fourCC 4-character code of codec used to compress the frames. Double fps Framerate of the created video stream. Size frameSize Size of the video frames. | Improve this Doc View Source VideoWriter(String, Int32, Double, Size, Boolean) Initializes a new instance of the VideoWriter class with the specified fileName , codec and format parameters. Declaration public VideoWriter(string fileName, int fourCC, double fps, Size frameSize, bool isColor) Parameters Type Name Description String fileName Name of the output video file. Int32 fourCC 4-character code of codec used to compress the frames. Double fps Framerate of the created video stream. Size frameSize Size of the video frames. Boolean isColor If true , the encoder will expect and encode color frames, otherwise it will work with grayscale frames (the flag is currently supported on Windows only). Methods | Improve this Doc View Source FourCC(Char, Char, Char, Char) Creates the integer representation of a 4-character codec code. Declaration public static int FourCC(char c1, char c2, char c3, char c4) Parameters Type Name Description Char c1 The first character of the codec code. Char c2 The second character of the codec code. Char c3 The third character of the codec code. Char c4 The fourth character of the codec code. Returns Type Description Int32 The integer representation of the codec code. | Improve this Doc View Source ReleaseHandle() Executes the code required to free the native VideoWriter handle. Declaration protected override bool ReleaseHandle() Returns Type Description Boolean true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false . | Improve this Doc View Source WriteFrame(IplImage) Writes a frame to a video file. Declaration public bool WriteFrame(IplImage image) Parameters Type Name Description IplImage image The written frame. Returns Type Description Boolean True if the frame was written successfully; false, otherwise."
  },
  "api/OpenCV.Net.WarpFlags.html": {
    "href": "api/OpenCV.Net.WarpFlags.html",
    "title": "Enum WarpFlags",
    "keywords": "Enum WarpFlags Specifies interpolation and operational flags for image warp methods. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum WarpFlags : int Fields Name Description Area Specifies resampling using pixel area relation. It may be a preferred method for image decimation, as it gives moire’-free results. Similar to NearestNeighbor when image is zoomed. Cubic Specifies a bicubic interpolation over a 4x4 pixel neighborhood. FillOutliers Specifies that all destination pixels should be filled. If some correspond to outliers in the source image, they are set to a constant value. InverseMap Specifies that the map matrix is inversely transformed from the destination image to the source and can thus be used directly for pixel interpolation. Lanczos4 Specifies a Lanczos interpolation over an 8x8 pixel neighborhood. Linear Specifies a bilinear interpolation. NearestNeighbor Specifies a nearest-neighbor interpolation."
  },
  "api/OpenCV.Net.WindowFlags.html": {
    "href": "api/OpenCV.Net.WindowFlags.html",
    "title": "Enum WindowFlags",
    "keywords": "Enum WindowFlags Specifies the available flags used to create a named window. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum WindowFlags : int Fields Name Description AutoSize Specifies that the user cannot resize the window, i.e. the size is constrained by the displayed image. FreeRatio Specifies that the image can be resized freely (no ratio constraint). Fullscreen Specifies that the window should be fullscreen. GuiExpanded Specifies that the new Qt status and tool bars should be used. GuiNormal Specifies that the classic GUI style should be used. KeepRatio Specifies that the image aspect ratio will be maintained. Normal Specifies that the user can resize the window (no constraint). OpenGL Specifies that the window will have OpenGL support."
  },
  "api/OpenCV.Net.WindowProperty.html": {
    "href": "api/OpenCV.Net.WindowProperty.html",
    "title": "Enum WindowProperty",
    "keywords": "Enum WindowProperty Specifies the window properties that are available to query and modify. Namespace : OpenCV.Net Assembly : OpenCV.Net.dll Syntax public enum WindowProperty : int Fields Name Description AspectRatio Specifies the aspect ratio of the window. AutoSize Specifies the autosize state of the window. Fullscreen Specifies the fullscreen state of the window. OpenGL Specifies the window's OpenGL support."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Getting Started",
    "keywords": "Getting Started 1. What is OpenCV.NET OpenCV.NET is a .NET interface for the popular OpenCV computer vision and image processing library. These bindings were developed from scratch over several years and include many features that have been missing from other attempts, specifically: Cross-platform compatibility with a .NET standard API (only P/Invoke is used). Very close to 100% support of the C API (including undocumented functions). Full documentation/intellisense for all supported methods, classes and enum members (arduously mined from many different sources). Support for exceptions. Garbage-collector friendly: GC is aware of the actual memory used by matrices and images. Pointers are guaranteed to survive function calls even if concurrent garbage collection happens. Object model following C++ API as much as possible (towards future increased support of C++ API). Permissive MIT license. Warning The bindings currently target OpenCV 2.4.8. OpenCV has since moved towards a pure C++ API and has subsequently deprecated its C interface, which means we cannot easily access new features. We are currently exploring different alternatives to generate a comprehensive high-quality wrapper for newer versions of OpenCV, but for now OpenCV.Net will keep targeting the 2.4.x series. 2. Installing OpenCV.NET The easiest way to start using OpenCV.NET in your projects is to install the NuGet package from one of the following sources: .NET Command-line : dotnet add package OpenCV.NET . Powershell : From the NuGet Package Manager Console, type Install-Package OpenCV.Net . PackageReference : Add the line <PackageReference Include=\"OpenCV.Net\" Version=\"3.3.1\" /> to your .csproj file. Important Prerequisites The Visual C++ Redistributable for Visual Studio 2012 may be required on Windows systems to correcty load native dependencies."
  },
  "index.html": {
    "href": "index.html",
    "title": "OpenCV.NET Documentation",
    "keywords": "OpenCV.NET Documentation OpenCV.NET is a .NET interface for the popular OpenCV computer vision and image processing library. Warning These docs are under active development, feel free to contribute by either raising an issue or following the links saying Improve this Doc . Quick Start .NET Command-line dotnet add package OpenCV.NET Powershell Install-Package OpenCV.Net PackageReference <PackageReference Include=\"OpenCV.Net\" Version=\"3.3.1\" />"
  }
}